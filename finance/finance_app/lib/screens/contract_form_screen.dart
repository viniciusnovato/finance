import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/app_provider.dart';
import '../models/contract.dart';
import '../models/client.dart';
import '../utils/app_colors.dart';

class ContractFormScreen extends StatefulWidget {
  final Contract? contract; // null para criar, preenchido para editar
  
  const ContractFormScreen({super.key, this.contract});

  @override
  State<ContractFormScreen> createState() => _ContractFormScreenState();
}

class _ContractFormScreenState extends State<ContractFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final _totalAmountController = TextEditingController();
  final _downPaymentController = TextEditingController();
  final _installmentsController = TextEditingController();
  final _installmentAmountController = TextEditingController();
  final _treatmentDescriptionController = TextEditingController();
  final _notesController = TextEditingController();
  
  String? _selectedClientId;
  DateTime? _startDate;
  DateTime? _endDate;
  ContractStatus _status = ContractStatus.active;
  bool _isLoading = false;
  List<Client> _clients = [];

  @override
  void initState() {
    super.initState();
    _loadClients();
    if (widget.contract != null) {
      _populateFields();
    }
  }

  Future<void> _loadClients() async {
    final provider = context.read<AppProvider>();
    await provider.loadClients();
    setState(() {
      _clients = provider.clients;
    });
  }

  void _populateFields() {
    final contract = widget.contract!;
    _selectedClientId = contract.clientId;
    _totalAmountController.text = contract.totalAmount.toString();
    _downPaymentController.text = contract.downPayment.toString();
    _installmentsController.text = contract.installments.toString();
    _installmentAmountController.text = contract.installmentAmount.toString();
    _treatmentDescriptionController.text = contract.treatmentDescription;
    _notesController.text = contract.notes ?? '';
    _startDate = contract.startDate;
    _endDate = contract.endDate;
    _status = contract.status;
  }

  @override
  void dispose() {
    _totalAmountController.dispose();
    _downPaymentController.dispose();
    _installmentsController.dispose();
    _installmentAmountController.dispose();
    _treatmentDescriptionController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  Future<void> _selectStartDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _startDate ?? DateTime.now(),
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
    );
    if (picked != null && picked != _startDate) {
      setState(() {
        _startDate = picked;
      });
    }
  }

  Future<void> _selectEndDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _endDate ?? _startDate?.add(const Duration(days: 365)) ?? DateTime.now().add(const Duration(days: 365)),
      firstDate: _startDate ?? DateTime.now(),
      lastDate: DateTime(2030),
    );
    if (picked != null && picked != _endDate) {
      setState(() {
        _endDate = picked;
      });
    }
  }

  Future<void> _saveContract() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    if (_selectedClientId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Selecione um cliente'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final now = DateTime.now();
      final contract = Contract(
        id: widget.contract?.id ?? '', // Will be generated by backend
        clientId: _selectedClientId!,
        totalAmount: double.parse(_totalAmountController.text),
        downPayment: double.parse(_downPaymentController.text),
        installments: int.parse(_installmentsController.text),
        installmentAmount: double.parse(_installmentAmountController.text),
        treatmentDescription: _treatmentDescriptionController.text.trim().isEmpty 
            ? 'Tratamento não especificado' 
            : _treatmentDescriptionController.text.trim(),
        notes: _notesController.text.trim().isEmpty 
            ? null 
            : _notesController.text.trim(),
        startDate: _startDate,
        endDate: _endDate,
        status: _status,
        createdBy: 'current_user', // TODO: Get from auth context
        createdAt: widget.contract?.createdAt ?? now,
        updatedAt: now,
      );

      final provider = context.read<AppProvider>();
      
      if (widget.contract == null) {
        await provider.createContract(contract);
      } else {
        await provider.updateContract(contract);
      }

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              widget.contract == null 
                ? 'Contrato criado com sucesso!' 
                : 'Contrato atualizado com sucesso!'
            ),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erro: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.contract == null ? 'Novo Contrato' : 'Editar Contrato'),
        actions: [
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(strokeWidth: 2),
              ),
            )
          else
            TextButton(
              onPressed: _saveContract,
              child: const Text('Salvar'),
            ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            // Informações básicas
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Informações Básicas',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    DropdownButtonFormField<String>(
                      value: _selectedClientId,
                      decoration: const InputDecoration(
                        labelText: 'Cliente *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.person),
                      ),
                      items: _clients.map((client) {
                        return DropdownMenuItem(
                          value: client.id,
                          child: Text('${client.firstName} ${client.lastName}'),
                        );
                      }).toList(),
                      onChanged: (value) {
                        setState(() {
                          _selectedClientId = value;
                        });
                      },
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Selecione um cliente';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _treatmentDescriptionController,
                      decoration: const InputDecoration(
                        labelText: 'Descrição do Tratamento *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.medical_services),
                      ),
                      maxLines: 2,
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Descrição do tratamento é obrigatória';
                        }
                        return null;
                      },
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // Valores e parcelas
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Valores e Parcelas',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _totalAmountController,
                      keyboardType: const TextInputType.numberWithOptions(decimal: true),
                      decoration: const InputDecoration(
                        labelText: 'Valor Total (€) *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.euro),
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Valor total é obrigatório';
                        }
                        final amount = double.tryParse(value);
                        if (amount == null || amount <= 0) {
                          return 'Valor deve ser maior que zero';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _downPaymentController,
                      keyboardType: const TextInputType.numberWithOptions(decimal: true),
                      decoration: const InputDecoration(
                        labelText: 'Entrada (€) *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.account_balance_wallet),
                        helperText: 'Mínimo 30% do valor total',
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Valor da entrada é obrigatório';
                        }
                        final downPayment = double.tryParse(value);
                        if (downPayment == null || downPayment <= 0) {
                          return 'Valor deve ser maior que zero';
                        }
                        final totalAmount = double.tryParse(_totalAmountController.text);
                        if (totalAmount != null && downPayment < (totalAmount * 0.30)) {
                          return 'Entrada deve ser pelo menos 30% do valor total';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(
                          child: TextFormField(
                            controller: _installmentsController,
                            keyboardType: TextInputType.number,
                            decoration: const InputDecoration(
                              labelText: 'Número de Parcelas *',
                              border: OutlineInputBorder(),
                              prefixIcon: Icon(Icons.payment),
                              helperText: 'Máximo 24 parcelas',
                            ),
                            validator: (value) {
                              if (value == null || value.trim().isEmpty) {
                                return 'Número de parcelas é obrigatório';
                              }
                              final installments = int.tryParse(value);
                              if (installments == null || installments <= 0) {
                                return 'Deve ser um número maior que zero';
                              }
                              if (installments > 24) {
                                return 'Máximo 24 parcelas';
                              }
                              return null;
                            },
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: TextFormField(
                            controller: _installmentAmountController,
                            keyboardType: const TextInputType.numberWithOptions(decimal: true),
                            decoration: const InputDecoration(
                              labelText: 'Valor da Parcela (€) *',
                              border: OutlineInputBorder(),
                              prefixIcon: Icon(Icons.monetization_on),
                            ),
                            validator: (value) {
                              if (value == null || value.trim().isEmpty) {
                                return 'Valor da parcela é obrigatório';
                              }
                              final amount = double.tryParse(value);
                              if (amount == null || amount <= 0) {
                                return 'Valor deve ser maior que zero';
                              }
                              return null;
                            },
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // Datas
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Período do Contrato',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(
                          child: InkWell(
                            onTap: _selectStartDate,
                            child: InputDecorator(
                              decoration: const InputDecoration(
                                labelText: 'Data de Início',
                                border: OutlineInputBorder(),
                                prefixIcon: Icon(Icons.calendar_today),
                              ),
                              child: Text(
                                _startDate != null
                                    ? '${_startDate!.day}/${_startDate!.month}/${_startDate!.year}'
                                    : 'Selecionar data',
                                style: _startDate != null
                                    ? null
                                    : TextStyle(color: Colors.grey[600]),
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: InkWell(
                            onTap: _selectEndDate,
                            child: InputDecorator(
                              decoration: const InputDecoration(
                                labelText: 'Data de Fim',
                                border: OutlineInputBorder(),
                                prefixIcon: Icon(Icons.event),
                              ),
                              child: Text(
                                _endDate != null
                                    ? '${_endDate!.day}/${_endDate!.month}/${_endDate!.year}'
                                    : 'Selecionar data',
                                style: _endDate != null
                                    ? null
                                    : TextStyle(color: Colors.grey[600]),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // Status e observações
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Status e Observações',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    DropdownButtonFormField<ContractStatus>(
                      value: _status,
                      decoration: const InputDecoration(
                        labelText: 'Status do Contrato',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.flag),
                      ),
                      items: ContractStatus.values.map((status) {
                        return DropdownMenuItem(
                          value: status,
                          child: Text(status.displayName),
                        );
                      }).toList(),
                      onChanged: (value) {
                        setState(() {
                          _status = value!;
                        });
                      },
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _notesController,
                      maxLines: 3,
                      decoration: const InputDecoration(
                        labelText: 'Observações',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.note),
                        alignLabelWithHint: true,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 32),
          ],
        ),
      ),
    );
  }
}