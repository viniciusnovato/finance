import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/app_provider.dart';
import '../models/payment.dart';
import '../models/contract.dart';
import '../utils/app_colors.dart';

class PaymentFormScreen extends StatefulWidget {
  final Payment? payment; // null para criar, preenchido para editar
  final String? contractId; // Para criar pagamento para contrato específico
  
  const PaymentFormScreen({super.key, this.payment, this.contractId});

  @override
  State<PaymentFormScreen> createState() => _PaymentFormScreenState();
}

class _PaymentFormScreenState extends State<PaymentFormScreen> {
  final _formKey = GlobalKey<FormState>();
  final _installmentNumberController = TextEditingController();
  final _amountController = TextEditingController();
  final _notesController = TextEditingController();
  
  String? _selectedContractId;
  DateTime? _paymentDate;
  DateTime? _dueDate;
  PaymentStatus _status = PaymentStatus.pending;
  PaymentMethod? _selectedMethod;
  bool _isLoading = false;
  List<Contract> _contracts = [];

  @override
  void initState() {
    super.initState();
    _loadContracts();
    if (widget.payment != null) {
      _populateFields();
    } else if (widget.contractId != null) {
      _selectedContractId = widget.contractId;
    }
  }

  Future<void> _loadContracts() async {
    final provider = context.read<AppProvider>();
    await provider.loadContracts();
    setState(() {
      _contracts = provider.contracts;
    });
  }

  void _populateFields() {
    final payment = widget.payment!;
    _selectedContractId = payment.contractId;
    _installmentNumberController.text = payment.installmentNumber.toString();
    _amountController.text = payment.amount.toString();
    _notesController.text = payment.notes ?? '';
    _paymentDate = payment.paidDate;
    _dueDate = payment.dueDate;
    _status = payment.status;
    _selectedMethod = payment.paymentMethod;
  }

  @override
  void dispose() {
    _installmentNumberController.dispose();
    _amountController.dispose();
    _notesController.dispose();
    super.dispose();
  }

  Future<void> _selectPaymentDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _paymentDate ?? DateTime.now(),
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
    );
    if (picked != null && picked != _paymentDate) {
      setState(() {
        _paymentDate = picked;
      });
    }
  }

  Future<void> _selectDueDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _dueDate ?? DateTime.now(),
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
    );
    if (picked != null && picked != _dueDate) {
      setState(() {
        _dueDate = picked;
      });
    }
  }

  Future<void> _savePayment() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    if (_selectedContractId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Selecione um contrato'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final now = DateTime.now();
      final payment = Payment(
        id: widget.payment?.id ?? '', // Will be generated by backend
        contractId: _selectedContractId!,
        installmentNumber: int.parse(_installmentNumberController.text),
        amount: double.parse(_amountController.text),
        dueDate: _dueDate ?? DateTime.now(),
        paidDate: _paymentDate,
        status: _status,
        paymentMethod: _selectedMethod ?? PaymentMethod.cash,
        notes: _notesController.text.trim().isEmpty 
            ? null 
            : _notesController.text.trim(),
        createdBy: 'current_user', // TODO: Get from auth context
        createdAt: widget.payment?.createdAt ?? now,
        updatedAt: now,
      );

      final provider = context.read<AppProvider>();
      
      // TODO: Implementar métodos de pagamento no AppProvider
      // if (widget.payment == null) {
      //   await provider.addPayment(payment);
      // } else {
      //   await provider.updatePayment(payment);
      // }
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
              widget.payment == null 
                ? 'Pagamento criado com sucesso!' 
                : 'Pagamento atualizado com sucesso!'
            ),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.of(context).pop();
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Erro: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.payment == null ? 'Novo Pagamento' : 'Editar Pagamento'),
        actions: [
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(16.0),
              child: SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(strokeWidth: 2),
              ),
            )
          else
            TextButton(
              onPressed: _savePayment,
              child: const Text('Salvar'),
            ),
        ],
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16.0),
          children: [
            // Informações básicas
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Informações Básicas',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    DropdownButtonFormField<String>(
                      value: _selectedContractId,
                      decoration: const InputDecoration(
                        labelText: 'Contrato *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.description),
                      ),
                      items: _contracts.map((contract) {
                        return DropdownMenuItem(
                          value: contract.id,
                          child: Text('Contrato ${contract.id} - €${contract.totalAmount}'),
                        );
                      }).toList(),
                      onChanged: widget.contractId == null ? (value) {
                        setState(() {
                          _selectedContractId = value;
                        });
                      } : null, // Desabilitar se contractId foi fornecido
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Selecione um contrato';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _installmentNumberController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        labelText: 'Número da Parcela *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.numbers),
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Número da parcela é obrigatório';
                        }
                        final number = int.tryParse(value);
                        if (number == null || number <= 0) {
                          return 'Número da parcela deve ser maior que zero';
                        }
                        return null;
                      },
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _amountController,
                      keyboardType: const TextInputType.numberWithOptions(decimal: true),
                      decoration: const InputDecoration(
                        labelText: 'Valor (€) *',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.euro),
                      ),
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return 'Valor é obrigatório';
                        }
                        final amount = double.tryParse(value);
                        if (amount == null || amount <= 0) {
                          return 'Valor deve ser maior que zero';
                        }
                        return null;
                      },
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // Datas
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Datas',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(
                          child: InkWell(
                            onTap: _selectDueDate,
                            child: InputDecorator(
                              decoration: const InputDecoration(
                                labelText: 'Data de Vencimento *',
                                border: OutlineInputBorder(),
                                prefixIcon: Icon(Icons.schedule),
                              ),
                              child: Text(
                                _dueDate != null
                                    ? '${_dueDate!.day}/${_dueDate!.month}/${_dueDate!.year}'
                                    : 'Selecionar data',
                                style: _dueDate != null
                                    ? null
                                    : TextStyle(color: Colors.grey[600]),
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: InkWell(
                            onTap: _selectPaymentDate,
                            child: InputDecorator(
                              decoration: const InputDecoration(
                                labelText: 'Data de Pagamento',
                                border: OutlineInputBorder(),
                                prefixIcon: Icon(Icons.calendar_today),
                              ),
                              child: Text(
                                _paymentDate != null
                                    ? '${_paymentDate!.day}/${_paymentDate!.month}/${_paymentDate!.year}'
                                    : 'Selecionar data',
                                style: _paymentDate != null
                                    ? null
                                    : TextStyle(color: Colors.grey[600]),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 16),
            
            // Status e método
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Status e Método de Pagamento',
                      style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    Row(
                      children: [
                        Expanded(
                          child: DropdownButtonFormField<PaymentStatus>(
                            value: _status,
                            decoration: const InputDecoration(
                              labelText: 'Status',
                              border: OutlineInputBorder(),
                              prefixIcon: Icon(Icons.flag),
                            ),
                            items: PaymentStatus.values.map((status) {
                              return DropdownMenuItem(
                                value: status,
                                child: Text(status.displayName),
                              );
                            }).toList(),
                            onChanged: (value) {
                              setState(() {
                                _status = value!;
                              });
                            },
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: DropdownButtonFormField<PaymentMethod>(
                            value: _selectedMethod,
                            decoration: const InputDecoration(
                              labelText: 'Método',
                              border: OutlineInputBorder(),
                              prefixIcon: Icon(Icons.payment),
                            ),
                            items: PaymentMethod.values.map((method) {
                              return DropdownMenuItem(
                                value: method,
                                child: Text(method.displayName),
                              );
                            }).toList(),
                            onChanged: (value) {
                              setState(() {
                                _selectedMethod = value!;
                              });
                            },
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 16),
                    TextFormField(
                      controller: _notesController,
                      maxLines: 3,
                      decoration: const InputDecoration(
                        labelText: 'Observações',
                        border: OutlineInputBorder(),
                        prefixIcon: Icon(Icons.note),
                        alignLabelWithHint: true,
                      ),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 32),
          ],
        ),
      ),
    );
  }
}