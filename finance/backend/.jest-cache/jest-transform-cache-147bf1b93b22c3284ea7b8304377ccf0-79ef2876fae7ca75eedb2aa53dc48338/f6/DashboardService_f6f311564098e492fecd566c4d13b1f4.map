{"version":3,"names":["cov_2fqapmuigw","actualCoverage","DashboardRepository","s","require","calculateAggregatePaymentStats","DashboardService","getStats","period","f","periodDays","parseInt","startDate","today","_calculateDateRange","clientsArray","contractsArray","allPayments","Promise","all","getAllClients","getAllContracts","getAllPayments","contractsWithPayments","_associatePaymentsToContracts","paymentStats","clientStats","_calculateClientStats","contractStats","_calculateContractStats","paymentStatsData","_calculatePaymentStats","metrics","_calculateMetrics","clients","contracts","payments","payment_summary","total_contract_value","total_value","total_amount_paid","paid_value","total_amount_remaining","pending_value","fully_paid_contracts","partially_paid_contracts","total","days","start_date","end_date","getRevenueChart","type","periodNum","getPaymentsForChart","_processRevenueChartData","getPaymentsChart","getPaymentsByPeriod","_processPaymentsChartData","getRecentActivities","limit","limitNum","Date","setDate","getDate","startDateStr","toISOString","split","map","contract","contractPayments","filter","payment","contract_id","id","totalClients","length","activeClients","c","status","newClientsThisPeriod","created_at","b","active","inactive","new_this_period","totalContracts","activeContracts","pendingContracts","completedContracts","cancelledContracts","inactiveContracts","newContractsThisPeriod","totalContractValue","reduce","sum","parseFloat","value","pending","completed","cancelled","totalPayments","paidPayments","p","pendingPayments","cancelledPayments","overduePayments","due_date","totalPaymentValue","amount","paidValue","pendingValue","overdueValue","revenueThisPeriod","paid_date","paymentsThisPeriod","paid","overdue","paid_this_period","overdue_value","revenue_this_period","aggregatePaymentStats","conversionRate","paymentRate","conversion_rate","Math","round","payment_rate","average_contract_value","average_payment_value","average_percentage_paid","payment_completion_rate","contracts_with_down_payment","groupedData","forEach","date","payment_date","key","getFullYear","String","getMonth","padStart","ceil","labels","Object","keys","data","values","statusCounts","module","exports"],"sources":["DashboardService.js"],"sourcesContent":["const { DashboardRepository } = require('../repositories/DashboardRepository');\nconst { calculateAggregatePaymentStats } = require('../utils/contractCalculations');\n\nclass DashboardService {\n  /**\n   * Obter estatísticas gerais do dashboard\n   * @param {string} period - Período em dias\n   * @returns {Object} Estatísticas do dashboard\n   */\n  static async getStats(period) {\n    const periodDays = parseInt(period);\n    const { startDate, today } = this._calculateDateRange(periodDays);\n\n    // Buscar dados básicos\n    const [clientsArray, contractsArray, allPayments] = await Promise.all([\n      DashboardRepository.getAllClients(),\n      DashboardRepository.getAllContracts(),\n      DashboardRepository.getAllPayments()\n    ]);\n\n    // Processar dados\n    const contractsWithPayments = this._associatePaymentsToContracts(contractsArray, allPayments);\n    const paymentStats = calculateAggregatePaymentStats(contractsWithPayments);\n\n    // Calcular estatísticas de clientes\n    const clientStats = this._calculateClientStats(clientsArray, startDate);\n    \n    // Calcular estatísticas de contratos\n    const contractStats = this._calculateContractStats(contractsWithPayments, startDate);\n    \n    // Calcular estatísticas de pagamentos\n    const paymentStatsData = this._calculatePaymentStats(allPayments, startDate, today);\n    \n    // Calcular métricas\n    const metrics = this._calculateMetrics(clientStats, contractStats, paymentStatsData, paymentStats);\n\n    return {\n      clients: clientStats,\n      contracts: contractStats,\n      payments: paymentStatsData,\n      metrics,\n      payment_summary: {\n        total_contract_value: paymentStatsData.total_value,\n        total_amount_paid: paymentStatsData.paid_value,\n        total_amount_remaining: paymentStatsData.pending_value,\n        fully_paid_contracts: paymentStats.fully_paid_contracts,\n        partially_paid_contracts: contractStats.total - paymentStats.fully_paid_contracts\n      },\n      period: {\n        days: periodDays,\n        start_date: startDate,\n        end_date: today\n      }\n    };\n  }\n\n  /**\n   * Obter dados do gráfico de receita\n   * @param {string} period - Período\n   * @param {string} type - Tipo do gráfico (monthly, weekly)\n   * @returns {Object} Dados do gráfico\n   */\n  static async getRevenueChart(period, type) {\n    const periodNum = parseInt(period);\n    const payments = await DashboardRepository.getPaymentsForChart(periodNum, type);\n    \n    return this._processRevenueChartData(payments, type);\n  }\n\n  /**\n   * Obter dados do gráfico de pagamentos por status\n   * @param {string} period - Período em dias\n   * @returns {Object} Dados do gráfico\n   */\n  static async getPaymentsChart(period) {\n    const periodDays = parseInt(period);\n    const { startDate } = this._calculateDateRange(periodDays);\n    \n    const payments = await DashboardRepository.getPaymentsByPeriod(startDate);\n    \n    return this._processPaymentsChartData(payments);\n  }\n\n  /**\n   * Obter atividades recentes\n   * @param {string} limit - Limite de registros\n   * @returns {Array} Lista de atividades\n   */\n  static async getRecentActivities(limit) {\n    const limitNum = parseInt(limit);\n    return await DashboardRepository.getRecentActivities(limitNum);\n  }\n\n  // Métodos privados auxiliares\n  static _calculateDateRange(periodDays) {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - periodDays);\n    const startDateStr = startDate.toISOString().split('T')[0];\n    const today = new Date().toISOString().split('T')[0];\n    \n    return { startDate: startDateStr, today };\n  }\n\n  static _associatePaymentsToContracts(contracts, payments) {\n    return contracts.map(contract => {\n      const contractPayments = payments.filter(payment => payment.contract_id === contract.id);\n      return { ...contract, payments: contractPayments };\n    });\n  }\n\n  static _calculateClientStats(clients, startDate) {\n    const totalClients = clients.length;\n    const activeClients = clients.filter(c => c.status === 'active').length;\n    const newClientsThisPeriod = clients.filter(c => c.created_at >= startDate).length;\n\n    return {\n      total: totalClients || 0,\n      active: activeClients,\n      inactive: (totalClients || 0) - activeClients,\n      new_this_period: newClientsThisPeriod\n    };\n  }\n\n  static _calculateContractStats(contracts, startDate) {\n    const totalContracts = contracts.length;\n    const activeContracts = contracts.filter(c => c.status === 'active').length;\n    const pendingContracts = contracts.filter(c => c.status === 'pending').length;\n    const completedContracts = contracts.filter(c => c.status === 'completed').length;\n    const cancelledContracts = contracts.filter(c => c.status === 'cancelled').length;\n    const inactiveContracts = contracts.filter(c => c.status === 'inactive').length;\n    const newContractsThisPeriod = contracts.filter(c => c.created_at >= startDate).length;\n    const totalContractValue = contracts.reduce((sum, c) => sum + parseFloat(c.value || 0), 0);\n\n    return {\n      total: totalContracts,\n      active: activeContracts,\n      pending: pendingContracts,\n      completed: completedContracts,\n      cancelled: cancelledContracts,\n      inactive: inactiveContracts,\n      new_this_period: newContractsThisPeriod,\n      total_value: totalContractValue\n    };\n  }\n\n  static _calculatePaymentStats(payments, startDate, today) {\n    const totalPayments = payments.length;\n    const paidPayments = payments.filter(p => p.status === 'paid').length;\n    const pendingPayments = payments.filter(p => p.status === 'pending').length;\n    const cancelledPayments = payments.filter(p => p.status === 'cancelled').length;\n    const overduePayments = payments.filter(p => p.status === 'pending' && p.due_date < today).length;\n    \n    const totalPaymentValue = payments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\n    const paidValue = payments.filter(p => p.status === 'paid').reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\n    const pendingValue = payments.filter(p => p.status === 'pending').reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\n    const overdueValue = payments.filter(p => p.status === 'pending' && p.due_date < today).reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\n    const revenueThisPeriod = payments.filter(p => p.status === 'paid' && p.paid_date >= startDate).reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\n    const paymentsThisPeriod = payments.filter(p => p.status === 'paid' && p.paid_date >= startDate).length;\n\n    return {\n      total: totalPayments,\n      paid: paidPayments,\n      pending: pendingPayments,\n      overdue: overduePayments,\n      cancelled: cancelledPayments,\n      paid_this_period: paymentsThisPeriod,\n      total_value: totalPaymentValue,\n      paid_value: paidValue,\n      pending_value: pendingValue,\n      overdue_value: overdueValue,\n      revenue_this_period: revenueThisPeriod\n    };\n  }\n\n  static _calculateMetrics(clientStats, contractStats, paymentStats, aggregatePaymentStats) {\n    const conversionRate = clientStats.total > 0 ? (contractStats.total / clientStats.total * 100) : 0;\n    const paymentRate = paymentStats.total > 0 ? (paymentStats.paid / paymentStats.total * 100) : 0;\n\n    return {\n      conversion_rate: Math.round(conversionRate * 100) / 100,\n      payment_rate: Math.round(paymentRate * 100) / 100,\n      average_contract_value: contractStats.total > 0 ? Math.round((contractStats.total_value / contractStats.total) * 100) / 100 : 0,\n      average_payment_value: paymentStats.total > 0 ? Math.round((paymentStats.total_value / paymentStats.total) * 100) / 100 : 0,\n      average_percentage_paid: aggregatePaymentStats.average_percentage_paid,\n      payment_completion_rate: aggregatePaymentStats.payment_completion_rate,\n      contracts_with_down_payment: aggregatePaymentStats.contracts_with_down_payment\n    };\n  }\n\n  static _processRevenueChartData(payments, type) {\n    // Implementar lógica de processamento do gráfico de receita\n    // Esta é uma implementação simplificada\n    const groupedData = {};\n    \n    payments.forEach(payment => {\n      const date = new Date(payment.payment_date);\n      const key = type === 'monthly' \n        ? `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`\n        : `${date.getFullYear()}-W${Math.ceil(date.getDate() / 7)}`;\n      \n      if (!groupedData[key]) {\n        groupedData[key] = 0;\n      }\n      groupedData[key] += parseFloat(payment.amount || 0);\n    });\n\n    return {\n      labels: Object.keys(groupedData),\n      data: Object.values(groupedData)\n    };\n  }\n\n  static _processPaymentsChartData(payments) {\n    const statusCounts = {\n      paid: 0,\n      pending: 0,\n      overdue: 0,\n      cancelled: 0\n    };\n\n    const today = new Date().toISOString().split('T')[0];\n    \n    payments.forEach(payment => {\n      if (payment.status === 'paid') {\n        statusCounts.paid++;\n      } else if (payment.status === 'pending') {\n        if (payment.due_date < today) {\n          statusCounts.overdue++;\n        } else {\n          statusCounts.pending++;\n        }\n      } else if (payment.status === 'cancelled') {\n        statusCounts.cancelled++;\n      }\n    });\n\n    return {\n      labels: ['Pagos', 'Pendentes', 'Em Atraso', 'Cancelados'],\n      data: [statusCounts.paid, statusCounts.pending, statusCounts.overdue, statusCounts.cancelled]\n    };\n  }\n}\n\nmodule.exports = { DashboardService };"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAM;EAAEE;AAAoB,CAAC;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,qCAAqC,CAAC;AAC9E,MAAM;EAAEC;AAA+B,CAAC;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,+BAA+B,CAAC;AAEnF,MAAME,gBAAgB,CAAC;EACrB;AACF;AACA;AACA;AACA;EACE,aAAaC,QAAQA,CAACC,MAAM,EAAE;IAAA;IAAAR,cAAA,GAAAS,CAAA;IAC5B,MAAMC,UAAU;IAAA;IAAA,CAAAV,cAAA,GAAAG,CAAA,OAAGQ,QAAQ,CAACH,MAAM,CAAC;IACnC,MAAM;MAAEI,SAAS;MAAEC;IAAM,CAAC;IAAA;IAAA,CAAAb,cAAA,GAAAG,CAAA,OAAG,IAAI,CAACW,mBAAmB,CAACJ,UAAU,CAAC;;IAEjE;IACA,MAAM,CAACK,YAAY,EAAEC,cAAc,EAAEC,WAAW,CAAC;IAAA;IAAA,CAAAjB,cAAA,GAAAG,CAAA,OAAG,MAAMe,OAAO,CAACC,GAAG,CAAC,CACpEjB,mBAAmB,CAACkB,aAAa,CAAC,CAAC,EACnClB,mBAAmB,CAACmB,eAAe,CAAC,CAAC,EACrCnB,mBAAmB,CAACoB,cAAc,CAAC,CAAC,CACrC,CAAC;;IAEF;IACA,MAAMC,qBAAqB;IAAA;IAAA,CAAAvB,cAAA,GAAAG,CAAA,OAAG,IAAI,CAACqB,6BAA6B,CAACR,cAAc,EAAEC,WAAW,CAAC;IAC7F,MAAMQ,YAAY;IAAA;IAAA,CAAAzB,cAAA,GAAAG,CAAA,OAAGE,8BAA8B,CAACkB,qBAAqB,CAAC;;IAE1E;IACA,MAAMG,WAAW;IAAA;IAAA,CAAA1B,cAAA,GAAAG,CAAA,OAAG,IAAI,CAACwB,qBAAqB,CAACZ,YAAY,EAAEH,SAAS,CAAC;;IAEvE;IACA,MAAMgB,aAAa;IAAA;IAAA,CAAA5B,cAAA,GAAAG,CAAA,OAAG,IAAI,CAAC0B,uBAAuB,CAACN,qBAAqB,EAAEX,SAAS,CAAC;;IAEpF;IACA,MAAMkB,gBAAgB;IAAA;IAAA,CAAA9B,cAAA,GAAAG,CAAA,OAAG,IAAI,CAAC4B,sBAAsB,CAACd,WAAW,EAAEL,SAAS,EAAEC,KAAK,CAAC;;IAEnF;IACA,MAAMmB,OAAO;IAAA;IAAA,CAAAhC,cAAA,GAAAG,CAAA,QAAG,IAAI,CAAC8B,iBAAiB,CAACP,WAAW,EAAEE,aAAa,EAAEE,gBAAgB,EAAEL,YAAY,CAAC;IAAC;IAAAzB,cAAA,GAAAG,CAAA;IAEnG,OAAO;MACL+B,OAAO,EAAER,WAAW;MACpBS,SAAS,EAAEP,aAAa;MACxBQ,QAAQ,EAAEN,gBAAgB;MAC1BE,OAAO;MACPK,eAAe,EAAE;QACfC,oBAAoB,EAAER,gBAAgB,CAACS,WAAW;QAClDC,iBAAiB,EAAEV,gBAAgB,CAACW,UAAU;QAC9CC,sBAAsB,EAAEZ,gBAAgB,CAACa,aAAa;QACtDC,oBAAoB,EAAEnB,YAAY,CAACmB,oBAAoB;QACvDC,wBAAwB,EAAEjB,aAAa,CAACkB,KAAK,GAAGrB,YAAY,CAACmB;MAC/D,CAAC;MACDpC,MAAM,EAAE;QACNuC,IAAI,EAAErC,UAAU;QAChBsC,UAAU,EAAEpC,SAAS;QACrBqC,QAAQ,EAAEpC;MACZ;IACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,aAAaqC,eAAeA,CAAC1C,MAAM,EAAE2C,IAAI,EAAE;IAAA;IAAAnD,cAAA,GAAAS,CAAA;IACzC,MAAM2C,SAAS;IAAA;IAAA,CAAApD,cAAA,GAAAG,CAAA,QAAGQ,QAAQ,CAACH,MAAM,CAAC;IAClC,MAAM4B,QAAQ;IAAA;IAAA,CAAApC,cAAA,GAAAG,CAAA,QAAG,MAAMD,mBAAmB,CAACmD,mBAAmB,CAACD,SAAS,EAAED,IAAI,CAAC;IAAC;IAAAnD,cAAA,GAAAG,CAAA;IAEhF,OAAO,IAAI,CAACmD,wBAAwB,CAAClB,QAAQ,EAAEe,IAAI,CAAC;EACtD;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAaI,gBAAgBA,CAAC/C,MAAM,EAAE;IAAA;IAAAR,cAAA,GAAAS,CAAA;IACpC,MAAMC,UAAU;IAAA;IAAA,CAAAV,cAAA,GAAAG,CAAA,QAAGQ,QAAQ,CAACH,MAAM,CAAC;IACnC,MAAM;MAAEI;IAAU,CAAC;IAAA;IAAA,CAAAZ,cAAA,GAAAG,CAAA,QAAG,IAAI,CAACW,mBAAmB,CAACJ,UAAU,CAAC;IAE1D,MAAM0B,QAAQ;IAAA;IAAA,CAAApC,cAAA,GAAAG,CAAA,QAAG,MAAMD,mBAAmB,CAACsD,mBAAmB,CAAC5C,SAAS,CAAC;IAAC;IAAAZ,cAAA,GAAAG,CAAA;IAE1E,OAAO,IAAI,CAACsD,yBAAyB,CAACrB,QAAQ,CAAC;EACjD;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAasB,mBAAmBA,CAACC,KAAK,EAAE;IAAA;IAAA3D,cAAA,GAAAS,CAAA;IACtC,MAAMmD,QAAQ;IAAA;IAAA,CAAA5D,cAAA,GAAAG,CAAA,QAAGQ,QAAQ,CAACgD,KAAK,CAAC;IAAC;IAAA3D,cAAA,GAAAG,CAAA;IACjC,OAAO,MAAMD,mBAAmB,CAACwD,mBAAmB,CAACE,QAAQ,CAAC;EAChE;;EAEA;EACA,OAAO9C,mBAAmBA,CAACJ,UAAU,EAAE;IAAA;IAAAV,cAAA,GAAAS,CAAA;IACrC,MAAMG,SAAS;IAAA;IAAA,CAAAZ,cAAA,GAAAG,CAAA,QAAG,IAAI0D,IAAI,CAAC,CAAC;IAAC;IAAA7D,cAAA,GAAAG,CAAA;IAC7BS,SAAS,CAACkD,OAAO,CAAClD,SAAS,CAACmD,OAAO,CAAC,CAAC,GAAGrD,UAAU,CAAC;IACnD,MAAMsD,YAAY;IAAA;IAAA,CAAAhE,cAAA,GAAAG,CAAA,QAAGS,SAAS,CAACqD,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC1D,MAAMrD,KAAK;IAAA;IAAA,CAAAb,cAAA,GAAAG,CAAA,QAAG,IAAI0D,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAAC;IAAAlE,cAAA,GAAAG,CAAA;IAErD,OAAO;MAAES,SAAS,EAAEoD,YAAY;MAAEnD;IAAM,CAAC;EAC3C;EAEA,OAAOW,6BAA6BA,CAACW,SAAS,EAAEC,QAAQ,EAAE;IAAA;IAAApC,cAAA,GAAAS,CAAA;IAAAT,cAAA,GAAAG,CAAA;IACxD,OAAOgC,SAAS,CAACgC,GAAG,CAACC,QAAQ,IAAI;MAAA;MAAApE,cAAA,GAAAS,CAAA;MAC/B,MAAM4D,gBAAgB;MAAA;MAAA,CAAArE,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACkC,MAAM,CAACC,OAAO,IAAI;QAAA;QAAAvE,cAAA,GAAAS,CAAA;QAAAT,cAAA,GAAAG,CAAA;QAAA,OAAAoE,OAAO,CAACC,WAAW,KAAKJ,QAAQ,CAACK,EAAE;MAAD,CAAC,CAAC;MAAC;MAAAzE,cAAA,GAAAG,CAAA;MACzF,OAAO;QAAE,GAAGiE,QAAQ;QAAEhC,QAAQ,EAAEiC;MAAiB,CAAC;IACpD,CAAC,CAAC;EACJ;EAEA,OAAO1C,qBAAqBA,CAACO,OAAO,EAAEtB,SAAS,EAAE;IAAA;IAAAZ,cAAA,GAAAS,CAAA;IAC/C,MAAMiE,YAAY;IAAA;IAAA,CAAA1E,cAAA,GAAAG,CAAA,QAAG+B,OAAO,CAACyC,MAAM;IACnC,MAAMC,aAAa;IAAA;IAAA,CAAA5E,cAAA,GAAAG,CAAA,QAAG+B,OAAO,CAACoC,MAAM,CAACO,CAAC,IAAI;MAAA;MAAA7E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA0E,CAAC,CAACC,MAAM,KAAK,QAAQ;IAAD,CAAC,CAAC,CAACH,MAAM;IACvE,MAAMI,oBAAoB;IAAA;IAAA,CAAA/E,cAAA,GAAAG,CAAA,QAAG+B,OAAO,CAACoC,MAAM,CAACO,CAAC,IAAI;MAAA;MAAA7E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA0E,CAAC,CAACG,UAAU,IAAIpE,SAAS;IAAD,CAAC,CAAC,CAAC+D,MAAM;IAAC;IAAA3E,cAAA,GAAAG,CAAA;IAEnF,OAAO;MACL2C,KAAK;MAAE;MAAA,CAAA9C,cAAA,GAAAiF,CAAA,UAAAP,YAAY;MAAA;MAAA,CAAA1E,cAAA,GAAAiF,CAAA,UAAI,CAAC;MACxBC,MAAM,EAAEN,aAAa;MACrBO,QAAQ,EAAE;MAAC;MAAA,CAAAnF,cAAA,GAAAiF,CAAA,UAAAP,YAAY;MAAA;MAAA,CAAA1E,cAAA,GAAAiF,CAAA,UAAI,CAAC,KAAIL,aAAa;MAC7CQ,eAAe,EAAEL;IACnB,CAAC;EACH;EAEA,OAAOlD,uBAAuBA,CAACM,SAAS,EAAEvB,SAAS,EAAE;IAAA;IAAAZ,cAAA,GAAAS,CAAA;IACnD,MAAM4E,cAAc;IAAA;IAAA,CAAArF,cAAA,GAAAG,CAAA,QAAGgC,SAAS,CAACwC,MAAM;IACvC,MAAMW,eAAe;IAAA;IAAA,CAAAtF,cAAA,GAAAG,CAAA,QAAGgC,SAAS,CAACmC,MAAM,CAACO,CAAC,IAAI;MAAA;MAAA7E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA0E,CAAC,CAACC,MAAM,KAAK,QAAQ;IAAD,CAAC,CAAC,CAACH,MAAM;IAC3E,MAAMY,gBAAgB;IAAA;IAAA,CAAAvF,cAAA,GAAAG,CAAA,QAAGgC,SAAS,CAACmC,MAAM,CAACO,CAAC,IAAI;MAAA;MAAA7E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA0E,CAAC,CAACC,MAAM,KAAK,SAAS;IAAD,CAAC,CAAC,CAACH,MAAM;IAC7E,MAAMa,kBAAkB;IAAA;IAAA,CAAAxF,cAAA,GAAAG,CAAA,QAAGgC,SAAS,CAACmC,MAAM,CAACO,CAAC,IAAI;MAAA;MAAA7E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA0E,CAAC,CAACC,MAAM,KAAK,WAAW;IAAD,CAAC,CAAC,CAACH,MAAM;IACjF,MAAMc,kBAAkB;IAAA;IAAA,CAAAzF,cAAA,GAAAG,CAAA,QAAGgC,SAAS,CAACmC,MAAM,CAACO,CAAC,IAAI;MAAA;MAAA7E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA0E,CAAC,CAACC,MAAM,KAAK,WAAW;IAAD,CAAC,CAAC,CAACH,MAAM;IACjF,MAAMe,iBAAiB;IAAA;IAAA,CAAA1F,cAAA,GAAAG,CAAA,QAAGgC,SAAS,CAACmC,MAAM,CAACO,CAAC,IAAI;MAAA;MAAA7E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA0E,CAAC,CAACC,MAAM,KAAK,UAAU;IAAD,CAAC,CAAC,CAACH,MAAM;IAC/E,MAAMgB,sBAAsB;IAAA;IAAA,CAAA3F,cAAA,GAAAG,CAAA,QAAGgC,SAAS,CAACmC,MAAM,CAACO,CAAC,IAAI;MAAA;MAAA7E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA0E,CAAC,CAACG,UAAU,IAAIpE,SAAS;IAAD,CAAC,CAAC,CAAC+D,MAAM;IACtF,MAAMiB,kBAAkB;IAAA;IAAA,CAAA5F,cAAA,GAAAG,CAAA,QAAGgC,SAAS,CAAC0D,MAAM,CAAC,CAACC,GAAG,EAAEjB,CAAC,KAAK;MAAA;MAAA7E,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA2F,GAAG,GAAGC,UAAU;MAAC;MAAA,CAAA/F,cAAA,GAAAiF,CAAA,UAAAJ,CAAC,CAACmB,KAAK;MAAA;MAAA,CAAAhG,cAAA,GAAAiF,CAAA,UAAI,CAAC,EAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IAAC;IAAAjF,cAAA,GAAAG,CAAA;IAE3F,OAAO;MACL2C,KAAK,EAAEuC,cAAc;MACrBH,MAAM,EAAEI,eAAe;MACvBW,OAAO,EAAEV,gBAAgB;MACzBW,SAAS,EAAEV,kBAAkB;MAC7BW,SAAS,EAAEV,kBAAkB;MAC7BN,QAAQ,EAAEO,iBAAiB;MAC3BN,eAAe,EAAEO,sBAAsB;MACvCpD,WAAW,EAAEqD;IACf,CAAC;EACH;EAEA,OAAO7D,sBAAsBA,CAACK,QAAQ,EAAExB,SAAS,EAAEC,KAAK,EAAE;IAAA;IAAAb,cAAA,GAAAS,CAAA;IACxD,MAAM2F,aAAa;IAAA;IAAA,CAAApG,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACuC,MAAM;IACrC,MAAM0B,YAAY;IAAA;IAAA,CAAArG,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACkC,MAAM,CAACgC,CAAC,IAAI;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAAmG,CAAC,CAACxB,MAAM,KAAK,MAAM;IAAD,CAAC,CAAC,CAACH,MAAM;IACrE,MAAM4B,eAAe;IAAA;IAAA,CAAAvG,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACkC,MAAM,CAACgC,CAAC,IAAI;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAAmG,CAAC,CAACxB,MAAM,KAAK,SAAS;IAAD,CAAC,CAAC,CAACH,MAAM;IAC3E,MAAM6B,iBAAiB;IAAA;IAAA,CAAAxG,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACkC,MAAM,CAACgC,CAAC,IAAI;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAAmG,CAAC,CAACxB,MAAM,KAAK,WAAW;IAAD,CAAC,CAAC,CAACH,MAAM;IAC/E,MAAM8B,eAAe;IAAA;IAAA,CAAAzG,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACkC,MAAM,CAACgC,CAAC,IAAI;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAiF,CAAA,UAAAqB,CAAC,CAACxB,MAAM,KAAK,SAAS;MAAA;MAAA,CAAA9E,cAAA,GAAAiF,CAAA,UAAIqB,CAAC,CAACI,QAAQ,GAAG7F,KAAK;IAAD,CAAC,CAAC,CAAC8D,MAAM;IAEjG,MAAMgC,iBAAiB;IAAA;IAAA,CAAA3G,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACyD,MAAM,CAAC,CAACC,GAAG,EAAEQ,CAAC,KAAK;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA2F,GAAG,GAAGC,UAAU;MAAC;MAAA,CAAA/F,cAAA,GAAAiF,CAAA,UAAAqB,CAAC,CAACM,MAAM;MAAA;MAAA,CAAA5G,cAAA,GAAAiF,CAAA,UAAI,CAAC,EAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IACzF,MAAM4B,SAAS;IAAA;IAAA,CAAA7G,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACkC,MAAM,CAACgC,CAAC,IAAI;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAAmG,CAAC,CAACxB,MAAM,KAAK,MAAM;IAAD,CAAC,CAAC,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEQ,CAAC,KAAK;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA2F,GAAG,GAAGC,UAAU;MAAC;MAAA,CAAA/F,cAAA,GAAAiF,CAAA,UAAAqB,CAAC,CAACM,MAAM;MAAA;MAAA,CAAA5G,cAAA,GAAAiF,CAAA,UAAI,CAAC,EAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IAClH,MAAM6B,YAAY;IAAA;IAAA,CAAA9G,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACkC,MAAM,CAACgC,CAAC,IAAI;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAAmG,CAAC,CAACxB,MAAM,KAAK,SAAS;IAAD,CAAC,CAAC,CAACe,MAAM,CAAC,CAACC,GAAG,EAAEQ,CAAC,KAAK;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA2F,GAAG,GAAGC,UAAU;MAAC;MAAA,CAAA/F,cAAA,GAAAiF,CAAA,UAAAqB,CAAC,CAACM,MAAM;MAAA;MAAA,CAAA5G,cAAA,GAAAiF,CAAA,UAAI,CAAC,EAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IACxH,MAAM8B,YAAY;IAAA;IAAA,CAAA/G,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACkC,MAAM,CAACgC,CAAC,IAAI;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAiF,CAAA,UAAAqB,CAAC,CAACxB,MAAM,KAAK,SAAS;MAAA;MAAA,CAAA9E,cAAA,GAAAiF,CAAA,UAAIqB,CAAC,CAACI,QAAQ,GAAG7F,KAAK;IAAD,CAAC,CAAC,CAACgF,MAAM,CAAC,CAACC,GAAG,EAAEQ,CAAC,KAAK;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA2F,GAAG,GAAGC,UAAU;MAAC;MAAA,CAAA/F,cAAA,GAAAiF,CAAA,UAAAqB,CAAC,CAACM,MAAM;MAAA;MAAA,CAAA5G,cAAA,GAAAiF,CAAA,UAAI,CAAC,EAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IAC9I,MAAM+B,iBAAiB;IAAA;IAAA,CAAAhH,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACkC,MAAM,CAACgC,CAAC,IAAI;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAiF,CAAA,UAAAqB,CAAC,CAACxB,MAAM,KAAK,MAAM;MAAA;MAAA,CAAA9E,cAAA,GAAAiF,CAAA,UAAIqB,CAAC,CAACW,SAAS,IAAIrG,SAAS;IAAD,CAAC,CAAC,CAACiF,MAAM,CAAC,CAACC,GAAG,EAAEQ,CAAC,KAAK;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,OAAA2F,GAAG,GAAGC,UAAU;MAAC;MAAA,CAAA/F,cAAA,GAAAiF,CAAA,WAAAqB,CAAC,CAACM,MAAM;MAAA;MAAA,CAAA5G,cAAA,GAAAiF,CAAA,WAAI,CAAC,EAAC;IAAD,CAAC,EAAE,CAAC,CAAC;IACtJ,MAAMiC,kBAAkB;IAAA;IAAA,CAAAlH,cAAA,GAAAG,CAAA,QAAGiC,QAAQ,CAACkC,MAAM,CAACgC,CAAC,IAAI;MAAA;MAAAtG,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAAA,kCAAAH,cAAA,GAAAiF,CAAA,WAAAqB,CAAC,CAACxB,MAAM,KAAK,MAAM;MAAA;MAAA,CAAA9E,cAAA,GAAAiF,CAAA,WAAIqB,CAAC,CAACW,SAAS,IAAIrG,SAAS;IAAD,CAAC,CAAC,CAAC+D,MAAM;IAAC;IAAA3E,cAAA,GAAAG,CAAA;IAExG,OAAO;MACL2C,KAAK,EAAEsD,aAAa;MACpBe,IAAI,EAAEd,YAAY;MAClBJ,OAAO,EAAEM,eAAe;MACxBa,OAAO,EAAEX,eAAe;MACxBN,SAAS,EAAEK,iBAAiB;MAC5Ba,gBAAgB,EAAEH,kBAAkB;MACpC3E,WAAW,EAAEoE,iBAAiB;MAC9BlE,UAAU,EAAEoE,SAAS;MACrBlE,aAAa,EAAEmE,YAAY;MAC3BQ,aAAa,EAAEP,YAAY;MAC3BQ,mBAAmB,EAAEP;IACvB,CAAC;EACH;EAEA,OAAO/E,iBAAiBA,CAACP,WAAW,EAAEE,aAAa,EAAEH,YAAY,EAAE+F,qBAAqB,EAAE;IAAA;IAAAxH,cAAA,GAAAS,CAAA;IACxF,MAAMgH,cAAc;IAAA;IAAA,CAAAzH,cAAA,GAAAG,CAAA,QAAGuB,WAAW,CAACoB,KAAK,GAAG,CAAC;IAAA;IAAA,CAAA9C,cAAA,GAAAiF,CAAA,WAAIrD,aAAa,CAACkB,KAAK,GAAGpB,WAAW,CAACoB,KAAK,GAAG,GAAG;IAAA;IAAA,CAAA9C,cAAA,GAAAiF,CAAA,WAAI,CAAC;IAClG,MAAMyC,WAAW;IAAA;IAAA,CAAA1H,cAAA,GAAAG,CAAA,QAAGsB,YAAY,CAACqB,KAAK,GAAG,CAAC;IAAA;IAAA,CAAA9C,cAAA,GAAAiF,CAAA,WAAIxD,YAAY,CAAC0F,IAAI,GAAG1F,YAAY,CAACqB,KAAK,GAAG,GAAG;IAAA;IAAA,CAAA9C,cAAA,GAAAiF,CAAA,WAAI,CAAC;IAAC;IAAAjF,cAAA,GAAAG,CAAA;IAEhG,OAAO;MACLwH,eAAe,EAAEC,IAAI,CAACC,KAAK,CAACJ,cAAc,GAAG,GAAG,CAAC,GAAG,GAAG;MACvDK,YAAY,EAAEF,IAAI,CAACC,KAAK,CAACH,WAAW,GAAG,GAAG,CAAC,GAAG,GAAG;MACjDK,sBAAsB,EAAEnG,aAAa,CAACkB,KAAK,GAAG,CAAC;MAAA;MAAA,CAAA9C,cAAA,GAAAiF,CAAA,WAAG2C,IAAI,CAACC,KAAK,CAAEjG,aAAa,CAACW,WAAW,GAAGX,aAAa,CAACkB,KAAK,GAAI,GAAG,CAAC,GAAG,GAAG;MAAA;MAAA,CAAA9C,cAAA,GAAAiF,CAAA,WAAG,CAAC;MAC/H+C,qBAAqB,EAAEvG,YAAY,CAACqB,KAAK,GAAG,CAAC;MAAA;MAAA,CAAA9C,cAAA,GAAAiF,CAAA,WAAG2C,IAAI,CAACC,KAAK,CAAEpG,YAAY,CAACc,WAAW,GAAGd,YAAY,CAACqB,KAAK,GAAI,GAAG,CAAC,GAAG,GAAG;MAAA;MAAA,CAAA9C,cAAA,GAAAiF,CAAA,WAAG,CAAC;MAC3HgD,uBAAuB,EAAET,qBAAqB,CAACS,uBAAuB;MACtEC,uBAAuB,EAAEV,qBAAqB,CAACU,uBAAuB;MACtEC,2BAA2B,EAAEX,qBAAqB,CAACW;IACrD,CAAC;EACH;EAEA,OAAO7E,wBAAwBA,CAAClB,QAAQ,EAAEe,IAAI,EAAE;IAAA;IAAAnD,cAAA,GAAAS,CAAA;IAC9C;IACA;IACA,MAAM2H,WAAW;IAAA;IAAA,CAAApI,cAAA,GAAAG,CAAA,QAAG,CAAC,CAAC;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEvBiC,QAAQ,CAACiG,OAAO,CAAC9D,OAAO,IAAI;MAAA;MAAAvE,cAAA,GAAAS,CAAA;MAC1B,MAAM6H,IAAI;MAAA;MAAA,CAAAtI,cAAA,GAAAG,CAAA,QAAG,IAAI0D,IAAI,CAACU,OAAO,CAACgE,YAAY,CAAC;MAC3C,MAAMC,GAAG;MAAA;MAAA,CAAAxI,cAAA,GAAAG,CAAA,QAAGgD,IAAI,KAAK,SAAS;MAAA;MAAA,CAAAnD,cAAA,GAAAiF,CAAA,WAC1B,GAAGqD,IAAI,CAACG,WAAW,CAAC,CAAC,IAAIC,MAAM,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MAAA;MAAA,CAAA5I,cAAA,GAAAiF,CAAA,WACvE,GAAGqD,IAAI,CAACG,WAAW,CAAC,CAAC,KAAKb,IAAI,CAACiB,IAAI,CAACP,IAAI,CAACvE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;MAAC;MAAA/D,cAAA,GAAAG,CAAA;MAE9D,IAAI,CAACiI,WAAW,CAACI,GAAG,CAAC,EAAE;QAAA;QAAAxI,cAAA,GAAAiF,CAAA;QAAAjF,cAAA,GAAAG,CAAA;QACrBiI,WAAW,CAACI,GAAG,CAAC,GAAG,CAAC;MACtB,CAAC;MAAA;MAAA;QAAAxI,cAAA,GAAAiF,CAAA;MAAA;MAAAjF,cAAA,GAAAG,CAAA;MACDiI,WAAW,CAACI,GAAG,CAAC,IAAIzC,UAAU;MAAC;MAAA,CAAA/F,cAAA,GAAAiF,CAAA,WAAAV,OAAO,CAACqC,MAAM;MAAA;MAAA,CAAA5G,cAAA,GAAAiF,CAAA,WAAI,CAAC,EAAC;IACrD,CAAC,CAAC;IAAC;IAAAjF,cAAA,GAAAG,CAAA;IAEH,OAAO;MACL2I,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACZ,WAAW,CAAC;MAChCa,IAAI,EAAEF,MAAM,CAACG,MAAM,CAACd,WAAW;IACjC,CAAC;EACH;EAEA,OAAO3E,yBAAyBA,CAACrB,QAAQ,EAAE;IAAA;IAAApC,cAAA,GAAAS,CAAA;IACzC,MAAM0I,YAAY;IAAA;IAAA,CAAAnJ,cAAA,GAAAG,CAAA,QAAG;MACnBgH,IAAI,EAAE,CAAC;MACPlB,OAAO,EAAE,CAAC;MACVmB,OAAO,EAAE,CAAC;MACVjB,SAAS,EAAE;IACb,CAAC;IAED,MAAMtF,KAAK;IAAA;IAAA,CAAAb,cAAA,GAAAG,CAAA,QAAG,IAAI0D,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAAC;IAAAlE,cAAA,GAAAG,CAAA;IAErDiC,QAAQ,CAACiG,OAAO,CAAC9D,OAAO,IAAI;MAAA;MAAAvE,cAAA,GAAAS,CAAA;MAAAT,cAAA,GAAAG,CAAA;MAC1B,IAAIoE,OAAO,CAACO,MAAM,KAAK,MAAM,EAAE;QAAA;QAAA9E,cAAA,GAAAiF,CAAA;QAAAjF,cAAA,GAAAG,CAAA;QAC7BgJ,YAAY,CAAChC,IAAI,EAAE;MACrB,CAAC,MAAM;QAAA;QAAAnH,cAAA,GAAAiF,CAAA;QAAAjF,cAAA,GAAAG,CAAA;QAAA,IAAIoE,OAAO,CAACO,MAAM,KAAK,SAAS,EAAE;UAAA;UAAA9E,cAAA,GAAAiF,CAAA;UAAAjF,cAAA,GAAAG,CAAA;UACvC,IAAIoE,OAAO,CAACmC,QAAQ,GAAG7F,KAAK,EAAE;YAAA;YAAAb,cAAA,GAAAiF,CAAA;YAAAjF,cAAA,GAAAG,CAAA;YAC5BgJ,YAAY,CAAC/B,OAAO,EAAE;UACxB,CAAC,MAAM;YAAA;YAAApH,cAAA,GAAAiF,CAAA;YAAAjF,cAAA,GAAAG,CAAA;YACLgJ,YAAY,CAAClD,OAAO,EAAE;UACxB;QACF,CAAC,MAAM;UAAA;UAAAjG,cAAA,GAAAiF,CAAA;UAAAjF,cAAA,GAAAG,CAAA;UAAA,IAAIoE,OAAO,CAACO,MAAM,KAAK,WAAW,EAAE;YAAA;YAAA9E,cAAA,GAAAiF,CAAA;YAAAjF,cAAA,GAAAG,CAAA;YACzCgJ,YAAY,CAAChD,SAAS,EAAE;UAC1B,CAAC;UAAA;UAAA;YAAAnG,cAAA,GAAAiF,CAAA;UAAA;QAAD;MAAA;IACF,CAAC,CAAC;IAAC;IAAAjF,cAAA,GAAAG,CAAA;IAEH,OAAO;MACL2I,MAAM,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,CAAC;MACzDG,IAAI,EAAE,CAACE,YAAY,CAAChC,IAAI,EAAEgC,YAAY,CAAClD,OAAO,EAAEkD,YAAY,CAAC/B,OAAO,EAAE+B,YAAY,CAAChD,SAAS;IAC9F,CAAC;EACH;AACF;AAAC;AAAAnG,cAAA,GAAAG,CAAA;AAEDiJ,MAAM,CAACC,OAAO,GAAG;EAAE/I;AAAiB,CAAC","ignoreList":[]}