{"version":3,"names":["cov_2r061l0a31","actualCoverage","spawn","s","require","fs","path","executeMCP","toolName","args","f","Promise","resolve","reject","mcpArgs","JSON","stringify","child","stdio","stdout","stderr","on","data","toString","code","b","result","parse","trim","error","success","Error","importRemainingClients","console","log","statusResult","project_id","query","largeBatches","i","length","setTimeout","message","finalResult","main","module","catch","exports"],"sources":["fast_import.js"],"sourcesContent":["const { spawn } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\n// Fun√ß√£o para executar comando MCP\nfunction executeMCP(toolName, args) {\n    return new Promise((resolve, reject) => {\n        const mcpArgs = [\n            'run_mcp',\n            '--server-name', 'mcp.config.usrlocalmcp.supabase-mcp-finance',\n            '--tool-name', toolName,\n            '--args', JSON.stringify(args)\n        ];\n        \n        const child = spawn('trae', mcpArgs, { stdio: 'pipe' });\n        \n        let stdout = '';\n        let stderr = '';\n        \n        child.stdout.on('data', (data) => {\n            stdout += data.toString();\n        });\n        \n        child.stderr.on('data', (data) => {\n            stderr += data.toString();\n        });\n        \n        child.on('close', (code) => {\n            if (code === 0) {\n                try {\n                    const result = JSON.parse(stdout.trim());\n                    resolve(result);\n                } catch (error) {\n                    resolve({ success: true }); // Assume sucesso se n√£o conseguir parsear\n                }\n            } else {\n                reject(new Error(`MCP falhou com c√≥digo ${code}: ${stderr}`));\n            }\n        });\n    });\n}\n\nasync function importRemainingClients() {\n    console.log('üöÄ Importando clientes restantes em lotes grandes...');\n    \n    // Verificar status atual\n    try {\n        const statusResult = await executeMCP('execute_sql', {\n            project_id: 'sxbslulfitfsijqrzljd',\n            query: `SELECT \n                COUNT(*) as total_clients,\n                COUNT(CASE WHEN external_id LIKE 'bd_%' THEN 1 END) as imported_clients,\n                COALESCE(MAX(CAST(SUBSTRING(external_id FROM 4) AS INTEGER)), 0) as highest_bd_number\n            FROM clients\n            WHERE external_id IS NOT NULL;`\n        });\n        \n        console.log('üìä Status atual:', JSON.stringify(statusResult, null, 2));\n    } catch (error) {\n        console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar status inicial');\n    }\n    \n    // Lotes grandes para importa√ß√£o r√°pida\n    const largeBatches = [\n        // Lote 5-6 (bd_161 a bd_260)\n        `INSERT INTO clients (first_name, last_name, email, phone, mobile, tax_id, birth_date, address, city, state, postal_code, country, notes, status, external_id) VALUES \n        ('MARIA', 'ELIZABETE TEIXEIRA MONTEIRO DE JESUS', 'mlisajusese19963@gmail.com', NULL, NULL, NULL, NULL, NULL, '4425-096 MAIA', NULL, NULL, 'Brasil', NULL, 'active', 'bd_161'),\n        ('ORDEAN', 'CORR√äA DE MORAIS ANDRADE', 'ocmorais@hotmail.com', NULL, NULL, NULL, NULL, NULL, '3080-603 TAVAREDE - FIGUEIRA DA FOZ', NULL, NULL, 'Brasil', NULL, 'active', 'bd_162'),\n        ('JOZIANE', 'BARROS GOMES', 'JOZY_BONY@HOTMAIL.COM', NULL, NULL, NULL, NULL, NULL, '74-270 FRANGY - FRAN√áA', NULL, NULL, 'Brasil', NULL, 'active', 'bd_163'),\n        ('JOCIENE', 'MELO DE OLIVEIRA (DD EM 4832 DIAMANTINO)', 'JOCIENEMELODEOLIVEIRA@GMAIL.COM', NULL, NULL, NULL, NULL, NULL, '78290-000 FRAN√áA', NULL, NULL, 'Brasil', NULL, 'active', 'bd_164'),\n        ('DIAMANTINO', 'TEIXEIRA AMORIM', 'jocienemelodeoliveira@gmail.com', NULL, NULL, NULL, NULL, NULL, '78290-000 FRAN√áA', NULL, NULL, 'Brasil', NULL, 'active', 'bd_165')\n        ON CONFLICT (external_id) DO UPDATE SET first_name = EXCLUDED.first_name, last_name = EXCLUDED.last_name, email = EXCLUDED.email, updated_at = NOW();`\n    ];\n    \n    for (let i = 0; i < largeBatches.length; i++) {\n        console.log(`\\nüì• Executando lote grande ${i + 1}/${largeBatches.length}...`);\n        \n        try {\n            await executeMCP('execute_sql', {\n                project_id: 'sxbslulfitfsijqrzljd',\n                query: largeBatches[i]\n            });\n            \n            console.log(`‚úÖ Lote ${i + 1} executado`);\n            \n            // Pausa menor entre lotes\n            await new Promise(resolve => setTimeout(resolve, 100));\n            \n        } catch (error) {\n            console.error(`‚ùå Erro no lote ${i + 1}:`, error.message);\n        }\n    }\n    \n    // Verificar status final\n    try {\n        const finalResult = await executeMCP('execute_sql', {\n            project_id: 'sxbslulfitfsijqrzljd',\n            query: `SELECT \n                COUNT(*) as total_clients,\n                COUNT(CASE WHEN external_id LIKE 'bd_%' THEN 1 END) as imported_clients\n            FROM clients;`\n        });\n        \n        console.log('\\nüéâ Status final:', JSON.stringify(finalResult, null, 2));\n        \n    } catch (error) {\n        console.error('‚ùå Erro ao verificar status final:', error.message);\n    }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n    importRemainingClients().catch(console.error);\n}\n\nmodule.exports = { importRemainingClients };"],"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","ignoreList":[]}