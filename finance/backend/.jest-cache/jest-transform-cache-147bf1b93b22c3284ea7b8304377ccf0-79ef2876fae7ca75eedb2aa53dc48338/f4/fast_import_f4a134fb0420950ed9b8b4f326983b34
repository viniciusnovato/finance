d507f9a6b8c5e93c0aea2f31c3dff533
/* istanbul ignore next */
function cov_2r061l0a31() {
  var path = "/Users/insitutoareluna/Documents/repFinance/finance/backend/src/scripts/fast_import.js";
  var hash = "95cb936c4c6dc1535cdfe05af097675ad7de573a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/insitutoareluna/Documents/repFinance/finance/backend/src/scripts/fast_import.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 18
        },
        end: {
          line: 1,
          column: 42
        }
      },
      "1": {
        start: {
          line: 2,
          column: 11
        },
        end: {
          line: 2,
          column: 24
        }
      },
      "2": {
        start: {
          line: 3,
          column: 13
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "3": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 40,
          column: 7
        }
      },
      "4": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 13,
          column: 9
        }
      },
      "5": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 63
        }
      },
      "6": {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "7": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 23
        }
      },
      "8": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 22,
          column: 11
        }
      },
      "9": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 38
        }
      },
      "10": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "11": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "12": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 39,
          column: 11
        }
      },
      "13": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 38,
          column: 13
        }
      },
      "14": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 35,
          column: 17
        }
      },
      "15": {
        start: {
          line: 31,
          column: 35
        },
        end: {
          line: 31,
          column: 60
        }
      },
      "16": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 36
        }
      },
      "17": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 47
        }
      },
      "18": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 78
        }
      },
      "19": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 72
        }
      },
      "20": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "21": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 56,
          column: 10
        }
      },
      "22": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 79
        }
      },
      "23": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 68
        }
      },
      "24": {
        start: {
          line: 64,
          column: 25
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "25": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "26": {
        start: {
          line: 75,
          column: 17
        },
        end: {
          line: 75,
          column: 18
        }
      },
      "27": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 76,
          column: 86
        }
      },
      "28": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "29": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 82,
          column: 15
        }
      },
      "30": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 53
        }
      },
      "31": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 67
        }
      },
      "32": {
        start: {
          line: 87,
          column: 41
        },
        end: {
          line: 87,
          column: 65
        }
      },
      "33": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 69
        }
      },
      "34": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "35": {
        start: {
          line: 96,
          column: 28
        },
        end: {
          line: 102,
          column: 10
        }
      },
      "36": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 80
        }
      },
      "37": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 74
        }
      },
      "38": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 114,
          column: 1
        }
      },
      "39": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 113,
          column: 50
        }
      },
      "40": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 116,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "executeMCP",
        decl: {
          start: {
            line: 6,
            column: 9
          },
          end: {
            line: 6,
            column: 19
          }
        },
        loc: {
          start: {
            line: 6,
            column: 36
          },
          end: {
            line: 41,
            column: 1
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 23
          },
          end: {
            line: 7,
            column: 24
          }
        },
        loc: {
          start: {
            line: 7,
            column: 44
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 32
          },
          end: {
            line: 20,
            column: 33
          }
        },
        loc: {
          start: {
            line: 20,
            column: 42
          },
          end: {
            line: 22,
            column: 9
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 32
          },
          end: {
            line: 24,
            column: 33
          }
        },
        loc: {
          start: {
            line: 24,
            column: 42
          },
          end: {
            line: 26,
            column: 9
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 28,
            column: 26
          },
          end: {
            line: 28,
            column: 27
          }
        },
        loc: {
          start: {
            line: 28,
            column: 36
          },
          end: {
            line: 39,
            column: 9
          }
        },
        line: 28
      },
      "5": {
        name: "importRemainingClients",
        decl: {
          start: {
            line: 43,
            column: 15
          },
          end: {
            line: 43,
            column: 37
          }
        },
        loc: {
          start: {
            line: 43,
            column: 40
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 43
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 87,
            column: 30
          },
          end: {
            line: 87,
            column: 31
          }
        },
        loc: {
          start: {
            line: 87,
            column: 41
          },
          end: {
            line: 87,
            column: 65
          }
        },
        line: 87
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 38,
            column: 13
          }
        }, {
          start: {
            line: 36,
            column: 19
          },
          end: {
            line: 38,
            column: 13
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 112,
            column: 0
          },
          end: {
            line: 114,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 0
          },
          end: {
            line: 114,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "95cb936c4c6dc1535cdfe05af097675ad7de573a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2r061l0a31 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2r061l0a31();
const {
  spawn
} =
/* istanbul ignore next */
(cov_2r061l0a31().s[0]++, require('child_process'));
const fs =
/* istanbul ignore next */
(cov_2r061l0a31().s[1]++, require('fs'));
const path =
/* istanbul ignore next */
(cov_2r061l0a31().s[2]++, require('path'));

// Função para executar comando MCP
function executeMCP(toolName, args) {
  /* istanbul ignore next */
  cov_2r061l0a31().f[0]++;
  cov_2r061l0a31().s[3]++;
  return new Promise((resolve, reject) => {
    /* istanbul ignore next */
    cov_2r061l0a31().f[1]++;
    const mcpArgs =
    /* istanbul ignore next */
    (cov_2r061l0a31().s[4]++, ['run_mcp', '--server-name', 'mcp.config.usrlocalmcp.supabase-mcp-finance', '--tool-name', toolName, '--args', JSON.stringify(args)]);
    const child =
    /* istanbul ignore next */
    (cov_2r061l0a31().s[5]++, spawn('trae', mcpArgs, {
      stdio: 'pipe'
    }));
    let stdout =
    /* istanbul ignore next */
    (cov_2r061l0a31().s[6]++, '');
    let stderr =
    /* istanbul ignore next */
    (cov_2r061l0a31().s[7]++, '');
    /* istanbul ignore next */
    cov_2r061l0a31().s[8]++;
    child.stdout.on('data', data => {
      /* istanbul ignore next */
      cov_2r061l0a31().f[2]++;
      cov_2r061l0a31().s[9]++;
      stdout += data.toString();
    });
    /* istanbul ignore next */
    cov_2r061l0a31().s[10]++;
    child.stderr.on('data', data => {
      /* istanbul ignore next */
      cov_2r061l0a31().f[3]++;
      cov_2r061l0a31().s[11]++;
      stderr += data.toString();
    });
    /* istanbul ignore next */
    cov_2r061l0a31().s[12]++;
    child.on('close', code => {
      /* istanbul ignore next */
      cov_2r061l0a31().f[4]++;
      cov_2r061l0a31().s[13]++;
      if (code === 0) {
        /* istanbul ignore next */
        cov_2r061l0a31().b[0][0]++;
        cov_2r061l0a31().s[14]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_2r061l0a31().s[15]++, JSON.parse(stdout.trim()));
          /* istanbul ignore next */
          cov_2r061l0a31().s[16]++;
          resolve(result);
        } catch (error) {
          /* istanbul ignore next */
          cov_2r061l0a31().s[17]++;
          resolve({
            success: true
          }); // Assume sucesso se não conseguir parsear
        }
      } else {
        /* istanbul ignore next */
        cov_2r061l0a31().b[0][1]++;
        cov_2r061l0a31().s[18]++;
        reject(new Error(`MCP falhou com código ${code}: ${stderr}`));
      }
    });
  });
}
async function importRemainingClients() {
  /* istanbul ignore next */
  cov_2r061l0a31().f[5]++;
  cov_2r061l0a31().s[19]++;
  console.log('🚀 Importando clientes restantes em lotes grandes...');

  // Verificar status atual
  /* istanbul ignore next */
  cov_2r061l0a31().s[20]++;
  try {
    const statusResult =
    /* istanbul ignore next */
    (cov_2r061l0a31().s[21]++, await executeMCP('execute_sql', {
      project_id: 'sxbslulfitfsijqrzljd',
      query: `SELECT 
                COUNT(*) as total_clients,
                COUNT(CASE WHEN external_id LIKE 'bd_%' THEN 1 END) as imported_clients,
                COALESCE(MAX(CAST(SUBSTRING(external_id FROM 4) AS INTEGER)), 0) as highest_bd_number
            FROM clients
            WHERE external_id IS NOT NULL;`
    }));
    /* istanbul ignore next */
    cov_2r061l0a31().s[22]++;
    console.log('📊 Status atual:', JSON.stringify(statusResult, null, 2));
  } catch (error) {
    /* istanbul ignore next */
    cov_2r061l0a31().s[23]++;
    console.log('⚠️ Não foi possível verificar status inicial');
  }

  // Lotes grandes para importação rápida
  const largeBatches =
  /* istanbul ignore next */
  (cov_2r061l0a31().s[24]++, [
  // Lote 5-6 (bd_161 a bd_260)
  `INSERT INTO clients (first_name, last_name, email, phone, mobile, tax_id, birth_date, address, city, state, postal_code, country, notes, status, external_id) VALUES 
        ('MARIA', 'ELIZABETE TEIXEIRA MONTEIRO DE JESUS', 'mlisajusese19963@gmail.com', NULL, NULL, NULL, NULL, NULL, '4425-096 MAIA', NULL, NULL, 'Brasil', NULL, 'active', 'bd_161'),
        ('ORDEAN', 'CORRÊA DE MORAIS ANDRADE', 'ocmorais@hotmail.com', NULL, NULL, NULL, NULL, NULL, '3080-603 TAVAREDE - FIGUEIRA DA FOZ', NULL, NULL, 'Brasil', NULL, 'active', 'bd_162'),
        ('JOZIANE', 'BARROS GOMES', 'JOZY_BONY@HOTMAIL.COM', NULL, NULL, NULL, NULL, NULL, '74-270 FRANGY - FRANÇA', NULL, NULL, 'Brasil', NULL, 'active', 'bd_163'),
        ('JOCIENE', 'MELO DE OLIVEIRA (DD EM 4832 DIAMANTINO)', 'JOCIENEMELODEOLIVEIRA@GMAIL.COM', NULL, NULL, NULL, NULL, NULL, '78290-000 FRANÇA', NULL, NULL, 'Brasil', NULL, 'active', 'bd_164'),
        ('DIAMANTINO', 'TEIXEIRA AMORIM', 'jocienemelodeoliveira@gmail.com', NULL, NULL, NULL, NULL, NULL, '78290-000 FRANÇA', NULL, NULL, 'Brasil', NULL, 'active', 'bd_165')
        ON CONFLICT (external_id) DO UPDATE SET first_name = EXCLUDED.first_name, last_name = EXCLUDED.last_name, email = EXCLUDED.email, updated_at = NOW();`]);
  /* istanbul ignore next */
  cov_2r061l0a31().s[25]++;
  for (let i =
  /* istanbul ignore next */
  (cov_2r061l0a31().s[26]++, 0); i < largeBatches.length; i++) {
    /* istanbul ignore next */
    cov_2r061l0a31().s[27]++;
    console.log(`\n📥 Executando lote grande ${i + 1}/${largeBatches.length}...`);
    /* istanbul ignore next */
    cov_2r061l0a31().s[28]++;
    try {
      /* istanbul ignore next */
      cov_2r061l0a31().s[29]++;
      await executeMCP('execute_sql', {
        project_id: 'sxbslulfitfsijqrzljd',
        query: largeBatches[i]
      });
      /* istanbul ignore next */
      cov_2r061l0a31().s[30]++;
      console.log(`✅ Lote ${i + 1} executado`);

      // Pausa menor entre lotes
      /* istanbul ignore next */
      cov_2r061l0a31().s[31]++;
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_2r061l0a31().f[6]++;
        cov_2r061l0a31().s[32]++;
        return setTimeout(resolve, 100);
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2r061l0a31().s[33]++;
      console.error(`❌ Erro no lote ${i + 1}:`, error.message);
    }
  }

  // Verificar status final
  /* istanbul ignore next */
  cov_2r061l0a31().s[34]++;
  try {
    const finalResult =
    /* istanbul ignore next */
    (cov_2r061l0a31().s[35]++, await executeMCP('execute_sql', {
      project_id: 'sxbslulfitfsijqrzljd',
      query: `SELECT 
                COUNT(*) as total_clients,
                COUNT(CASE WHEN external_id LIKE 'bd_%' THEN 1 END) as imported_clients
            FROM clients;`
    }));
    /* istanbul ignore next */
    cov_2r061l0a31().s[36]++;
    console.log('\n🎉 Status final:', JSON.stringify(finalResult, null, 2));
  } catch (error) {
    /* istanbul ignore next */
    cov_2r061l0a31().s[37]++;
    console.error('❌ Erro ao verificar status final:', error.message);
  }
}

// Executar se chamado diretamente
/* istanbul ignore next */
cov_2r061l0a31().s[38]++;
if (require.main === module) {
  /* istanbul ignore next */
  cov_2r061l0a31().b[1][0]++;
  cov_2r061l0a31().s[39]++;
  importRemainingClients().catch(console.error);
} else
/* istanbul ignore next */
{
  cov_2r061l0a31().b[1][1]++;
}
cov_2r061l0a31().s[40]++;
module.exports = {
  importRemainingClients
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,