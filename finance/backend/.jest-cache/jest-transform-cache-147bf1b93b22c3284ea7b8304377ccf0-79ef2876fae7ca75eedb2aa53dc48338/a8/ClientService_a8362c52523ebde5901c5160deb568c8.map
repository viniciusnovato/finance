{"version":3,"names":["cov_2gvxn79w1a","actualCoverage","ClientRepository","s","require","validateClientData","validateUpdateClientData","ClientService","getClients","options","f","page","limit","search","status","sortBy","sortOrder","b","Error","validSortFields","includes","validSortOrders","trim","getClientById","id","createClient","clientData","validation","isValid","errors","join","tax_id","existingClient","getClientByTaxId","email","getClientByEmail","processedData","_processClientData","updateClient","updateData","clientWithSameTaxId","clientWithSameEmail","deleteClient","hasContracts","clientHasContracts","getClientContracts","clientId","client","getClientPayments","searchClients","query","length","getClientStats","isUpdate","name","toLowerCase","replace","phone","Object","keys","forEach","key","undefined","validateClientDeletion","hasPayments","clientHasPayments","canDelete","reasons","module","exports"],"sources":["ClientService.js"],"sourcesContent":["const { ClientRepository } = require('../repositories/ClientRepository');\nconst { validateClientData, validateUpdateClientData } = require('../validators/clientValidator');\n\nclass ClientService {\n  /**\n   * Obter lista de clientes com paginação e filtros\n   * @param {Object} options - Opções de busca\n   * @returns {Object} Lista paginada de clientes\n   */\n  static async getClients(options) {\n    const { page, limit, search, status, sortBy, sortOrder } = options;\n    \n    // Validar parâmetros\n    if (page < 1 || limit < 1 || limit > 100) {\n      throw new Error('Parâmetros de paginação inválidos');\n    }\n\n    const validSortFields = ['created_at', 'name', 'email', 'status'];\n    if (!validSortFields.includes(sortBy)) {\n      throw new Error('Campo de ordenação inválido');\n    }\n\n    const validSortOrders = ['asc', 'desc'];\n    if (!validSortOrders.includes(sortOrder)) {\n      throw new Error('Ordem de classificação inválida');\n    }\n\n    return await ClientRepository.getClients({\n      page,\n      limit,\n      search: search.trim(),\n      status,\n      sortBy,\n      sortOrder\n    });\n  }\n\n  /**\n   * Obter cliente por ID\n   * @param {string} id - ID do cliente\n   * @returns {Object|null} Dados do cliente\n   */\n  static async getClientById(id) {\n    if (!id) {\n      throw new Error('ID do cliente é obrigatório');\n    }\n\n    return await ClientRepository.getClientById(id);\n  }\n\n  /**\n   * Criar novo cliente\n   * @param {Object} clientData - Dados do cliente\n   * @returns {Object} Cliente criado\n   */\n  static async createClient(clientData) {\n    // Validar dados do cliente\n    const validation = validateClientData(clientData);\n    if (!validation.isValid) {\n      throw new Error(`Dados inválidos: ${validation.errors.join(', ')}`);\n    }\n\n    // Verificar se já existe cliente com mesmo CPF/CNPJ\n    if (clientData.tax_id) {\n      const existingClient = await ClientRepository.getClientByTaxId(clientData.tax_id);\n      if (existingClient) {\n        throw new Error('Já existe um cliente com este CPF/CNPJ');\n      }\n    }\n\n    // Verificar se já existe cliente com mesmo email\n    if (clientData.email) {\n      const existingClient = await ClientRepository.getClientByEmail(clientData.email);\n      if (existingClient) {\n        throw new Error('Já existe um cliente com este email');\n      }\n    }\n\n    // Preparar dados para inserção\n    const processedData = this._processClientData(clientData);\n    \n    return await ClientRepository.createClient(processedData);\n  }\n\n  /**\n   * Atualizar cliente\n   * @param {string} id - ID do cliente\n   * @param {Object} updateData - Dados para atualização\n   * @returns {Object|null} Cliente atualizado\n   */\n  static async updateClient(id, updateData) {\n    if (!id) {\n      throw new Error('ID do cliente é obrigatório');\n    }\n\n    // Validar dados de atualização\n    const validation = validateUpdateClientData(updateData);\n    if (!validation.isValid) {\n      throw new Error(`Dados inválidos: ${validation.errors.join(', ')}`);\n    }\n\n    // Verificar se o cliente existe\n    const existingClient = await ClientRepository.getClientById(id);\n    if (!existingClient) {\n      return null;\n    }\n\n    // Verificar conflitos de CPF/CNPJ\n    if (updateData.tax_id && updateData.tax_id !== existingClient.tax_id) {\n      const clientWithSameTaxId = await ClientRepository.getClientByTaxId(updateData.tax_id);\n      if (clientWithSameTaxId && clientWithSameTaxId.id !== id) {\n        throw new Error('Já existe um cliente com este CPF/CNPJ');\n      }\n    }\n\n    // Verificar conflitos de email\n    if (updateData.email && updateData.email !== existingClient.email) {\n      const clientWithSameEmail = await ClientRepository.getClientByEmail(updateData.email);\n      if (clientWithSameEmail && clientWithSameEmail.id !== id) {\n        throw new Error('Já existe um cliente com este email');\n      }\n    }\n\n    // Preparar dados para atualização\n    const processedData = this._processClientData(updateData, true);\n    \n    return await ClientRepository.updateClient(id, processedData);\n  }\n\n  /**\n   * Deletar cliente\n   * @param {string} id - ID do cliente\n   * @returns {boolean} Sucesso da operação\n   */\n  static async deleteClient(id) {\n    if (!id) {\n      throw new Error('ID do cliente é obrigatório');\n    }\n\n    // Verificar se o cliente existe\n    const existingClient = await ClientRepository.getClientById(id);\n    if (!existingClient) {\n      return false;\n    }\n\n    // Verificar se o cliente possui contratos\n    const hasContracts = await ClientRepository.clientHasContracts(id);\n    if (hasContracts) {\n      throw new Error('Não é possível deletar cliente que possui contratos');\n    }\n\n    return await ClientRepository.deleteClient(id);\n  }\n\n  /**\n   * Obter contratos do cliente\n   * @param {string} clientId - ID do cliente\n   * @param {Object} options - Opções de busca\n   * @returns {Object} Lista paginada de contratos\n   */\n  static async getClientContracts(clientId, options) {\n    if (!clientId) {\n      throw new Error('ID do cliente é obrigatório');\n    }\n\n    const { page, limit, status } = options;\n    \n    // Validar parâmetros\n    if (page < 1 || limit < 1 || limit > 100) {\n      throw new Error('Parâmetros de paginação inválidos');\n    }\n\n    // Verificar se o cliente existe\n    const client = await ClientRepository.getClientById(clientId);\n    if (!client) {\n      throw new Error('Cliente não encontrado');\n    }\n\n    return await ClientRepository.getClientContracts(clientId, {\n      page,\n      limit,\n      status\n    });\n  }\n\n  /**\n   * Obter pagamentos do cliente\n   * @param {string} clientId - ID do cliente\n   * @param {Object} options - Opções de busca\n   * @returns {Object} Lista paginada de pagamentos\n   */\n  static async getClientPayments(clientId, options) {\n    if (!clientId) {\n      throw new Error('ID do cliente é obrigatório');\n    }\n\n    const { page, limit, status } = options;\n    \n    // Validar parâmetros\n    if (page < 1 || limit < 1 || limit > 100) {\n      throw new Error('Parâmetros de paginação inválidos');\n    }\n\n    // Verificar se o cliente existe\n    const client = await ClientRepository.getClientById(clientId);\n    if (!client) {\n      throw new Error('Cliente não encontrado');\n    }\n\n    return await ClientRepository.getClientPayments(clientId, {\n      page,\n      limit,\n      status\n    });\n  }\n\n  /**\n   * Buscar clientes por termo\n   * @param {string} query - Termo de busca\n   * @param {number} limit - Limite de resultados\n   * @returns {Array} Lista de clientes\n   */\n  static async searchClients(query, limit = 10) {\n    if (!query || query.length < 2) {\n      throw new Error('Termo de busca deve ter pelo menos 2 caracteres');\n    }\n\n    if (limit < 1 || limit > 50) {\n      throw new Error('Limite deve estar entre 1 e 50');\n    }\n\n    return await ClientRepository.searchClients(query, limit);\n  }\n\n  /**\n   * Obter estatísticas do cliente\n   * @param {string} clientId - ID do cliente\n   * @returns {Object} Estatísticas do cliente\n   */\n  static async getClientStats(clientId) {\n    if (!clientId) {\n      throw new Error('ID do cliente é obrigatório');\n    }\n\n    // Verificar se o cliente existe\n    const client = await ClientRepository.getClientById(clientId);\n    if (!client) {\n      throw new Error('Cliente não encontrado');\n    }\n\n    return await ClientRepository.getClientStats(clientId);\n  }\n\n  // Métodos privados auxiliares\n  \n  /**\n   * Processar dados do cliente antes de salvar\n   * @param {Object} clientData - Dados do cliente\n   * @param {boolean} isUpdate - Se é uma atualização\n   * @returns {Object} Dados processados\n   */\n  static _processClientData(clientData, isUpdate = false) {\n    const processedData = { ...clientData };\n\n    // Normalizar campos de texto\n    if (processedData.name) {\n      processedData.name = processedData.name.trim();\n    }\n    \n    if (processedData.email) {\n      processedData.email = processedData.email.toLowerCase().trim();\n    }\n\n    if (processedData.tax_id) {\n      processedData.tax_id = processedData.tax_id.replace(/\\D/g, ''); // Remove caracteres não numéricos\n    }\n\n    if (processedData.phone) {\n      processedData.phone = processedData.phone.replace(/\\D/g, ''); // Remove caracteres não numéricos\n    }\n\n    // Definir status padrão para novos clientes\n    if (!isUpdate && !processedData.status) {\n      processedData.status = 'active';\n    }\n\n    // Remover campos undefined ou null\n    Object.keys(processedData).forEach(key => {\n      if (processedData[key] === undefined || processedData[key] === null) {\n        delete processedData[key];\n      }\n    });\n\n    return processedData;\n  }\n\n  /**\n   * Validar se o cliente pode ser deletado\n   * @param {string} clientId - ID do cliente\n   * @returns {Object} Resultado da validação\n   */\n  static async validateClientDeletion(clientId) {\n    const hasContracts = await ClientRepository.clientHasContracts(clientId);\n    const hasPayments = await ClientRepository.clientHasPayments(clientId);\n\n    return {\n      canDelete: !hasContracts && !hasPayments,\n      reasons: [\n        ...(hasContracts ? ['Cliente possui contratos'] : []),\n        ...(hasPayments ? ['Cliente possui pagamentos'] : [])\n      ]\n    };\n  }\n}\n\nmodule.exports = { ClientService };"],"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","ignoreList":[]}