{"version":3,"names":["_getJestObj","mock","jest","require","ClientServiceRefactored","ValidationHelper","ErrorHandler","createMockRepository","findClientsWithPagination","fn","findClientById","findClientByEmail","findClientByTaxId","createClient","updateClient","deleteClient","searchClients","getClientContracts","getClientPayments","getClientStats","clientHasContracts","clientHasPayments","describe","service","mockRepository","beforeEach","clearAllMocks","isValidEmail","mockReturnValue","isValidPhone","isValidCPF","isValidCNPJ","isValidString","sanitizeString","mockImplementation","str","trim","normalizePhone","phone","replace","normalizeTaxId","taxId","validateRequiredFields","test","expect","toThrow","clientRepository","toBe","filters","name","status","pagination","page","limit","sorting","field","order","mockResult","data","id","total","totalPages","mockResolvedValue","result","toHaveBeenCalledWith","toEqual","error","Error","mockRejectedValue","rejects","clientId","mockClient","validClientData","email","tax_id","type","mockCreatedClient","createNewClient","objectContaining","message","updateData","existingClient","updatedClient","updateExistingClient","any","Object","anotherClient","removeClient","searchTerm","mockResults","mockContracts","client_id","mockPayments","mockStats","totalContracts","totalPayments","totalAmount","getClientStatistics","clientData","_validateClientData","resolves","not"],"sources":["clientServiceRefactored.test.js"],"sourcesContent":["/**\n * Testes unitários para ClientServiceRefactored\n * Testa a lógica de negócio do serviço de clientes\n */\n\nconst ClientServiceRefactored = require('../../services/ClientServiceRefactored');\nconst ValidationHelper = require('../../utils/validationHelper');\nconst ErrorHandler = require('../../utils/errorHandler');\n\n// Mock das dependências\njest.mock('../../utils/validationHelper');\njest.mock('../../utils/errorHandler');\n\n// Mock do repositório\nconst createMockRepository = () => ({\n  findClientsWithPagination: jest.fn(),\n  findClientById: jest.fn(),\n  findClientByEmail: jest.fn(),\n  findClientByTaxId: jest.fn(),\n  createClient: jest.fn(),\n  updateClient: jest.fn(),\n  deleteClient: jest.fn(),\n  searchClients: jest.fn(),\n  getClientContracts: jest.fn(),\n  getClientPayments: jest.fn(),\n  getClientStats: jest.fn(),\n  clientHasContracts: jest.fn(),\n  clientHasPayments: jest.fn()\n});\n\ndescribe('ClientServiceRefactored', () => {\n  let service;\n  let mockRepository;\n\n  beforeEach(() => {\n    mockRepository = createMockRepository();\n    service = new ClientServiceRefactored(mockRepository);\n    \n    // Limpar mocks\n    jest.clearAllMocks();\n    \n    // Configurar mocks padrão do ValidationHelper\n    ValidationHelper.isValidEmail.mockReturnValue(true);\n    ValidationHelper.isValidPhone.mockReturnValue(true);\n    ValidationHelper.isValidCPF.mockReturnValue(true);\n    ValidationHelper.isValidCNPJ.mockReturnValue(true);\n    ValidationHelper.isValidString.mockReturnValue(true);\n    ValidationHelper.sanitizeString.mockImplementation(str => str?.trim() || '');\n    ValidationHelper.normalizePhone.mockImplementation(phone => phone?.replace(/\\D/g, '') || '');\n    ValidationHelper.normalizeTaxId.mockImplementation(taxId => taxId?.replace(/\\D/g, '') || '');\n    ValidationHelper.validateRequiredFields.mockReturnValue([]);\n  });\n\n  describe('constructor', () => {\n    test('should throw error if repository is not provided', () => {\n      expect(() => new ClientServiceRefactored()).toThrow('Repository é obrigatório');\n    });\n\n    test('should initialize with repository', () => {\n      const service = new ClientServiceRefactored(mockRepository);\n      expect(service.clientRepository).toBe(mockRepository);\n    });\n  });\n\n  describe('findClientsWithPagination', () => {\n    test('should return paginated clients successfully', async () => {\n      const filters = { name: 'João', status: 'active' };\n      const pagination = { page: 1, limit: 10 };\n      const sorting = { field: 'name', order: 'asc' };\n      \n      const mockResult = {\n        data: [{ id: 1, name: 'João Silva' }],\n        pagination: { page: 1, limit: 10, total: 1, totalPages: 1 }\n      };\n      \n      mockRepository.findClientsWithPagination.mockResolvedValue(mockResult);\n      \n      const result = await service.findClientsWithPagination(filters, pagination, sorting);\n      \n      expect(mockRepository.findClientsWithPagination).toHaveBeenCalledWith(\n        filters,\n        pagination,\n        sorting\n      );\n      expect(result).toEqual(mockResult);\n    });\n\n    test('should handle repository error', async () => {\n      const error = new Error('Database error');\n      mockRepository.findClientsWithPagination.mockRejectedValue(error);\n      \n      await expect(service.findClientsWithPagination({}, {}, {}))\n        .rejects.toThrow('Erro ao buscar clientes');\n    });\n\n    test('should use default parameters when not provided', async () => {\n      mockRepository.findClientsWithPagination.mockResolvedValue({ data: [], pagination: {} });\n      \n      await service.findClientsWithPagination();\n      \n      expect(mockRepository.findClientsWithPagination).toHaveBeenCalledWith(\n        {},\n        { page: 1, limit: 10 },\n        { field: 'created_at', order: 'desc' }\n      );\n    });\n  });\n\n  describe('findClientById', () => {\n    test('should return client when found', async () => {\n      const clientId = '123';\n      const mockClient = { id: clientId, name: 'João Silva' };\n      \n      mockRepository.findClientById.mockResolvedValue(mockClient);\n      \n      const result = await service.findClientById(clientId);\n      \n      expect(mockRepository.findClientById).toHaveBeenCalledWith(clientId);\n      expect(result).toEqual(mockClient);\n    });\n\n    test('should throw error when client not found', async () => {\n      const clientId = '123';\n      mockRepository.findClientById.mockResolvedValue(null);\n      \n      await expect(service.findClientById(clientId))\n        .rejects.toThrow('Cliente não encontrado');\n    });\n\n    test('should throw error for invalid ID', async () => {\n      await expect(service.findClientById(''))\n        .rejects.toThrow('ID do cliente é obrigatório');\n      \n      await expect(service.findClientById(null))\n        .rejects.toThrow('ID do cliente é obrigatório');\n    });\n  });\n\n  describe('createNewClient', () => {\n    const validClientData = {\n      name: 'João Silva',\n      email: 'joao@email.com',\n      phone: '11999999999',\n      tax_id: '12345678901',\n      type: 'individual'\n    };\n\n    test('should create client successfully', async () => {\n      const mockCreatedClient = { id: '123', ...validClientData };\n      \n      mockRepository.findClientByEmail.mockResolvedValue(null);\n      mockRepository.findClientByTaxId.mockResolvedValue(null);\n      mockRepository.createClient.mockResolvedValue(mockCreatedClient);\n      \n      const result = await service.createNewClient(validClientData);\n      \n      expect(result).toEqual(mockCreatedClient);\n      expect(mockRepository.createClient).toHaveBeenCalledWith(\n        expect.objectContaining({\n          name: 'João Silva',\n          email: 'joao@email.com'\n        })\n      );\n    });\n\n    test('should throw error for invalid email', async () => {\n      ValidationHelper.isValidEmail.mockReturnValue(false);\n      \n      await expect(service.createNewClient(validClientData))\n        .rejects.toThrow('Email inválido');\n    });\n\n    test('should throw error for invalid phone', async () => {\n      ValidationHelper.isValidPhone.mockReturnValue(false);\n      \n      await expect(service.createNewClient(validClientData))\n        .rejects.toThrow('Telefone inválido');\n    });\n\n    test('should throw error for invalid CPF when type is individual', async () => {\n      ValidationHelper.isValidCPF.mockReturnValue(false);\n      \n      await expect(service.createNewClient({ ...validClientData, type: 'individual' }))\n        .rejects.toThrow('CPF inválido');\n    });\n\n    test('should throw error for invalid CNPJ when type is company', async () => {\n      ValidationHelper.isValidCNPJ.mockReturnValue(false);\n      \n      await expect(service.createNewClient({ ...validClientData, type: 'company' }))\n        .rejects.toThrow('CNPJ inválido');\n    });\n\n    test('should throw error when email already exists', async () => {\n      mockRepository.findClientByEmail.mockResolvedValue({ id: '456' });\n      \n      await expect(service.createNewClient(validClientData))\n        .rejects.toThrow('Email já está em uso');\n    });\n\n    test('should throw error when tax_id already exists', async () => {\n      mockRepository.findClientByEmail.mockResolvedValue(null);\n      mockRepository.findClientByTaxId.mockResolvedValue({ id: '456' });\n      \n      await expect(service.createNewClient(validClientData))\n        .rejects.toThrow('CPF/CNPJ já está em uso');\n    });\n\n    test('should handle required fields validation', async () => {\n      ValidationHelper.validateRequiredFields.mockReturnValue([\n        { field: 'name', message: 'Nome é obrigatório' }\n      ]);\n      \n      await expect(service.createNewClient({}))\n        .rejects.toThrow('Dados obrigatórios não informados');\n    });\n  });\n\n  describe('updateExistingClient', () => {\n    const clientId = '123';\n    const updateData = {\n      name: 'João Santos',\n      email: 'joao.santos@email.com'\n    };\n\n    test('should update client successfully', async () => {\n      const existingClient = { id: clientId, name: 'João Silva', email: 'joao@email.com' };\n      const updatedClient = { ...existingClient, ...updateData };\n      \n      mockRepository.findClientById.mockResolvedValue(existingClient);\n      mockRepository.findClientByEmail.mockResolvedValue(null);\n      mockRepository.updateClient.mockResolvedValue(updatedClient);\n      \n      const result = await service.updateExistingClient(clientId, updateData);\n      \n      expect(result).toEqual(updatedClient);\n      expect(mockRepository.updateClient).toHaveBeenCalledWith(clientId, expect.any(Object));\n    });\n\n    test('should throw error when client not found', async () => {\n      mockRepository.findClientById.mockResolvedValue(null);\n      \n      await expect(service.updateExistingClient(clientId, updateData))\n        .rejects.toThrow('Cliente não encontrado');\n    });\n\n    test('should throw error when email is already in use by another client', async () => {\n      const existingClient = { id: clientId, email: 'joao@email.com' };\n      const anotherClient = { id: '456', email: 'joao.santos@email.com' };\n      \n      mockRepository.findClientById.mockResolvedValue(existingClient);\n      mockRepository.findClientByEmail.mockResolvedValue(anotherClient);\n      \n      await expect(service.updateExistingClient(clientId, updateData))\n        .rejects.toThrow('Email já está em uso por outro cliente');\n    });\n\n    test('should allow updating with same email', async () => {\n      const existingClient = { id: clientId, email: 'joao@email.com' };\n      const updatedClient = { ...existingClient, name: 'João Santos' };\n      \n      mockRepository.findClientById.mockResolvedValue(existingClient);\n      mockRepository.findClientByEmail.mockResolvedValue(existingClient); // Mesmo cliente\n      mockRepository.updateClient.mockResolvedValue(updatedClient);\n      \n      const result = await service.updateExistingClient(clientId, { \n        name: 'João Santos',\n        email: 'joao@email.com' // Mesmo email\n      });\n      \n      expect(result).toEqual(updatedClient);\n    });\n  });\n\n  describe('removeClient', () => {\n    const clientId = '123';\n\n    test('should remove client successfully when no dependencies', async () => {\n      mockRepository.findClientById.mockResolvedValue({ id: clientId });\n      mockRepository.clientHasContracts.mockResolvedValue(false);\n      mockRepository.clientHasPayments.mockResolvedValue(false);\n      mockRepository.deleteClient.mockResolvedValue(true);\n      \n      const result = await service.removeClient(clientId);\n      \n      expect(result).toBe(true);\n      expect(mockRepository.deleteClient).toHaveBeenCalledWith(clientId);\n    });\n\n    test('should throw error when client has contracts', async () => {\n      mockRepository.findClientById.mockResolvedValue({ id: clientId });\n      mockRepository.clientHasContracts.mockResolvedValue(true);\n      \n      await expect(service.removeClient(clientId))\n        .rejects.toThrow('Não é possível excluir cliente com contratos ativos');\n    });\n\n    test('should throw error when client has payments', async () => {\n      mockRepository.findClientById.mockResolvedValue({ id: clientId });\n      mockRepository.clientHasContracts.mockResolvedValue(false);\n      mockRepository.clientHasPayments.mockResolvedValue(true);\n      \n      await expect(service.removeClient(clientId))\n        .rejects.toThrow('Não é possível excluir cliente com pagamentos registrados');\n    });\n\n    test('should throw error when client not found', async () => {\n      mockRepository.findClientById.mockResolvedValue(null);\n      \n      await expect(service.removeClient(clientId))\n        .rejects.toThrow('Cliente não encontrado');\n    });\n  });\n\n  describe('searchClients', () => {\n    test('should search clients successfully', async () => {\n      const searchTerm = 'João';\n      const mockResults = [{ id: '1', name: 'João Silva' }];\n      \n      mockRepository.searchClients.mockResolvedValue(mockResults);\n      \n      const result = await service.searchClients(searchTerm);\n      \n      expect(result).toEqual(mockResults);\n      expect(mockRepository.searchClients).toHaveBeenCalledWith(searchTerm);\n    });\n\n    test('should throw error for empty search term', async () => {\n      await expect(service.searchClients(''))\n        .rejects.toThrow('Termo de busca é obrigatório');\n    });\n\n    test('should throw error for short search term', async () => {\n      await expect(service.searchClients('Jo'))\n        .rejects.toThrow('Termo de busca deve ter pelo menos 3 caracteres');\n    });\n  });\n\n  describe('getClientContracts', () => {\n    test('should get client contracts successfully', async () => {\n      const clientId = '123';\n      const mockContracts = [{ id: '1', client_id: clientId }];\n      \n      mockRepository.findClientById.mockResolvedValue({ id: clientId });\n      mockRepository.getClientContracts.mockResolvedValue(mockContracts);\n      \n      const result = await service.getClientContracts(clientId);\n      \n      expect(result).toEqual(mockContracts);\n      expect(mockRepository.getClientContracts).toHaveBeenCalledWith(clientId);\n    });\n\n    test('should throw error when client not found', async () => {\n      mockRepository.findClientById.mockResolvedValue(null);\n      \n      await expect(service.getClientContracts('123'))\n        .rejects.toThrow('Cliente não encontrado');\n    });\n  });\n\n  describe('getClientPayments', () => {\n    test('should get client payments successfully', async () => {\n      const clientId = '123';\n      const mockPayments = [{ id: '1', client_id: clientId }];\n      \n      mockRepository.findClientById.mockResolvedValue({ id: clientId });\n      mockRepository.getClientPayments.mockResolvedValue(mockPayments);\n      \n      const result = await service.getClientPayments(clientId);\n      \n      expect(result).toEqual(mockPayments);\n      expect(mockRepository.getClientPayments).toHaveBeenCalledWith(clientId);\n    });\n  });\n\n  describe('getClientStatistics', () => {\n    test('should get client statistics successfully', async () => {\n      const clientId = '123';\n      const mockStats = {\n        totalContracts: 5,\n        totalPayments: 10,\n        totalAmount: 50000\n      };\n      \n      mockRepository.findClientById.mockResolvedValue({ id: clientId });\n      mockRepository.getClientStats.mockResolvedValue(mockStats);\n      \n      const result = await service.getClientStatistics(clientId);\n      \n      expect(result).toEqual(mockStats);\n      expect(mockRepository.getClientStats).toHaveBeenCalledWith(clientId);\n    });\n  });\n\n  describe('private methods', () => {\n    describe('_validateClientData', () => {\n      test('should validate individual client data', async () => {\n        const clientData = {\n          name: 'João Silva',\n          email: 'joao@email.com',\n          phone: '11999999999',\n          tax_id: '12345678901',\n          type: 'individual'\n        };\n        \n        // Não deve lançar erro\n        await expect(service._validateClientData(clientData)).resolves.not.toThrow();\n        \n        expect(ValidationHelper.isValidCPF).toHaveBeenCalledWith('12345678901');\n      });\n\n      test('should validate company client data', async () => {\n        const clientData = {\n          name: 'Empresa LTDA',\n          email: 'contato@empresa.com',\n          phone: '11999999999',\n          tax_id: '12345678000195',\n          type: 'company'\n        };\n        \n        await expect(service._validateClientData(clientData)).resolves.not.toThrow();\n        \n        expect(ValidationHelper.isValidCNPJ).toHaveBeenCalledWith('12345678000195');\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}