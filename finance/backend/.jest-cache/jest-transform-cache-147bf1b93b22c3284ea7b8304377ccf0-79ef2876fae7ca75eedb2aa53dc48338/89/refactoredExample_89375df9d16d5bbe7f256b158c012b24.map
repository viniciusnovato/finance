{"version":3,"names":["cov_t4zlpdmhy","actualCoverage","ClientControllerRefactored","s","require","ClientServiceRefactored","ClientRepositoryRefactored","ResponseHelper","ValidationHelper","ErrorHandler","DatabaseHelper","HttpStatusCodes","ErrorCodes","SuccessMessages","RefactoredExampleSetup","setupDependencies","f","clientRepository","clientService","clientController","exampleControllerUsage","req","res","getAllClients","error","handleControllerError","exampleServiceUsage","filters","name","status","city","pagination","page","limit","sorting","field","order","result","findClientsWithPagination","console","log","message","exampleRepositoryUsage","clientData","email","phone","tax_id","type","newClient","createClient","exampleValidationUsage","isValidEmail","cpf","isValidCPF","dirtyString","cleanString","sanitizeString","exampleResponseUsage","data","id","success","CLIENT_RETRIEVED","errors","validationError","notFound","exampleDatabaseHelperUsage","paginationQuery","buildPaginationQuery","allowedFilters","filterQuery","buildFilterQuery","allowedSortFields","sortQuery","buildSortQuery","exampleCompleteFlow","body","address","street","state","zip_code","createNewClient","errorMiddleware","next","handleExpressError","setupRefactoredRoutes","app","get","bind","getClientById","post","put","updateExistingClient","delete","removeClient","searchClients","use","module","exports"],"sources":["refactoredExample.js"],"sourcesContent":["/**\n * Exemplo de uso das classes refatoradas seguindo Clean Code\n * Este arquivo demonstra como integrar todas as classes refatoradas\n */\n\nconst ClientControllerRefactored = require('../controllers/ClientControllerRefactored');\nconst ClientServiceRefactored = require('../services/ClientServiceRefactored');\nconst ClientRepositoryRefactored = require('../repositories/ClientRepositoryRefactored');\nconst ResponseHelper = require('../utils/responseHelper');\nconst ValidationHelper = require('../utils/validationHelper');\nconst ErrorHandler = require('../utils/errorHandler');\nconst DatabaseHelper = require('../utils/databaseHelper');\nconst { HttpStatusCodes, ErrorCodes, SuccessMessages } = require('../utils/constants');\n\n/**\n * Exemplo de configuração das dependências\n */\nclass RefactoredExampleSetup {\n  static setupDependencies() {\n    // Instanciar repositório\n    const clientRepository = new ClientRepositoryRefactored();\n    \n    // Instanciar serviço com repositório\n    const clientService = new ClientServiceRefactored(clientRepository);\n    \n    // Instanciar controller com serviço\n    const clientController = new ClientControllerRefactored(clientService);\n    \n    return {\n      clientRepository,\n      clientService,\n      clientController\n    };\n  }\n\n  /**\n   * Exemplo de uso do controller refatorado\n   */\n  static async exampleControllerUsage(req, res) {\n    try {\n      const { clientController } = this.setupDependencies();\n      \n      // Exemplo de busca de clientes com paginação\n      await clientController.getAllClients(req, res);\n      \n    } catch (error) {\n      ErrorHandler.handleControllerError(error, res);\n    }\n  }\n\n  /**\n   * Exemplo de uso do service refatorado\n   */\n  static async exampleServiceUsage() {\n    try {\n      const { clientService } = this.setupDependencies();\n      \n      // Exemplo de busca com filtros\n      const filters = {\n        name: 'João',\n        status: 'active',\n        city: 'São Paulo'\n      };\n      \n      const pagination = {\n        page: 1,\n        limit: 10\n      };\n      \n      const sorting = {\n        field: 'name',\n        order: 'asc'\n      };\n      \n      const result = await clientService.findClientsWithPagination(\n        filters,\n        pagination,\n        sorting\n      );\n      \n      console.log('Clientes encontrados:', result);\n      \n    } catch (error) {\n      console.error('Erro no service:', error.message);\n    }\n  }\n\n  /**\n   * Exemplo de uso do repository refatorado\n   */\n  static async exampleRepositoryUsage() {\n    try {\n      const { clientRepository } = this.setupDependencies();\n      \n      // Exemplo de criação de cliente\n      const clientData = {\n        name: 'João Silva',\n        email: 'joao@email.com',\n        phone: '11999999999',\n        tax_id: '12345678901',\n        type: 'individual',\n        status: 'active'\n      };\n      \n      const newClient = await clientRepository.createClient(clientData);\n      console.log('Cliente criado:', newClient);\n      \n    } catch (error) {\n      console.error('Erro no repository:', error.message);\n    }\n  }\n\n  /**\n   * Exemplo de uso dos helpers de validação\n   */\n  static exampleValidationUsage() {\n    // Validação de email\n    const email = 'teste@email.com';\n    const isValidEmail = ValidationHelper.isValidEmail(email);\n    console.log(`Email ${email} é válido:`, isValidEmail);\n    \n    // Validação de CPF\n    const cpf = '12345678901';\n    const isValidCPF = ValidationHelper.isValidCPF(cpf);\n    console.log(`CPF ${cpf} é válido:`, isValidCPF);\n    \n    // Sanitização de string\n    const dirtyString = '  João Silva  ';\n    const cleanString = ValidationHelper.sanitizeString(dirtyString);\n    console.log(`String limpa: '${cleanString}'`);\n  }\n\n  /**\n   * Exemplo de uso do helper de resposta\n   */\n  static exampleResponseUsage(res) {\n    // Resposta de sucesso\n    const data = { id: 1, name: 'João Silva' };\n    ResponseHelper.success(res, data, SuccessMessages.CLIENT_RETRIEVED);\n    \n    // Resposta de erro de validação\n    const errors = [{ field: 'email', message: 'Email inválido' }];\n    ResponseHelper.validationError(res, 'Dados inválidos', errors);\n    \n    // Resposta não encontrado\n    ResponseHelper.notFound(res, 'Cliente não encontrado');\n  }\n\n  /**\n   * Exemplo de uso do helper de banco de dados\n   */\n  static exampleDatabaseHelperUsage() {\n    // Construção de query de paginação\n    const pagination = { page: 2, limit: 15 };\n    const paginationQuery = DatabaseHelper.buildPaginationQuery(pagination);\n    console.log('Query de paginação:', paginationQuery);\n    \n    // Construção de filtros\n    const filters = { name: 'João', status: 'active' };\n    const allowedFilters = ['name', 'status', 'email'];\n    const filterQuery = DatabaseHelper.buildFilterQuery(filters, allowedFilters);\n    console.log('Query de filtros:', filterQuery);\n    \n    // Construção de ordenação\n    const sorting = { field: 'name', order: 'desc' };\n    const allowedSortFields = ['name', 'email', 'created_at'];\n    const sortQuery = DatabaseHelper.buildSortQuery(sorting, allowedSortFields);\n    console.log('Query de ordenação:', sortQuery);\n  }\n\n  /**\n   * Exemplo completo de fluxo de criação de cliente\n   */\n  static async exampleCompleteFlow(req, res) {\n    try {\n      const { clientController } = this.setupDependencies();\n      \n      // Simular dados da requisição\n      req.body = {\n        name: 'Maria Santos',\n        email: 'maria@email.com',\n        phone: '11888888888',\n        tax_id: '98765432100',\n        type: 'individual',\n        address: {\n          street: 'Rua das Flores, 123',\n          city: 'São Paulo',\n          state: 'SP',\n          zip_code: '01234-567'\n        }\n      };\n      \n      // Executar criação através do controller\n      await clientController.createNewClient(req, res);\n      \n    } catch (error) {\n      ErrorHandler.handleControllerError(error, res);\n    }\n  }\n}\n\n/**\n * Exemplo de middleware de tratamento de erros\n */\nconst errorMiddleware = (error, req, res, next) => {\n  ErrorHandler.handleExpressError(error, req, res, next);\n};\n\n/**\n * Exemplo de configuração de rotas com as classes refatoradas\n */\nfunction setupRefactoredRoutes(app) {\n  const { clientController } = RefactoredExampleSetup.setupDependencies();\n  \n  // Rotas de clientes\n  app.get('/api/clients', clientController.getAllClients.bind(clientController));\n  app.get('/api/clients/:id', clientController.getClientById.bind(clientController));\n  app.post('/api/clients', clientController.createNewClient.bind(clientController));\n  app.put('/api/clients/:id', clientController.updateExistingClient.bind(clientController));\n  app.delete('/api/clients/:id', clientController.removeClient.bind(clientController));\n  app.get('/api/clients/search', clientController.searchClients.bind(clientController));\n  \n  // Middleware de tratamento de erros\n  app.use(errorMiddleware);\n}\n\nmodule.exports = {\n  RefactoredExampleSetup,\n  setupRefactoredRoutes,\n  errorMiddleware\n};"],"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","ignoreList":[]}