{"version":3,"names":["cov_1zy23cx7yn","actualCoverage","supabaseAdmin","s","require","ClientRepository","getClients","options","f","page","limit","search","status","sortBy","sortOrder","query","from","select","count","b","or","eq","order","ascending","offset","range","data","error","console","Error","totalPages","Math","ceil","clients","pagination","current_page","total_pages","total_items","items_per_page","has_next","has_prev","getClientById","id","single","code","getClientByTaxId","taxId","getClientByEmail","email","toLowerCase","createClient","clientData","insert","updateClient","updateData","update","deleteClient","delete","clientHasContracts","clientId","length","clientHasPayments","in","getClientContracts","contracts","getClientPayments","payments","searchClients","getClientStats","contractsError","contractIds","map","c","paymentsData","paymentsError","totalContracts","activeContracts","filter","totalContractValue","reduce","sum","parseFloat","value","totalPayments","paidPayments","p","pendingPayments","overduePayments","due_date","Date","toISOString","split","totalPaid","amount","totalPending","total","active","total_value","paid","pending","overdue","total_paid","total_pending","payment_rate","module","exports"],"sources":["ClientRepository.js"],"sourcesContent":["const { supabaseAdmin } = require('../config/supabase');\n\nclass ClientRepository {\n  /**\n   * Obter lista de clientes com paginação e filtros\n   * @param {Object} options - Opções de busca\n   * @returns {Object} Lista paginada de clientes\n   */\n  static async getClients(options) {\n    const { page, limit, search, status, sortBy, sortOrder } = options;\n    \n    try {\n      let query = supabaseAdmin\n        .from('clients')\n        .select('*', { count: 'exact' });\n\n      // Aplicar filtros\n      if (search) {\n        query = query.or(`name.ilike.%${search}%,email.ilike.%${search}%,tax_id.ilike.%${search}%`);\n      }\n\n      if (status) {\n        query = query.eq('status', status);\n      }\n\n      // Aplicar ordenação\n      query = query.order(sortBy, { ascending: sortOrder === 'asc' });\n\n      // Aplicar paginação\n      const offset = (page - 1) * limit;\n      query = query.range(offset, offset + limit - 1);\n\n      const { data, error, count } = await query;\n\n      if (error) {\n        console.error('Erro ao buscar clientes:', error);\n        throw new Error('Erro ao buscar clientes');\n      }\n\n      const totalPages = Math.ceil(count / limit);\n\n      return {\n        clients: data || [],\n        pagination: {\n          current_page: page,\n          total_pages: totalPages,\n          total_items: count,\n          items_per_page: limit,\n          has_next: page < totalPages,\n          has_prev: page > 1\n        }\n      };\n    } catch (error) {\n      console.error('Erro no ClientRepository.getClients:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter cliente por ID\n   * @param {string} id - ID do cliente\n   * @returns {Object|null} Dados do cliente\n   */\n  static async getClientById(id) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('clients')\n        .select('*')\n        .eq('id', id)\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null; // Cliente não encontrado\n        }\n        console.error('Erro ao buscar cliente por ID:', error);\n        throw new Error('Erro ao buscar cliente');\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Erro no ClientRepository.getClientById:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter cliente por CPF/CNPJ\n   * @param {string} taxId - CPF/CNPJ do cliente\n   * @returns {Object|null} Dados do cliente\n   */\n  static async getClientByTaxId(taxId) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('clients')\n        .select('*')\n        .eq('tax_id', taxId)\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null; // Cliente não encontrado\n        }\n        console.error('Erro ao buscar cliente por CPF/CNPJ:', error);\n        throw new Error('Erro ao buscar cliente');\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Erro no ClientRepository.getClientByTaxId:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter cliente por email\n   * @param {string} email - Email do cliente\n   * @returns {Object|null} Dados do cliente\n   */\n  static async getClientByEmail(email) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('clients')\n        .select('*')\n        .eq('email', email.toLowerCase())\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null; // Cliente não encontrado\n        }\n        console.error('Erro ao buscar cliente por email:', error);\n        throw new Error('Erro ao buscar cliente');\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Erro no ClientRepository.getClientByEmail:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Criar novo cliente\n   * @param {Object} clientData - Dados do cliente\n   * @returns {Object} Cliente criado\n   */\n  static async createClient(clientData) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('clients')\n        .insert([clientData])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Erro ao criar cliente:', error);\n        throw new Error('Erro ao criar cliente');\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Erro no ClientRepository.createClient:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Atualizar cliente\n   * @param {string} id - ID do cliente\n   * @param {Object} updateData - Dados para atualização\n   * @returns {Object|null} Cliente atualizado\n   */\n  static async updateClient(id, updateData) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('clients')\n        .update(updateData)\n        .eq('id', id)\n        .select()\n        .single();\n\n      if (error) {\n        if (error.code === 'PGRST116') {\n          return null; // Cliente não encontrado\n        }\n        console.error('Erro ao atualizar cliente:', error);\n        throw new Error('Erro ao atualizar cliente');\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Erro no ClientRepository.updateClient:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Deletar cliente\n   * @param {string} id - ID do cliente\n   * @returns {boolean} Sucesso da operação\n   */\n  static async deleteClient(id) {\n    try {\n      const { error } = await supabaseAdmin\n        .from('clients')\n        .delete()\n        .eq('id', id);\n\n      if (error) {\n        console.error('Erro ao deletar cliente:', error);\n        throw new Error('Erro ao deletar cliente');\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Erro no ClientRepository.deleteClient:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verificar se cliente possui contratos\n   * @param {string} clientId - ID do cliente\n   * @returns {boolean} Se possui contratos\n   */\n  static async clientHasContracts(clientId) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('contracts')\n        .select('id')\n        .eq('client_id', clientId)\n        .limit(1);\n\n      if (error) {\n        console.error('Erro ao verificar contratos do cliente:', error);\n        throw new Error('Erro ao verificar contratos');\n      }\n\n      return (data || []).length > 0;\n    } catch (error) {\n      console.error('Erro no ClientRepository.clientHasContracts:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Verificar se cliente possui pagamentos\n   * @param {string} clientId - ID do cliente\n   * @returns {boolean} Se possui pagamentos\n   */\n  static async clientHasPayments(clientId) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('payments')\n        .select('id')\n        .in('contract_id', \n          supabaseAdmin\n            .from('contracts')\n            .select('id')\n            .eq('client_id', clientId)\n        )\n        .limit(1);\n\n      if (error) {\n        console.error('Erro ao verificar pagamentos do cliente:', error);\n        throw new Error('Erro ao verificar pagamentos');\n      }\n\n      return (data || []).length > 0;\n    } catch (error) {\n      console.error('Erro no ClientRepository.clientHasPayments:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter contratos do cliente\n   * @param {string} clientId - ID do cliente\n   * @param {Object} options - Opções de busca\n   * @returns {Object} Lista paginada de contratos\n   */\n  static async getClientContracts(clientId, options) {\n    const { page, limit, status } = options;\n    \n    try {\n      let query = supabaseAdmin\n        .from('contracts')\n        .select('*', { count: 'exact' })\n        .eq('client_id', clientId);\n\n      if (status) {\n        query = query.eq('status', status);\n      }\n\n      query = query.order('created_at', { ascending: false });\n\n      const offset = (page - 1) * limit;\n      query = query.range(offset, offset + limit - 1);\n\n      const { data, error, count } = await query;\n\n      if (error) {\n        console.error('Erro ao buscar contratos do cliente:', error);\n        throw new Error('Erro ao buscar contratos');\n      }\n\n      const totalPages = Math.ceil(count / limit);\n\n      return {\n        contracts: data || [],\n        pagination: {\n          current_page: page,\n          total_pages: totalPages,\n          total_items: count,\n          items_per_page: limit,\n          has_next: page < totalPages,\n          has_prev: page > 1\n        }\n      };\n    } catch (error) {\n      console.error('Erro no ClientRepository.getClientContracts:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter pagamentos do cliente\n   * @param {string} clientId - ID do cliente\n   * @param {Object} options - Opções de busca\n   * @returns {Object} Lista paginada de pagamentos\n   */\n  static async getClientPayments(clientId, options) {\n    const { page, limit, status } = options;\n    \n    try {\n      let query = supabaseAdmin\n        .from('payments')\n        .select(`\n          *,\n          contracts!inner (\n            id,\n            contract_number,\n            client_id\n          )\n        `, { count: 'exact' })\n        .eq('contracts.client_id', clientId);\n\n      if (status) {\n        query = query.eq('status', status);\n      }\n\n      query = query.order('created_at', { ascending: false });\n\n      const offset = (page - 1) * limit;\n      query = query.range(offset, offset + limit - 1);\n\n      const { data, error, count } = await query;\n\n      if (error) {\n        console.error('Erro ao buscar pagamentos do cliente:', error);\n        throw new Error('Erro ao buscar pagamentos');\n      }\n\n      const totalPages = Math.ceil(count / limit);\n\n      return {\n        payments: data || [],\n        pagination: {\n          current_page: page,\n          total_pages: totalPages,\n          total_items: count,\n          items_per_page: limit,\n          has_next: page < totalPages,\n          has_prev: page > 1\n        }\n      };\n    } catch (error) {\n      console.error('Erro no ClientRepository.getClientPayments:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Buscar clientes por termo\n   * @param {string} query - Termo de busca\n   * @param {number} limit - Limite de resultados\n   * @returns {Array} Lista de clientes\n   */\n  static async searchClients(query, limit) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('clients')\n        .select('id, name, email, tax_id, phone, status')\n        .or(`name.ilike.%${query}%,email.ilike.%${query}%,tax_id.ilike.%${query}%`)\n        .eq('status', 'active')\n        .order('name')\n        .limit(limit);\n\n      if (error) {\n        console.error('Erro ao buscar clientes:', error);\n        throw new Error('Erro ao buscar clientes');\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Erro no ClientRepository.searchClients:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter estatísticas do cliente\n   * @param {string} clientId - ID do cliente\n   * @returns {Object} Estatísticas do cliente\n   */\n  static async getClientStats(clientId) {\n    try {\n      // Buscar contratos do cliente\n      const { data: contracts, error: contractsError } = await supabaseAdmin\n        .from('contracts')\n        .select('id, value, status, created_at')\n        .eq('client_id', clientId);\n\n      if (contractsError) {\n        console.error('Erro ao buscar contratos para estatísticas:', contractsError);\n        throw new Error('Erro ao buscar estatísticas');\n      }\n\n      // Buscar pagamentos do cliente\n      const contractIds = (contracts || []).map(c => c.id);\n      let payments = [];\n      \n      if (contractIds.length > 0) {\n        const { data: paymentsData, error: paymentsError } = await supabaseAdmin\n          .from('payments')\n          .select('amount, status, paid_date, due_date')\n          .in('contract_id', contractIds);\n\n        if (paymentsError) {\n          console.error('Erro ao buscar pagamentos para estatísticas:', paymentsError);\n          throw new Error('Erro ao buscar estatísticas');\n        }\n\n        payments = paymentsData || [];\n      }\n\n      // Calcular estatísticas\n      const totalContracts = contracts.length;\n      const activeContracts = contracts.filter(c => c.status === 'active').length;\n      const totalContractValue = contracts.reduce((sum, c) => sum + parseFloat(c.value || 0), 0);\n      \n      const totalPayments = payments.length;\n      const paidPayments = payments.filter(p => p.status === 'paid').length;\n      const pendingPayments = payments.filter(p => p.status === 'pending').length;\n      const overduePayments = payments.filter(p => {\n        return p.status === 'pending' && p.due_date < new Date().toISOString().split('T')[0];\n      }).length;\n      \n      const totalPaid = payments\n        .filter(p => p.status === 'paid')\n        .reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\n      \n      const totalPending = payments\n        .filter(p => p.status === 'pending')\n        .reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\n\n      return {\n        contracts: {\n          total: totalContracts,\n          active: activeContracts,\n          total_value: totalContractValue\n        },\n        payments: {\n          total: totalPayments,\n          paid: paidPayments,\n          pending: pendingPayments,\n          overdue: overduePayments,\n          total_paid: totalPaid,\n          total_pending: totalPending,\n          payment_rate: totalPayments > 0 ? (paidPayments / totalPayments * 100) : 0\n        }\n      };\n    } catch (error) {\n      console.error('Erro no ClientRepository.getClientStats:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = { ClientRepository };"],"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","ignoreList":[]}