{"version":3,"names":["cov_qbdr3w6hj","actualCoverage","PaymentRepository","s","require","validatePayment","formatCurrency","formatDate","calculateOverdueDays","calculateInterest","PaymentService","constructor","f","paymentRepository","getAllPayments","page","b","limit","filters","offset","payments","findAll","total","count","map","formatPayment","pagination","parseInt","totalPages","Math","ceil","error","Error","message","getPaymentById","id","payment","findById","createPayment","paymentData","validation","isValid","errors","join","contractExists","checkContractExists","contract_id","processedData","processPaymentData","create","updatePayment","existingPayment","status","update","deletePayment","delete","updatePaymentStatus","validStatuses","includes","updateData","payment_date","Date","toISOString","updatedPayment","updateStatus","confirmPayment","confirmationData","payment_method","notes","confirmedPayment","searchPayments","searchTerm","search","countSearch","getOverduePayments","findOverdue","countOverdue","paymentsWithOverdue","overdue_days","due_date","interest_amount","amount","getPaymentsDueToday","findDueToday","countDueToday","getPaymentStats","period","stats","getStats","total_payments","paid_payments","pending_payments","overdue_payments","total_amount","paid_amount","pending_amount","overdue_amount","payment_rate","round","getRevenueChart","groupBy","chartData","item","bulkUpdatePayments","paymentIds","Array","isArray","length","updatedPayments","bulkUpdate","updated_count","exportPayments","format","findForExport","generateCSV","JSON","stringify","getPaymentsByContract","contractId","findByContract","countByContract","getPaymentsByClient","clientId","findByClient","countByClient","generateReceipt","receipt_number","payment_id","contract_number","contract","client_name","client","name","generated_at","sendPaymentReminder","method","sent_at","data","processed","parseFloat","created_at","updated_at","headers","rows","installment_number","row","field","module","exports"],"sources":["PaymentService.js"],"sourcesContent":["const PaymentRepository = require('../repositories/PaymentRepository');\nconst { validatePayment } = require('../validators/paymentValidator');\nconst { formatCurrency, formatDate } = require('../utils/formatters');\nconst { calculateOverdueDays, calculateInterest } = require('../utils/calculations');\n\nclass PaymentService {\n  constructor() {\n    this.paymentRepository = new PaymentRepository();\n  }\n\n  async getAllPayments(page = 1, limit = 10, filters = {}) {\n    try {\n      const offset = (page - 1) * limit;\n      const payments = await this.paymentRepository.findAll(offset, limit, filters);\n      const total = await this.paymentRepository.count(filters);\n\n      return {\n        payments: payments.map(this.formatPayment),\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      };\n    } catch (error) {\n      throw new Error(`Erro ao buscar pagamentos: ${error.message}`);\n    }\n  }\n\n  async getPaymentById(id) {\n    try {\n      const payment = await this.paymentRepository.findById(id);\n      if (!payment) {\n        throw new Error('Pagamento não encontrado');\n      }\n      return this.formatPayment(payment);\n    } catch (error) {\n      throw new Error(`Erro ao buscar pagamento: ${error.message}`);\n    }\n  }\n\n  async createPayment(paymentData) {\n    try {\n      // Validar dados do pagamento\n      const validation = validatePayment(paymentData);\n      if (!validation.isValid) {\n        throw new Error(`Dados inválidos: ${validation.errors.join(', ')}`);\n      }\n\n      // Verificar se o contrato existe\n      const contractExists = await this.paymentRepository.checkContractExists(paymentData.contract_id);\n      if (!contractExists) {\n        throw new Error('Contrato não encontrado');\n      }\n\n      // Processar dados do pagamento\n      const processedData = this.processPaymentData(paymentData);\n      \n      const payment = await this.paymentRepository.create(processedData);\n      return this.formatPayment(payment);\n    } catch (error) {\n      throw new Error(`Erro ao criar pagamento: ${error.message}`);\n    }\n  }\n\n  async updatePayment(id, paymentData) {\n    try {\n      // Verificar se o pagamento existe\n      const existingPayment = await this.paymentRepository.findById(id);\n      if (!existingPayment) {\n        throw new Error('Pagamento não encontrado');\n      }\n\n      // Não permitir alterar pagamentos já pagos\n      if (existingPayment.status === 'pago') {\n        throw new Error('Não é possível alterar pagamento já realizado');\n      }\n\n      // Validar dados do pagamento\n      const validation = validatePayment(paymentData, true); // partial validation\n      if (!validation.isValid) {\n        throw new Error(`Dados inválidos: ${validation.errors.join(', ')}`);\n      }\n\n      // Processar dados do pagamento\n      const processedData = this.processPaymentData(paymentData);\n      \n      const payment = await this.paymentRepository.update(id, processedData);\n      return this.formatPayment(payment);\n    } catch (error) {\n      throw new Error(`Erro ao atualizar pagamento: ${error.message}`);\n    }\n  }\n\n  async deletePayment(id) {\n    try {\n      // Verificar se o pagamento existe\n      const payment = await this.paymentRepository.findById(id);\n      if (!payment) {\n        throw new Error('Pagamento não encontrado');\n      }\n\n      // Não permitir excluir pagamentos já pagos\n      if (payment.status === 'pago') {\n        throw new Error('Não é possível excluir pagamento já realizado');\n      }\n\n      await this.paymentRepository.delete(id);\n      return { message: 'Pagamento excluído com sucesso' };\n    } catch (error) {\n      throw new Error(`Erro ao excluir pagamento: ${error.message}`);\n    }\n  }\n\n  async updatePaymentStatus(id, status) {\n    try {\n      const validStatuses = ['pendente', 'pago', 'atrasado', 'cancelado'];\n      if (!validStatuses.includes(status)) {\n        throw new Error('Status inválido');\n      }\n\n      const payment = await this.paymentRepository.findById(id);\n      if (!payment) {\n        throw new Error('Pagamento não encontrado');\n      }\n\n      const updateData = { status };\n      \n      // Se está marcando como pago, definir data de pagamento\n      if (status === 'pago' && !payment.payment_date) {\n        updateData.payment_date = new Date().toISOString();\n      }\n\n      const updatedPayment = await this.paymentRepository.updateStatus(id, updateData);\n      return this.formatPayment(updatedPayment);\n    } catch (error) {\n      throw new Error(`Erro ao atualizar status do pagamento: ${error.message}`);\n    }\n  }\n\n  async confirmPayment(id, confirmationData) {\n    try {\n      const payment = await this.paymentRepository.findById(id);\n      if (!payment) {\n        throw new Error('Pagamento não encontrado');\n      }\n\n      if (payment.status === 'pago') {\n        throw new Error('Pagamento já foi confirmado');\n      }\n\n      const updateData = {\n        status: 'pago',\n        payment_date: confirmationData.payment_date || new Date().toISOString(),\n        payment_method: confirmationData.payment_method || payment.payment_method,\n        notes: confirmationData.notes || payment.notes\n      };\n\n      const confirmedPayment = await this.paymentRepository.update(id, updateData);\n      return this.formatPayment(confirmedPayment);\n    } catch (error) {\n      throw new Error(`Erro ao confirmar pagamento: ${error.message}`);\n    }\n  }\n\n  async searchPayments(searchTerm, page = 1, limit = 10) {\n    try {\n      const offset = (page - 1) * limit;\n      const payments = await this.paymentRepository.search(searchTerm, offset, limit);\n      const total = await this.paymentRepository.countSearch(searchTerm);\n\n      return {\n        payments: payments.map(this.formatPayment),\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      };\n    } catch (error) {\n      throw new Error(`Erro ao buscar pagamentos: ${error.message}`);\n    }\n  }\n\n  async getOverduePayments(page = 1, limit = 10) {\n    try {\n      const offset = (page - 1) * limit;\n      const payments = await this.paymentRepository.findOverdue(offset, limit);\n      const total = await this.paymentRepository.countOverdue();\n\n      // Calcular dias de atraso para cada pagamento\n      const paymentsWithOverdue = payments.map(payment => ({\n        ...this.formatPayment(payment),\n        overdue_days: calculateOverdueDays(payment.due_date),\n        interest_amount: calculateInterest(payment.amount, payment.due_date)\n      }));\n\n      return {\n        payments: paymentsWithOverdue,\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      };\n    } catch (error) {\n      throw new Error(`Erro ao buscar pagamentos em atraso: ${error.message}`);\n    }\n  }\n\n  async getPaymentsDueToday(page = 1, limit = 10) {\n    try {\n      const offset = (page - 1) * limit;\n      const payments = await this.paymentRepository.findDueToday(offset, limit);\n      const total = await this.paymentRepository.countDueToday();\n\n      return {\n        payments: payments.map(this.formatPayment),\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      };\n    } catch (error) {\n      throw new Error(`Erro ao buscar pagamentos que vencem hoje: ${error.message}`);\n    }\n  }\n\n  async getPaymentStats(period = '30d') {\n    try {\n      const stats = await this.paymentRepository.getStats(period);\n      \n      return {\n        total_payments: stats.total_payments || 0,\n        paid_payments: stats.paid_payments || 0,\n        pending_payments: stats.pending_payments || 0,\n        overdue_payments: stats.overdue_payments || 0,\n        total_amount: formatCurrency(stats.total_amount || 0),\n        paid_amount: formatCurrency(stats.paid_amount || 0),\n        pending_amount: formatCurrency(stats.pending_amount || 0),\n        overdue_amount: formatCurrency(stats.overdue_amount || 0),\n        payment_rate: stats.total_payments > 0 \n          ? Math.round((stats.paid_payments / stats.total_payments) * 100)\n          : 0\n      };\n    } catch (error) {\n      throw new Error(`Erro ao calcular estatísticas de pagamentos: ${error.message}`);\n    }\n  }\n\n  async getRevenueChart(period = '12m', groupBy = 'month') {\n    try {\n      const chartData = await this.paymentRepository.getRevenueChart(period, groupBy);\n      \n      return chartData.map(item => ({\n        ...item,\n        amount: formatCurrency(item.amount || 0)\n      }));\n    } catch (error) {\n      throw new Error(`Erro ao gerar gráfico de receita: ${error.message}`);\n    }\n  }\n\n  async bulkUpdatePayments(paymentIds, updateData) {\n    try {\n      if (!Array.isArray(paymentIds) || paymentIds.length === 0) {\n        throw new Error('Lista de IDs de pagamentos é obrigatória');\n      }\n\n      const processedData = this.processPaymentData(updateData);\n      const updatedPayments = await this.paymentRepository.bulkUpdate(paymentIds, processedData);\n      \n      return {\n        message: `${updatedPayments.length} pagamentos atualizados com sucesso`,\n        updated_count: updatedPayments.length,\n        payments: updatedPayments.map(this.formatPayment)\n      };\n    } catch (error) {\n      throw new Error(`Erro ao atualizar pagamentos em lote: ${error.message}`);\n    }\n  }\n\n  async exportPayments(filters = {}, format = 'csv') {\n    try {\n      const payments = await this.paymentRepository.findForExport(filters);\n      \n      if (format === 'csv') {\n        return this.generateCSV(payments);\n      } else {\n        return JSON.stringify(payments.map(this.formatPayment), null, 2);\n      }\n    } catch (error) {\n      throw new Error(`Erro ao exportar pagamentos: ${error.message}`);\n    }\n  }\n\n  async getPaymentsByContract(contractId, page = 1, limit = 10) {\n    try {\n      const offset = (page - 1) * limit;\n      const payments = await this.paymentRepository.findByContract(contractId, offset, limit);\n      const total = await this.paymentRepository.countByContract(contractId);\n\n      return {\n        payments: payments.map(this.formatPayment),\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      };\n    } catch (error) {\n      throw new Error(`Erro ao buscar pagamentos do contrato: ${error.message}`);\n    }\n  }\n\n  async getPaymentsByClient(clientId, page = 1, limit = 10) {\n    try {\n      const offset = (page - 1) * limit;\n      const payments = await this.paymentRepository.findByClient(clientId, offset, limit);\n      const total = await this.paymentRepository.countByClient(clientId);\n\n      return {\n        payments: payments.map(this.formatPayment),\n        pagination: {\n          page: parseInt(page),\n          limit: parseInt(limit),\n          total,\n          totalPages: Math.ceil(total / limit)\n        }\n      };\n    } catch (error) {\n      throw new Error(`Erro ao buscar pagamentos do cliente: ${error.message}`);\n    }\n  }\n\n  async generateReceipt(id) {\n    try {\n      const payment = await this.paymentRepository.findById(id);\n      if (!payment) {\n        throw new Error('Pagamento não encontrado');\n      }\n\n      if (payment.status !== 'pago') {\n        throw new Error('Só é possível gerar recibo para pagamentos realizados');\n      }\n\n      return {\n        receipt_number: `REC-${payment.id}`,\n        payment_id: payment.id,\n        contract_number: payment.contract?.contract_number,\n        client_name: payment.contract?.client?.name,\n        amount: formatCurrency(payment.amount),\n        payment_date: formatDate(payment.payment_date),\n        payment_method: payment.payment_method,\n        generated_at: formatDate(new Date())\n      };\n    } catch (error) {\n      throw new Error(`Erro ao gerar recibo: ${error.message}`);\n    }\n  }\n\n  async sendPaymentReminder(id, method = 'email') {\n    try {\n      const payment = await this.paymentRepository.findById(id);\n      if (!payment) {\n        throw new Error('Pagamento não encontrado');\n      }\n\n      if (payment.status === 'pago') {\n        throw new Error('Não é possível enviar lembrete para pagamento já realizado');\n      }\n\n      // Aqui seria implementada a lógica de envio de lembrete\n      // Por enquanto, apenas simular o envio\n      \n      return {\n        message: `Lembrete de pagamento enviado via ${method}`,\n        payment_id: id,\n        method,\n        sent_at: new Date().toISOString()\n      };\n    } catch (error) {\n      throw new Error(`Erro ao enviar lembrete de pagamento: ${error.message}`);\n    }\n  }\n\n  // Métodos auxiliares\n  processPaymentData(data) {\n    const processed = { ...data };\n\n    // Processar datas\n    if (processed.due_date) {\n      processed.due_date = new Date(processed.due_date).toISOString();\n    }\n    if (processed.payment_date) {\n      processed.payment_date = new Date(processed.payment_date).toISOString();\n    }\n\n    // Processar valores numéricos\n    if (processed.amount) {\n      processed.amount = parseFloat(processed.amount);\n    }\n\n    // Definir status padrão\n    if (!processed.status) {\n      processed.status = 'pendente';\n    }\n\n    return processed;\n  }\n\n  formatPayment(payment) {\n    if (!payment) return null;\n\n    return {\n      ...payment,\n      amount: formatCurrency(payment.amount),\n      due_date: formatDate(payment.due_date),\n      payment_date: formatDate(payment.payment_date),\n      created_at: formatDate(payment.created_at),\n      updated_at: formatDate(payment.updated_at)\n    };\n  }\n\n  generateCSV(payments) {\n    const headers = [\n      'ID',\n      'Contrato',\n      'Cliente',\n      'Valor',\n      'Data Vencimento',\n      'Data Pagamento',\n      'Status',\n      'Método Pagamento',\n      'Parcela'\n    ];\n\n    const rows = payments.map(payment => [\n      payment.id,\n      payment.contract?.contract_number || '',\n      payment.contract?.client?.name || '',\n      payment.amount,\n      formatDate(payment.due_date),\n      formatDate(payment.payment_date),\n      payment.status,\n      payment.payment_method || '',\n      payment.installment_number || ''\n    ]);\n\n    return [headers, ...rows]\n      .map(row => row.map(field => `\"${field || ''}\"`).join(','))\n      .join('\\n');\n  }\n}\n\nmodule.exports = PaymentService;"],"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","ignoreList":[]}