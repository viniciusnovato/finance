{"version":3,"names":["_getJestObj","mock","createClient","jest","fn","from","select","mockReturnThis","insert","update","delete","eq","neq","gt","gte","lt","lte","like","ilike","in","or","and","order","range","limit","single","count","auth","signUp","signInWithPassword","signOut","getUser","getSession","storage","upload","download","remove","list","require","global","console","log","debug","info","warn","error","process","env","NODE_ENV","SUPABASE_URL","SUPABASE_ANON_KEY","SUPABASE_SERVICE_ROLE_KEY","JWT_SECRET","PORT","testUtils","createMockRequest","overrides","body","params","query","headers","user","createMockResponse","res","status","json","send","cookie","clearCookie","redirect","locals","createMockNext","mockClientData","id","name","email","phone","tax_id","type","address","street","city","state","zip_code","created_at","updated_at","mockContractData","client_id","title","description","value","start_date","end_date","mockPaymentData","contract_id","amount","due_date","paid_date","expectValidationError","result","field","message","expect","toHaveProperty","errors","toContainEqual","objectContaining","stringContaining","expectSuccessResponse","response","data","toHaveBeenCalledWith","success","expectErrorResponse","waitFor","ms","Promise","resolve","setTimeout","generateRandomString","length","chars","i","charAt","Math","floor","random","generateRandomEmail","username","domain","generateRandomCPF","digits","push","sum","join","replace","beforeEach","clearAllMocks","on","reason","promise","mockDate","Date","constructor","args","now","getTime","module","exports"],"sources":["setup.js"],"sourcesContent":["/**\n * Configuração inicial para os testes Jest\n * Define mocks globais, configurações e utilitários de teste\n */\n\n// Mock do console para testes mais limpos\nglobal.console = {\n  ...console,\n  // Desabilita logs durante os testes, exceto erros\n  log: jest.fn(),\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: console.error // Mantém erros visíveis\n};\n\n// Mock do processo para variáveis de ambiente\nprocess.env.NODE_ENV = 'test';\nprocess.env.SUPABASE_URL = 'https://test.supabase.co';\nprocess.env.SUPABASE_ANON_KEY = 'test-anon-key';\nprocess.env.SUPABASE_SERVICE_ROLE_KEY = 'test-service-key';\nprocess.env.JWT_SECRET = 'test-jwt-secret';\nprocess.env.PORT = '3001';\n\n// Mock global do Supabase\njest.mock('@supabase/supabase-js', () => ({\n  createClient: jest.fn(() => ({\n    from: jest.fn(() => ({\n      select: jest.fn().mockReturnThis(),\n      insert: jest.fn().mockReturnThis(),\n      update: jest.fn().mockReturnThis(),\n      delete: jest.fn().mockReturnThis(),\n      eq: jest.fn().mockReturnThis(),\n      neq: jest.fn().mockReturnThis(),\n      gt: jest.fn().mockReturnThis(),\n      gte: jest.fn().mockReturnThis(),\n      lt: jest.fn().mockReturnThis(),\n      lte: jest.fn().mockReturnThis(),\n      like: jest.fn().mockReturnThis(),\n      ilike: jest.fn().mockReturnThis(),\n      in: jest.fn().mockReturnThis(),\n      or: jest.fn().mockReturnThis(),\n      and: jest.fn().mockReturnThis(),\n      order: jest.fn().mockReturnThis(),\n      range: jest.fn().mockReturnThis(),\n      limit: jest.fn().mockReturnThis(),\n      single: jest.fn(),\n      count: jest.fn().mockReturnThis()\n    })),\n    auth: {\n      signUp: jest.fn(),\n      signInWithPassword: jest.fn(),\n      signOut: jest.fn(),\n      getUser: jest.fn(),\n      getSession: jest.fn()\n    },\n    storage: {\n      from: jest.fn(() => ({\n        upload: jest.fn(),\n        download: jest.fn(),\n        remove: jest.fn(),\n        list: jest.fn()\n      }))\n    }\n  }))\n}));\n\n// Utilitários de teste globais\nglobal.testUtils = {\n  // Cria um mock de request do Express\n  createMockRequest: (overrides = {}) => ({\n    body: {},\n    params: {},\n    query: {},\n    headers: {},\n    user: null,\n    ...overrides\n  }),\n\n  // Cria um mock de response do Express\n  createMockResponse: () => {\n    const res = {\n      status: jest.fn().mockReturnThis(),\n      json: jest.fn().mockReturnThis(),\n      send: jest.fn().mockReturnThis(),\n      cookie: jest.fn().mockReturnThis(),\n      clearCookie: jest.fn().mockReturnThis(),\n      redirect: jest.fn().mockReturnThis(),\n      locals: {}\n    };\n    return res;\n  },\n\n  // Cria um mock de next function\n  createMockNext: () => jest.fn(),\n\n  // Dados de teste padrão\n  mockClientData: {\n    id: '123e4567-e89b-12d3-a456-426614174000',\n    name: 'João Silva',\n    email: 'joao@email.com',\n    phone: '(11) 99999-9999',\n    tax_id: '123.456.789-00',\n    type: 'individual',\n    status: 'active',\n    address: {\n      street: 'Rua das Flores, 123',\n      city: 'São Paulo',\n      state: 'SP',\n      zip_code: '01234-567'\n    },\n    created_at: '2023-01-01T00:00:00.000Z',\n    updated_at: '2023-01-01T00:00:00.000Z'\n  },\n\n  mockContractData: {\n    id: '456e7890-e89b-12d3-a456-426614174001',\n    client_id: '123e4567-e89b-12d3-a456-426614174000',\n    title: 'Contrato de Prestação de Serviços',\n    description: 'Desenvolvimento de sistema web',\n    value: 10000.00,\n    status: 'active',\n    start_date: '2023-01-01',\n    end_date: '2023-12-31',\n    created_at: '2023-01-01T00:00:00.000Z',\n    updated_at: '2023-01-01T00:00:00.000Z'\n  },\n\n  mockPaymentData: {\n    id: '789e0123-e89b-12d3-a456-426614174002',\n    contract_id: '456e7890-e89b-12d3-a456-426614174001',\n    client_id: '123e4567-e89b-12d3-a456-426614174000',\n    amount: 1000.00,\n    due_date: '2023-02-01',\n    paid_date: null,\n    status: 'pending',\n    description: 'Parcela 1/10',\n    created_at: '2023-01-01T00:00:00.000Z',\n    updated_at: '2023-01-01T00:00:00.000Z'\n  },\n\n  // Helpers para validação\n  expectValidationError: (result, field, message) => {\n    expect(result).toHaveProperty('errors');\n    expect(result.errors).toContainEqual(\n      expect.objectContaining({\n        field,\n        message: expect.stringContaining(message)\n      })\n    );\n  },\n\n  expectSuccessResponse: (response, data = null) => {\n    expect(response.status).toHaveBeenCalledWith(200);\n    if (data) {\n      expect(response.json).toHaveBeenCalledWith(\n        expect.objectContaining({\n          success: true,\n          data\n        })\n      );\n    }\n  },\n\n  expectErrorResponse: (response, status, message) => {\n    expect(response.status).toHaveBeenCalledWith(status);\n    expect(response.json).toHaveBeenCalledWith(\n      expect.objectContaining({\n        success: false,\n        error: expect.objectContaining({\n          message: expect.stringContaining(message)\n        })\n      })\n    );\n  },\n\n  // Helper para aguardar promises\n  waitFor: (ms = 100) => new Promise(resolve => setTimeout(resolve, ms)),\n\n  // Helper para criar dados aleatórios\n  generateRandomString: (length = 10) => {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n  },\n\n  generateRandomEmail: () => {\n    const username = global.testUtils.generateRandomString(8);\n    const domain = global.testUtils.generateRandomString(5);\n    return `${username}@${domain}.com`;\n  },\n\n  generateRandomCPF: () => {\n    // Gera um CPF válido para testes\n    const digits = [];\n    for (let i = 0; i < 9; i++) {\n      digits.push(Math.floor(Math.random() * 10));\n    }\n    \n    // Calcula primeiro dígito verificador\n    let sum = 0;\n    for (let i = 0; i < 9; i++) {\n      sum += digits[i] * (10 - i);\n    }\n    digits.push(((sum * 10) % 11) % 10);\n    \n    // Calcula segundo dígito verificador\n    sum = 0;\n    for (let i = 0; i < 10; i++) {\n      sum += digits[i] * (11 - i);\n    }\n    digits.push(((sum * 10) % 11) % 10);\n    \n    return digits.join('').replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, '$1.$2.$3-$4');\n  }\n};\n\n// Configurações de timeout para testes assíncronos\njest.setTimeout(10000);\n\n// Limpa todos os mocks antes de cada teste\nbeforeEach(() => {\n  jest.clearAllMocks();\n});\n\n// Configuração para capturar erros não tratados\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\n});\n\nprocess.on('uncaughtException', (error) => {\n  console.error('Uncaught Exception:', error);\n});\n\n// Mock de Date para testes determinísticos\nconst mockDate = new Date('2023-01-01T00:00:00.000Z');\nglobal.Date = class extends Date {\n  constructor(...args) {\n    if (args.length === 0) {\n      return mockDate;\n    }\n    return new Date(...args);\n  }\n  \n  static now() {\n    return mockDate.getTime();\n  }\n};\n\n// Exporta utilitários para uso nos testes\nmodule.exports = {\n  testUtils: global.testUtils\n};"],"mappings":"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","ignoreList":[]}