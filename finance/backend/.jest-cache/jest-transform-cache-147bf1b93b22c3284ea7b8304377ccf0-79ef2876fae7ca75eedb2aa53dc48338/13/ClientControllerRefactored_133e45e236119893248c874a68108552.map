{"version":3,"names":["cov_2chpgwf5he","actualCoverage","ClientService","s","require","asyncHandler","HttpStatusCodes","ErrorCodes","SuccessMessages","ResponseHelper","ClientControllerRefactored","getAllClients","req","res","f","queryParams","_extractQueryParams","query","clientsData","getClients","sendSuccess","error","_handleGetClientsError","getClientById","id","params","_isValidId","b","sendError","BAD_REQUEST","INVALID_CLIENT_ID","client","NOT_FOUND","CLIENT_NOT_FOUND","_handleGetClientError","createNewClient","clientData","body","newClient","createClient","message","CLIENT_CREATED","CREATED","_handleCreateClientError","updateExistingClient","updateData","updatedClient","updateClient","CLIENT_UPDATED","_handleUpdateClientError","removeClient","wasDeleted","deleteClient","CLIENT_DELETED","_handleDeleteClientError","getClientContracts","paginationParams","_extractPaginationParams","contractsData","_handleGetContractsError","getClientPayments","paymentsData","_handleGetPaymentsError","searchClientsByTerm","q","searchTerm","limit","_isValidSearchTerm","INVALID_SEARCH_TERM","clients","searchClients","trim","parseInt","_handleSearchError","page","search","status","sort_by","sort_order","sortBy","sortOrder","length","term","console","INTERNAL_SERVER_ERROR","CLIENTS_FETCH_ERROR","CLIENT_FETCH_ERROR","includes","CONFLICT","CLIENT_ALREADY_EXISTS","CLIENT_CREATE_ERROR","CLIENT_UPDATE_ERROR","CLIENT_HAS_CONTRACTS","CLIENT_DELETE_ERROR","CLIENT_CONTRACTS_FETCH_ERROR","CLIENT_PAYMENTS_FETCH_ERROR","CLIENT_SEARCH_ERROR","module","exports"],"sources":["ClientControllerRefactored.js"],"sourcesContent":["const { ClientService } = require('../services/ClientService');\nconst { asyncHandler } = require('../middleware/errorMiddleware');\nconst { HttpStatusCodes, ErrorCodes, SuccessMessages } = require('../utils/constants');\nconst { ResponseHelper } = require('../utils/responseHelper');\n\n/**\n * Controller refatorado para gerenciamento de clientes\n * Segue princípios de Clean Code: funções pequenas, nomes claros, responsabilidade única\n */\nclass ClientControllerRefactored {\n  /**\n   * Lista clientes com paginação e filtros\n   * @route GET /api/clients\n   * @access Private\n   */\n  static getAllClients = asyncHandler(async (req, res) => {\n    const queryParams = ClientControllerRefactored._extractQueryParams(req.query);\n    \n    try {\n      const clientsData = await ClientService.getClients(queryParams);\n      ResponseHelper.sendSuccess(res, clientsData);\n    } catch (error) {\n      ClientControllerRefactored._handleGetClientsError(res, error);\n    }\n  });\n\n  /**\n   * Busca cliente específico por ID\n   * @route GET /api/clients/:id\n   * @access Private\n   */\n  static getClientById = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    \n    if (!ClientControllerRefactored._isValidId(id)) {\n      return ResponseHelper.sendError(res, \n        HttpStatusCodes.BAD_REQUEST, \n        'ID do cliente inválido', \n        ErrorCodes.INVALID_CLIENT_ID\n      );\n    }\n\n    try {\n      const client = await ClientService.getClientById(id);\n      \n      if (!client) {\n        return ResponseHelper.sendError(res, \n          HttpStatusCodes.NOT_FOUND, \n          'Cliente não encontrado', \n          ErrorCodes.CLIENT_NOT_FOUND\n        );\n      }\n\n      ResponseHelper.sendSuccess(res, { client });\n    } catch (error) {\n      ClientControllerRefactored._handleGetClientError(res, error);\n    }\n  });\n\n  /**\n   * Cria novo cliente\n   * @route POST /api/clients\n   * @access Private\n   */\n  static createNewClient = asyncHandler(async (req, res) => {\n    const clientData = req.body;\n\n    try {\n      const newClient = await ClientService.createClient(clientData);\n      \n      ResponseHelper.sendSuccess(res, \n        { \n          message: SuccessMessages.CLIENT_CREATED, \n          client: newClient \n        }, \n        HttpStatusCodes.CREATED\n      );\n    } catch (error) {\n      ClientControllerRefactored._handleCreateClientError(res, error);\n    }\n  });\n\n  /**\n   * Atualiza dados do cliente\n   * @route PUT /api/clients/:id\n   * @access Private\n   */\n  static updateExistingClient = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    if (!ClientControllerRefactored._isValidId(id)) {\n      return ResponseHelper.sendError(res, \n        HttpStatusCodes.BAD_REQUEST, \n        'ID do cliente inválido', \n        ErrorCodes.INVALID_CLIENT_ID\n      );\n    }\n\n    try {\n      const updatedClient = await ClientService.updateClient(id, updateData);\n      \n      if (!updatedClient) {\n        return ResponseHelper.sendError(res, \n          HttpStatusCodes.NOT_FOUND, \n          'Cliente não encontrado', \n          ErrorCodes.CLIENT_NOT_FOUND\n        );\n      }\n\n      ResponseHelper.sendSuccess(res, {\n        message: SuccessMessages.CLIENT_UPDATED,\n        client: updatedClient\n      });\n    } catch (error) {\n      ClientControllerRefactored._handleUpdateClientError(res, error);\n    }\n  });\n\n  /**\n   * Remove cliente do sistema\n   * @route DELETE /api/clients/:id\n   * @access Private\n   */\n  static removeClient = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n\n    if (!ClientControllerRefactored._isValidId(id)) {\n      return ResponseHelper.sendError(res, \n        HttpStatusCodes.BAD_REQUEST, \n        'ID do cliente inválido', \n        ErrorCodes.INVALID_CLIENT_ID\n      );\n    }\n\n    try {\n      const wasDeleted = await ClientService.deleteClient(id);\n      \n      if (!wasDeleted) {\n        return ResponseHelper.sendError(res, \n          HttpStatusCodes.NOT_FOUND, \n          'Cliente não encontrado', \n          ErrorCodes.CLIENT_NOT_FOUND\n        );\n      }\n\n      ResponseHelper.sendSuccess(res, {\n        message: SuccessMessages.CLIENT_DELETED\n      });\n    } catch (error) {\n      ClientControllerRefactored._handleDeleteClientError(res, error);\n    }\n  });\n\n  /**\n   * Busca contratos do cliente\n   * @route GET /api/clients/:id/contracts\n   * @access Private\n   */\n  static getClientContracts = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    const paginationParams = ClientControllerRefactored._extractPaginationParams(req.query);\n\n    if (!ClientControllerRefactored._isValidId(id)) {\n      return ResponseHelper.sendError(res, \n        HttpStatusCodes.BAD_REQUEST, \n        'ID do cliente inválido', \n        ErrorCodes.INVALID_CLIENT_ID\n      );\n    }\n\n    try {\n      const contractsData = await ClientService.getClientContracts(id, paginationParams);\n      ResponseHelper.sendSuccess(res, contractsData);\n    } catch (error) {\n      ClientControllerRefactored._handleGetContractsError(res, error);\n    }\n  });\n\n  /**\n   * Busca pagamentos do cliente\n   * @route GET /api/clients/:id/payments\n   * @access Private\n   */\n  static getClientPayments = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    const paginationParams = ClientControllerRefactored._extractPaginationParams(req.query);\n\n    if (!ClientControllerRefactored._isValidId(id)) {\n      return ResponseHelper.sendError(res, \n        HttpStatusCodes.BAD_REQUEST, \n        'ID do cliente inválido', \n        ErrorCodes.INVALID_CLIENT_ID\n      );\n    }\n\n    try {\n      const paymentsData = await ClientService.getClientPayments(id, paginationParams);\n      ResponseHelper.sendSuccess(res, paymentsData);\n    } catch (error) {\n      ClientControllerRefactored._handleGetPaymentsError(res, error);\n    }\n  });\n\n  /**\n   * Busca clientes por termo de pesquisa\n   * @route GET /api/clients/search\n   * @access Private\n   */\n  static searchClientsByTerm = asyncHandler(async (req, res) => {\n    const { q: searchTerm, limit = 10 } = req.query;\n\n    if (!ClientControllerRefactored._isValidSearchTerm(searchTerm)) {\n      return ResponseHelper.sendError(res, \n        HttpStatusCodes.BAD_REQUEST, \n        'Termo de busca deve ter pelo menos 2 caracteres', \n        ErrorCodes.INVALID_SEARCH_TERM\n      );\n    }\n\n    try {\n      const clients = await ClientService.searchClients(\n        searchTerm.trim(), \n        parseInt(limit)\n      );\n      ResponseHelper.sendSuccess(res, { clients });\n    } catch (error) {\n      ClientControllerRefactored._handleSearchError(res, error);\n    }\n  });\n\n  // Métodos privados para validação e extração de parâmetros\n  static _extractQueryParams(query) {\n    const {\n      page = 1,\n      limit = 10,\n      search = '',\n      status = '',\n      sort_by = 'created_at',\n      sort_order = 'desc'\n    } = query;\n\n    return {\n      page: parseInt(page),\n      limit: parseInt(limit),\n      search,\n      status,\n      sortBy: sort_by,\n      sortOrder: sort_order\n    };\n  }\n\n  static _extractPaginationParams(query) {\n    const { page = 1, limit = 10, status = '' } = query;\n    \n    return {\n      page: parseInt(page),\n      limit: parseInt(limit),\n      status\n    };\n  }\n\n  static _isValidId(id) {\n    return id && id.trim().length > 0;\n  }\n\n  static _isValidSearchTerm(term) {\n    return term && term.trim().length >= 2;\n  }\n\n  // Métodos privados para tratamento de erros específicos\n  static _handleGetClientsError(res, error) {\n    console.error('Erro ao buscar clientes:', error);\n    ResponseHelper.sendError(res, \n      HttpStatusCodes.INTERNAL_SERVER_ERROR, \n      'Erro interno do servidor', \n      ErrorCodes.CLIENTS_FETCH_ERROR\n    );\n  }\n\n  static _handleGetClientError(res, error) {\n    console.error('Erro ao buscar cliente:', error);\n    ResponseHelper.sendError(res, \n      HttpStatusCodes.INTERNAL_SERVER_ERROR, \n      'Erro interno do servidor', \n      ErrorCodes.CLIENT_FETCH_ERROR\n    );\n  }\n\n  static _handleCreateClientError(res, error) {\n    console.error('Erro ao criar cliente:', error);\n    \n    if (error.message.includes('já existe')) {\n      return ResponseHelper.sendError(res, \n        HttpStatusCodes.CONFLICT, \n        error.message, \n        ErrorCodes.CLIENT_ALREADY_EXISTS\n      );\n    }\n    \n    ResponseHelper.sendError(res, \n      HttpStatusCodes.INTERNAL_SERVER_ERROR, \n      'Erro interno do servidor', \n      ErrorCodes.CLIENT_CREATE_ERROR\n    );\n  }\n\n  static _handleUpdateClientError(res, error) {\n    console.error('Erro ao atualizar cliente:', error);\n    \n    if (error.message.includes('já existe')) {\n      return ResponseHelper.sendError(res, \n        HttpStatusCodes.CONFLICT, \n        error.message, \n        ErrorCodes.CLIENT_ALREADY_EXISTS\n      );\n    }\n    \n    ResponseHelper.sendError(res, \n      HttpStatusCodes.INTERNAL_SERVER_ERROR, \n      'Erro interno do servidor', \n      ErrorCodes.CLIENT_UPDATE_ERROR\n    );\n  }\n\n  static _handleDeleteClientError(res, error) {\n    console.error('Erro ao deletar cliente:', error);\n    \n    if (error.message.includes('possui contratos')) {\n      return ResponseHelper.sendError(res, \n        HttpStatusCodes.CONFLICT, \n        error.message, \n        ErrorCodes.CLIENT_HAS_CONTRACTS\n      );\n    }\n    \n    ResponseHelper.sendError(res, \n      HttpStatusCodes.INTERNAL_SERVER_ERROR, \n      'Erro interno do servidor', \n      ErrorCodes.CLIENT_DELETE_ERROR\n    );\n  }\n\n  static _handleGetContractsError(res, error) {\n    console.error('Erro ao buscar contratos do cliente:', error);\n    ResponseHelper.sendError(res, \n      HttpStatusCodes.INTERNAL_SERVER_ERROR, \n      'Erro interno do servidor', \n      ErrorCodes.CLIENT_CONTRACTS_FETCH_ERROR\n    );\n  }\n\n  static _handleGetPaymentsError(res, error) {\n    console.error('Erro ao buscar pagamentos do cliente:', error);\n    ResponseHelper.sendError(res, \n      HttpStatusCodes.INTERNAL_SERVER_ERROR, \n      'Erro interno do servidor', \n      ErrorCodes.CLIENT_PAYMENTS_FETCH_ERROR\n    );\n  }\n\n  static _handleSearchError(res, error) {\n    console.error('Erro ao buscar clientes:', error);\n    ResponseHelper.sendError(res, \n      HttpStatusCodes.INTERNAL_SERVER_ERROR, \n      'Erro interno do servidor', \n      ErrorCodes.CLIENT_SEARCH_ERROR\n    );\n  }\n}\n\nmodule.exports = { ClientControllerRefactored };"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAM;EAAEE;AAAc,CAAC;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,2BAA2B,CAAC;AAC9D,MAAM;EAAEC;AAAa,CAAC;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,+BAA+B,CAAC;AACjE,MAAM;EAAEE,eAAe;EAAEC,UAAU;EAAEC;AAAgB,CAAC;AAAA;AAAA,CAAAR,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,oBAAoB,CAAC;AACtF,MAAM;EAAEK;AAAe,CAAC;AAAA;AAAA,CAAAT,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,yBAAyB,CAAC;;AAE7D;AACA;AACA;AACA;AACA,MAAMM,0BAA0B,CAAC;EAC/B;AACF;AACA;AACA;AACA;EACE,OAAOC,aAAa;EAAA;EAAA,CAAAX,cAAA,GAAAG,CAAA,OAAGE,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;IAAA;IAAAb,cAAA,GAAAc,CAAA;IACtD,MAAMC,WAAW;IAAA;IAAA,CAAAf,cAAA,GAAAG,CAAA,OAAGO,0BAA0B,CAACM,mBAAmB,CAACJ,GAAG,CAACK,KAAK,CAAC;IAAC;IAAAjB,cAAA,GAAAG,CAAA;IAE9E,IAAI;MACF,MAAMe,WAAW;MAAA;MAAA,CAAAlB,cAAA,GAAAG,CAAA,OAAG,MAAMD,aAAa,CAACiB,UAAU,CAACJ,WAAW,CAAC;MAAC;MAAAf,cAAA,GAAAG,CAAA;MAChEM,cAAc,CAACW,WAAW,CAACP,GAAG,EAAEK,WAAW,CAAC;IAC9C,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA;MAAArB,cAAA,GAAAG,CAAA;MACdO,0BAA0B,CAACY,sBAAsB,CAACT,GAAG,EAAEQ,KAAK,CAAC;IAC/D;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,OAAOE,aAAa;EAAA;EAAA,CAAAvB,cAAA,GAAAG,CAAA,QAAGE,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;IAAA;IAAAb,cAAA,GAAAc,CAAA;IACtD,MAAM;MAAEU;IAAG,CAAC;IAAA;IAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAGS,GAAG,CAACa,MAAM;IAAC;IAAAzB,cAAA,GAAAG,CAAA;IAE1B,IAAI,CAACO,0BAA0B,CAACgB,UAAU,CAACF,EAAE,CAAC,EAAE;MAAA;MAAAxB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC9C,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAACuB,WAAW,EAC3B,wBAAwB,EACxBtB,UAAU,CAACuB,iBACb,CAAC;IACH,CAAC;IAAA;IAAA;MAAA9B,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAM4B,MAAM;MAAA;MAAA,CAAA/B,cAAA,GAAAG,CAAA,QAAG,MAAMD,aAAa,CAACqB,aAAa,CAACC,EAAE,CAAC;MAAC;MAAAxB,cAAA,GAAAG,CAAA;MAErD,IAAI,CAAC4B,MAAM,EAAE;QAAA;QAAA/B,cAAA,GAAA2B,CAAA;QAAA3B,cAAA,GAAAG,CAAA;QACX,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAAC0B,SAAS,EACzB,wBAAwB,EACxBzB,UAAU,CAAC0B,gBACb,CAAC;MACH,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAA2B,CAAA;MAAA;MAAA3B,cAAA,GAAAG,CAAA;MAEDM,cAAc,CAACW,WAAW,CAACP,GAAG,EAAE;QAAEkB;MAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,OAAOV,KAAK,EAAE;MAAA;MAAArB,cAAA,GAAAG,CAAA;MACdO,0BAA0B,CAACwB,qBAAqB,CAACrB,GAAG,EAAEQ,KAAK,CAAC;IAC9D;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,OAAOc,eAAe;EAAA;EAAA,CAAAnC,cAAA,GAAAG,CAAA,QAAGE,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;IAAA;IAAAb,cAAA,GAAAc,CAAA;IACxD,MAAMsB,UAAU;IAAA;IAAA,CAAApC,cAAA,GAAAG,CAAA,QAAGS,GAAG,CAACyB,IAAI;IAAC;IAAArC,cAAA,GAAAG,CAAA;IAE5B,IAAI;MACF,MAAMmC,SAAS;MAAA;MAAA,CAAAtC,cAAA,GAAAG,CAAA,QAAG,MAAMD,aAAa,CAACqC,YAAY,CAACH,UAAU,CAAC;MAAC;MAAApC,cAAA,GAAAG,CAAA;MAE/DM,cAAc,CAACW,WAAW,CAACP,GAAG,EAC5B;QACE2B,OAAO,EAAEhC,eAAe,CAACiC,cAAc;QACvCV,MAAM,EAAEO;MACV,CAAC,EACDhC,eAAe,CAACoC,OAClB,CAAC;IACH,CAAC,CAAC,OAAOrB,KAAK,EAAE;MAAA;MAAArB,cAAA,GAAAG,CAAA;MACdO,0BAA0B,CAACiC,wBAAwB,CAAC9B,GAAG,EAAEQ,KAAK,CAAC;IACjE;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,OAAOuB,oBAAoB;EAAA;EAAA,CAAA5C,cAAA,GAAAG,CAAA,QAAGE,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;IAAA;IAAAb,cAAA,GAAAc,CAAA;IAC7D,MAAM;MAAEU;IAAG,CAAC;IAAA;IAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAGS,GAAG,CAACa,MAAM;IACzB,MAAMoB,UAAU;IAAA;IAAA,CAAA7C,cAAA,GAAAG,CAAA,QAAGS,GAAG,CAACyB,IAAI;IAAC;IAAArC,cAAA,GAAAG,CAAA;IAE5B,IAAI,CAACO,0BAA0B,CAACgB,UAAU,CAACF,EAAE,CAAC,EAAE;MAAA;MAAAxB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC9C,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAACuB,WAAW,EAC3B,wBAAwB,EACxBtB,UAAU,CAACuB,iBACb,CAAC;IACH,CAAC;IAAA;IAAA;MAAA9B,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAM2C,aAAa;MAAA;MAAA,CAAA9C,cAAA,GAAAG,CAAA,QAAG,MAAMD,aAAa,CAAC6C,YAAY,CAACvB,EAAE,EAAEqB,UAAU,CAAC;MAAC;MAAA7C,cAAA,GAAAG,CAAA;MAEvE,IAAI,CAAC2C,aAAa,EAAE;QAAA;QAAA9C,cAAA,GAAA2B,CAAA;QAAA3B,cAAA,GAAAG,CAAA;QAClB,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAAC0B,SAAS,EACzB,wBAAwB,EACxBzB,UAAU,CAAC0B,gBACb,CAAC;MACH,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAA2B,CAAA;MAAA;MAAA3B,cAAA,GAAAG,CAAA;MAEDM,cAAc,CAACW,WAAW,CAACP,GAAG,EAAE;QAC9B2B,OAAO,EAAEhC,eAAe,CAACwC,cAAc;QACvCjB,MAAM,EAAEe;MACV,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOzB,KAAK,EAAE;MAAA;MAAArB,cAAA,GAAAG,CAAA;MACdO,0BAA0B,CAACuC,wBAAwB,CAACpC,GAAG,EAAEQ,KAAK,CAAC;IACjE;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,OAAO6B,YAAY;EAAA;EAAA,CAAAlD,cAAA,GAAAG,CAAA,QAAGE,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;IAAA;IAAAb,cAAA,GAAAc,CAAA;IACrD,MAAM;MAAEU;IAAG,CAAC;IAAA;IAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAGS,GAAG,CAACa,MAAM;IAAC;IAAAzB,cAAA,GAAAG,CAAA;IAE1B,IAAI,CAACO,0BAA0B,CAACgB,UAAU,CAACF,EAAE,CAAC,EAAE;MAAA;MAAAxB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC9C,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAACuB,WAAW,EAC3B,wBAAwB,EACxBtB,UAAU,CAACuB,iBACb,CAAC;IACH,CAAC;IAAA;IAAA;MAAA9B,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAMgD,UAAU;MAAA;MAAA,CAAAnD,cAAA,GAAAG,CAAA,QAAG,MAAMD,aAAa,CAACkD,YAAY,CAAC5B,EAAE,CAAC;MAAC;MAAAxB,cAAA,GAAAG,CAAA;MAExD,IAAI,CAACgD,UAAU,EAAE;QAAA;QAAAnD,cAAA,GAAA2B,CAAA;QAAA3B,cAAA,GAAAG,CAAA;QACf,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAAC0B,SAAS,EACzB,wBAAwB,EACxBzB,UAAU,CAAC0B,gBACb,CAAC;MACH,CAAC;MAAA;MAAA;QAAAjC,cAAA,GAAA2B,CAAA;MAAA;MAAA3B,cAAA,GAAAG,CAAA;MAEDM,cAAc,CAACW,WAAW,CAACP,GAAG,EAAE;QAC9B2B,OAAO,EAAEhC,eAAe,CAAC6C;MAC3B,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOhC,KAAK,EAAE;MAAA;MAAArB,cAAA,GAAAG,CAAA;MACdO,0BAA0B,CAAC4C,wBAAwB,CAACzC,GAAG,EAAEQ,KAAK,CAAC;IACjE;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,OAAOkC,kBAAkB;EAAA;EAAA,CAAAvD,cAAA,GAAAG,CAAA,QAAGE,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;IAAA;IAAAb,cAAA,GAAAc,CAAA;IAC3D,MAAM;MAAEU;IAAG,CAAC;IAAA;IAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAGS,GAAG,CAACa,MAAM;IACzB,MAAM+B,gBAAgB;IAAA;IAAA,CAAAxD,cAAA,GAAAG,CAAA,QAAGO,0BAA0B,CAAC+C,wBAAwB,CAAC7C,GAAG,CAACK,KAAK,CAAC;IAAC;IAAAjB,cAAA,GAAAG,CAAA;IAExF,IAAI,CAACO,0BAA0B,CAACgB,UAAU,CAACF,EAAE,CAAC,EAAE;MAAA;MAAAxB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC9C,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAACuB,WAAW,EAC3B,wBAAwB,EACxBtB,UAAU,CAACuB,iBACb,CAAC;IACH,CAAC;IAAA;IAAA;MAAA9B,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAMuD,aAAa;MAAA;MAAA,CAAA1D,cAAA,GAAAG,CAAA,QAAG,MAAMD,aAAa,CAACqD,kBAAkB,CAAC/B,EAAE,EAAEgC,gBAAgB,CAAC;MAAC;MAAAxD,cAAA,GAAAG,CAAA;MACnFM,cAAc,CAACW,WAAW,CAACP,GAAG,EAAE6C,aAAa,CAAC;IAChD,CAAC,CAAC,OAAOrC,KAAK,EAAE;MAAA;MAAArB,cAAA,GAAAG,CAAA;MACdO,0BAA0B,CAACiD,wBAAwB,CAAC9C,GAAG,EAAEQ,KAAK,CAAC;IACjE;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,OAAOuC,iBAAiB;EAAA;EAAA,CAAA5D,cAAA,GAAAG,CAAA,QAAGE,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;IAAA;IAAAb,cAAA,GAAAc,CAAA;IAC1D,MAAM;MAAEU;IAAG,CAAC;IAAA;IAAA,CAAAxB,cAAA,GAAAG,CAAA,QAAGS,GAAG,CAACa,MAAM;IACzB,MAAM+B,gBAAgB;IAAA;IAAA,CAAAxD,cAAA,GAAAG,CAAA,QAAGO,0BAA0B,CAAC+C,wBAAwB,CAAC7C,GAAG,CAACK,KAAK,CAAC;IAAC;IAAAjB,cAAA,GAAAG,CAAA;IAExF,IAAI,CAACO,0BAA0B,CAACgB,UAAU,CAACF,EAAE,CAAC,EAAE;MAAA;MAAAxB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC9C,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAACuB,WAAW,EAC3B,wBAAwB,EACxBtB,UAAU,CAACuB,iBACb,CAAC;IACH,CAAC;IAAA;IAAA;MAAA9B,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAM0D,YAAY;MAAA;MAAA,CAAA7D,cAAA,GAAAG,CAAA,QAAG,MAAMD,aAAa,CAAC0D,iBAAiB,CAACpC,EAAE,EAAEgC,gBAAgB,CAAC;MAAC;MAAAxD,cAAA,GAAAG,CAAA;MACjFM,cAAc,CAACW,WAAW,CAACP,GAAG,EAAEgD,YAAY,CAAC;IAC/C,CAAC,CAAC,OAAOxC,KAAK,EAAE;MAAA;MAAArB,cAAA,GAAAG,CAAA;MACdO,0BAA0B,CAACoD,uBAAuB,CAACjD,GAAG,EAAEQ,KAAK,CAAC;IAChE;EACF,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,OAAO0C,mBAAmB;EAAA;EAAA,CAAA/D,cAAA,GAAAG,CAAA,QAAGE,YAAY,CAAC,OAAOO,GAAG,EAAEC,GAAG,KAAK;IAAA;IAAAb,cAAA,GAAAc,CAAA;IAC5D,MAAM;MAAEkD,CAAC,EAAEC,UAAU;MAAEC,KAAK;MAAA;MAAA,CAAAlE,cAAA,GAAA2B,CAAA,UAAG,EAAE;IAAC,CAAC;IAAA;IAAA,CAAA3B,cAAA,GAAAG,CAAA,QAAGS,GAAG,CAACK,KAAK;IAAC;IAAAjB,cAAA,GAAAG,CAAA;IAEhD,IAAI,CAACO,0BAA0B,CAACyD,kBAAkB,CAACF,UAAU,CAAC,EAAE;MAAA;MAAAjE,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC9D,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAACuB,WAAW,EAC3B,iDAAiD,EACjDtB,UAAU,CAAC6D,mBACb,CAAC;IACH,CAAC;IAAA;IAAA;MAAApE,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAED,IAAI;MACF,MAAMkE,OAAO;MAAA;MAAA,CAAArE,cAAA,GAAAG,CAAA,QAAG,MAAMD,aAAa,CAACoE,aAAa,CAC/CL,UAAU,CAACM,IAAI,CAAC,CAAC,EACjBC,QAAQ,CAACN,KAAK,CAChB,CAAC;MAAC;MAAAlE,cAAA,GAAAG,CAAA;MACFM,cAAc,CAACW,WAAW,CAACP,GAAG,EAAE;QAAEwD;MAAQ,CAAC,CAAC;IAC9C,CAAC,CAAC,OAAOhD,KAAK,EAAE;MAAA;MAAArB,cAAA,GAAAG,CAAA;MACdO,0BAA0B,CAAC+D,kBAAkB,CAAC5D,GAAG,EAAEQ,KAAK,CAAC;IAC3D;EACF,CAAC,CAAC;;EAEF;EACA,OAAOL,mBAAmBA,CAACC,KAAK,EAAE;IAAA;IAAAjB,cAAA,GAAAc,CAAA;IAChC,MAAM;MACJ4D,IAAI;MAAA;MAAA,CAAA1E,cAAA,GAAA2B,CAAA,WAAG,CAAC;MACRuC,KAAK;MAAA;MAAA,CAAAlE,cAAA,GAAA2B,CAAA,WAAG,EAAE;MACVgD,MAAM;MAAA;MAAA,CAAA3E,cAAA,GAAA2B,CAAA,WAAG,EAAE;MACXiD,MAAM;MAAA;MAAA,CAAA5E,cAAA,GAAA2B,CAAA,WAAG,EAAE;MACXkD,OAAO;MAAA;MAAA,CAAA7E,cAAA,GAAA2B,CAAA,WAAG,YAAY;MACtBmD,UAAU;MAAA;MAAA,CAAA9E,cAAA,GAAA2B,CAAA,WAAG,MAAM;IACrB,CAAC;IAAA;IAAA,CAAA3B,cAAA,GAAAG,CAAA,QAAGc,KAAK;IAAC;IAAAjB,cAAA,GAAAG,CAAA;IAEV,OAAO;MACLuE,IAAI,EAAEF,QAAQ,CAACE,IAAI,CAAC;MACpBR,KAAK,EAAEM,QAAQ,CAACN,KAAK,CAAC;MACtBS,MAAM;MACNC,MAAM;MACNG,MAAM,EAAEF,OAAO;MACfG,SAAS,EAAEF;IACb,CAAC;EACH;EAEA,OAAOrB,wBAAwBA,CAACxC,KAAK,EAAE;IAAA;IAAAjB,cAAA,GAAAc,CAAA;IACrC,MAAM;MAAE4D,IAAI;MAAA;MAAA,CAAA1E,cAAA,GAAA2B,CAAA,WAAG,CAAC;MAAEuC,KAAK;MAAA;MAAA,CAAAlE,cAAA,GAAA2B,CAAA,WAAG,EAAE;MAAEiD,MAAM;MAAA;MAAA,CAAA5E,cAAA,GAAA2B,CAAA,WAAG,EAAE;IAAC,CAAC;IAAA;IAAA,CAAA3B,cAAA,GAAAG,CAAA,QAAGc,KAAK;IAAC;IAAAjB,cAAA,GAAAG,CAAA;IAEpD,OAAO;MACLuE,IAAI,EAAEF,QAAQ,CAACE,IAAI,CAAC;MACpBR,KAAK,EAAEM,QAAQ,CAACN,KAAK,CAAC;MACtBU;IACF,CAAC;EACH;EAEA,OAAOlD,UAAUA,CAACF,EAAE,EAAE;IAAA;IAAAxB,cAAA,GAAAc,CAAA;IAAAd,cAAA,GAAAG,CAAA;IACpB,OAAO,2BAAAH,cAAA,GAAA2B,CAAA,WAAAH,EAAE;IAAA;IAAA,CAAAxB,cAAA,GAAA2B,CAAA,WAAIH,EAAE,CAAC+C,IAAI,CAAC,CAAC,CAACU,MAAM,GAAG,CAAC;EACnC;EAEA,OAAOd,kBAAkBA,CAACe,IAAI,EAAE;IAAA;IAAAlF,cAAA,GAAAc,CAAA;IAAAd,cAAA,GAAAG,CAAA;IAC9B,OAAO,2BAAAH,cAAA,GAAA2B,CAAA,WAAAuD,IAAI;IAAA;IAAA,CAAAlF,cAAA,GAAA2B,CAAA,WAAIuD,IAAI,CAACX,IAAI,CAAC,CAAC,CAACU,MAAM,IAAI,CAAC;EACxC;;EAEA;EACA,OAAO3D,sBAAsBA,CAACT,GAAG,EAAEQ,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAc,CAAA;IAAAd,cAAA,GAAAG,CAAA;IACxCgF,OAAO,CAAC9D,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAG,CAAA;IACjDM,cAAc,CAACmB,SAAS,CAACf,GAAG,EAC1BP,eAAe,CAAC8E,qBAAqB,EACrC,0BAA0B,EAC1B7E,UAAU,CAAC8E,mBACb,CAAC;EACH;EAEA,OAAOnD,qBAAqBA,CAACrB,GAAG,EAAEQ,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAc,CAAA;IAAAd,cAAA,GAAAG,CAAA;IACvCgF,OAAO,CAAC9D,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAG,CAAA;IAChDM,cAAc,CAACmB,SAAS,CAACf,GAAG,EAC1BP,eAAe,CAAC8E,qBAAqB,EACrC,0BAA0B,EAC1B7E,UAAU,CAAC+E,kBACb,CAAC;EACH;EAEA,OAAO3C,wBAAwBA,CAAC9B,GAAG,EAAEQ,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAc,CAAA;IAAAd,cAAA,GAAAG,CAAA;IAC1CgF,OAAO,CAAC9D,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAG,CAAA;IAE/C,IAAIkB,KAAK,CAACmB,OAAO,CAAC+C,QAAQ,CAAC,WAAW,CAAC,EAAE;MAAA;MAAAvF,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACvC,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAACkF,QAAQ,EACxBnE,KAAK,CAACmB,OAAO,EACbjC,UAAU,CAACkF,qBACb,CAAC;IACH,CAAC;IAAA;IAAA;MAAAzF,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAEDM,cAAc,CAACmB,SAAS,CAACf,GAAG,EAC1BP,eAAe,CAAC8E,qBAAqB,EACrC,0BAA0B,EAC1B7E,UAAU,CAACmF,mBACb,CAAC;EACH;EAEA,OAAOzC,wBAAwBA,CAACpC,GAAG,EAAEQ,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAc,CAAA;IAAAd,cAAA,GAAAG,CAAA;IAC1CgF,OAAO,CAAC9D,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAG,CAAA;IAEnD,IAAIkB,KAAK,CAACmB,OAAO,CAAC+C,QAAQ,CAAC,WAAW,CAAC,EAAE;MAAA;MAAAvF,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MACvC,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAACkF,QAAQ,EACxBnE,KAAK,CAACmB,OAAO,EACbjC,UAAU,CAACkF,qBACb,CAAC;IACH,CAAC;IAAA;IAAA;MAAAzF,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAEDM,cAAc,CAACmB,SAAS,CAACf,GAAG,EAC1BP,eAAe,CAAC8E,qBAAqB,EACrC,0BAA0B,EAC1B7E,UAAU,CAACoF,mBACb,CAAC;EACH;EAEA,OAAOrC,wBAAwBA,CAACzC,GAAG,EAAEQ,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAc,CAAA;IAAAd,cAAA,GAAAG,CAAA;IAC1CgF,OAAO,CAAC9D,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAG,CAAA;IAEjD,IAAIkB,KAAK,CAACmB,OAAO,CAAC+C,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAAA;MAAAvF,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAG,CAAA;MAC9C,OAAOM,cAAc,CAACmB,SAAS,CAACf,GAAG,EACjCP,eAAe,CAACkF,QAAQ,EACxBnE,KAAK,CAACmB,OAAO,EACbjC,UAAU,CAACqF,oBACb,CAAC;IACH,CAAC;IAAA;IAAA;MAAA5F,cAAA,GAAA2B,CAAA;IAAA;IAAA3B,cAAA,GAAAG,CAAA;IAEDM,cAAc,CAACmB,SAAS,CAACf,GAAG,EAC1BP,eAAe,CAAC8E,qBAAqB,EACrC,0BAA0B,EAC1B7E,UAAU,CAACsF,mBACb,CAAC;EACH;EAEA,OAAOlC,wBAAwBA,CAAC9C,GAAG,EAAEQ,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAc,CAAA;IAAAd,cAAA,GAAAG,CAAA;IAC1CgF,OAAO,CAAC9D,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAG,CAAA;IAC7DM,cAAc,CAACmB,SAAS,CAACf,GAAG,EAC1BP,eAAe,CAAC8E,qBAAqB,EACrC,0BAA0B,EAC1B7E,UAAU,CAACuF,4BACb,CAAC;EACH;EAEA,OAAOhC,uBAAuBA,CAACjD,GAAG,EAAEQ,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAc,CAAA;IAAAd,cAAA,GAAAG,CAAA;IACzCgF,OAAO,CAAC9D,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAG,CAAA;IAC9DM,cAAc,CAACmB,SAAS,CAACf,GAAG,EAC1BP,eAAe,CAAC8E,qBAAqB,EACrC,0BAA0B,EAC1B7E,UAAU,CAACwF,2BACb,CAAC;EACH;EAEA,OAAOtB,kBAAkBA,CAAC5D,GAAG,EAAEQ,KAAK,EAAE;IAAA;IAAArB,cAAA,GAAAc,CAAA;IAAAd,cAAA,GAAAG,CAAA;IACpCgF,OAAO,CAAC9D,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAAC;IAAArB,cAAA,GAAAG,CAAA;IACjDM,cAAc,CAACmB,SAAS,CAACf,GAAG,EAC1BP,eAAe,CAAC8E,qBAAqB,EACrC,0BAA0B,EAC1B7E,UAAU,CAACyF,mBACb,CAAC;EACH;AACF;AAAC;AAAAhG,cAAA,GAAAG,CAAA;AAED8F,MAAM,CAACC,OAAO,GAAG;EAAExF;AAA2B,CAAC","ignoreList":[]}