{"version":3,"names":["cov_173hdkt9xl","actualCoverage","fs","s","require","path","csv","createCsvWriter","createObjectCsvWriter","createTestCSVs","f","csvDir","join","__dirname","testDir","existsSync","b","mkdirSync","configs","file","testLines","config","inputPath","outputPath","console","log","records","headers","isFirstRow","Promise","resolve","reject","createReadStream","pipe","on","headerList","data","length","push","csvWriter","header","map","h","id","title","writeRecords","main","module","catch","error","exports"],"sources":["create_test_csvs.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst csv = require('csv-parser');\nconst createCsvWriter = require('csv-writer').createObjectCsvWriter;\n\n// Fun√ß√£o para criar vers√µes de teste dos CSVs\nasync function createTestCSVs() {\n  const csvDir = path.join(__dirname, '../../../importBD');\n  const testDir = path.join(csvDir, 'test');\n  \n  // Criar diret√≥rio de teste se n√£o existir\n  if (!fs.existsSync(testDir)) {\n    fs.mkdirSync(testDir);\n  }\n  \n  // Configura√ß√µes para cada arquivo\n  const configs = [\n    { file: 'clients.csv', testLines: 10 },\n    { file: 'contracts.csv', testLines: 15 },\n    // payments n√£o ser√° copiado conforme solicitado\n  ];\n  \n  for (const config of configs) {\n    const inputPath = path.join(csvDir, config.file);\n    const outputPath = path.join(testDir, `test_${config.file}`);\n    \n    if (!fs.existsSync(inputPath)) {\n      console.log(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${inputPath}`);\n      continue;\n    }\n    \n    console.log(`üìÇ Processando ${config.file}...`);\n    \n    const records = [];\n    let headers = [];\n    let isFirstRow = true;\n    \n    await new Promise((resolve, reject) => {\n      fs.createReadStream(inputPath)\n        .pipe(csv())\n        .on('headers', (headerList) => {\n          headers = headerList;\n        })\n        .on('data', (data) => {\n          if (records.length < config.testLines) {\n            records.push(data);\n          }\n        })\n        .on('end', () => {\n          resolve();\n        })\n        .on('error', reject);\n    });\n    \n    // Escrever arquivo de teste\n    if (records.length > 0 && headers.length > 0) {\n      const csvWriter = createCsvWriter({\n        path: outputPath,\n        header: headers.map(h => ({ id: h, title: h }))\n      });\n      \n      await csvWriter.writeRecords(records);\n      console.log(`‚úÖ Criado ${outputPath} com ${records.length} registros`);\n    }\n  }\n  \n  console.log('\\nüéâ Arquivos de teste criados com sucesso!');\n  console.log('üìÅ Localiza√ß√£o:', testDir);\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n  createTestCSVs().catch(console.error);\n}\n\nmodule.exports = { createTestCSVs };"],"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","ignoreList":[]}