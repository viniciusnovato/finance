{"version":3,"names":["cov_twgiyl3w","actualCoverage","s","require","config","createClient","fs","path","supabase","process","env","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","parseCSV","csvContent","f","lines","split","filter","line","trim","headers","slice","map","values","current","inQuotes","i","length","char","b","push","obj","forEach","header","index","importClientsTest","console","log","csvPath","join","__dirname","readFileSync","clients","testClients","successCount","errorCount","client","clientData","id","first_name","substring","last_name","email","phone","mobile","tax_id","birth_date","address","city","state","postal_code","country","status","notes","external_id","created_at","Date","toISOString","updated_at","error","from","insert","message","err","count","select","head","catch"],"sources":["import_clients_test.js"],"sourcesContent":["require('dotenv').config();\nconst { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst path = require('path');\n\n// Usar service_role key para ter permiss√µes administrativas\nconst supabase = createClient(\n  process.env.SUPABASE_URL, \n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nfunction parseCSV(csvContent) {\n  const lines = csvContent.split('\\n').filter(line => line.trim());\n  const headers = lines[0].split(',');\n  \n  return lines.slice(1).map(line => {\n    const values = [];\n    let current = '';\n    let inQuotes = false;\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      \n      if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        values.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    values.push(current.trim());\n    \n    const obj = {};\n    headers.forEach((header, index) => {\n      obj[header.trim()] = values[index] || null;\n    });\n    \n    return obj;\n  });\n}\n\nasync function importClientsTest() {\n  console.log('üì• IMPORTA√á√ÉO DE CLIENTES (TESTE - 5 LINHAS)');\n  console.log('==================================================');\n  \n  try {\n    // Ler arquivo CSV\n    const csvPath = path.join(__dirname, '../../../importBD/clients.csv');\n    const csvContent = fs.readFileSync(csvPath, 'utf8');\n    \n    // Parse CSV\n    const clients = parseCSV(csvContent);\n    console.log(`üìä Total de clientes no CSV: ${clients.length}`);\n    \n    // Processar apenas os primeiros 5 para teste\n    const testClients = clients.slice(0, 5);\n    console.log(`üß™ Processando ${testClients.length} clientes para teste`);\n    \n    let successCount = 0;\n    let errorCount = 0;\n    \n    for (const client of testClients) {\n      try {\n        // Preparar dados do cliente (truncar campos longos)\n        const clientData = {\n          id: client.id,\n          first_name: (client.first_name || '').substring(0, 50),\n          last_name: (client.last_name || '').substring(0, 50),\n          email: client.email || null,\n          phone: (client.phone || '').substring(0, 50),\n          mobile: (client.mobile || '').substring(0, 50),\n          tax_id: (client.tax_id || '').substring(0, 50),\n          birth_date: client.birth_date || null,\n          address: client.address || null,\n          city: (client.city || '').substring(0, 100),\n          state: (client.state || '').substring(0, 50),\n          postal_code: (client.postal_code || '').substring(0, 20),\n          country: (client.country || '').substring(0, 100),\n          status: client.status || 'active',\n          notes: client.notes || null,\n          external_id: (client.external_id || '').substring(0, 50),\n          created_at: client.created_at || new Date().toISOString(),\n          updated_at: client.updated_at || new Date().toISOString()\n        };\n        \n        // Inserir no Supabase\n        const { error } = await supabase\n          .from('clients')\n          .insert(clientData);\n        \n        if (error) {\n          console.log(`‚ùå Erro ao inserir cliente ${client.first_name} ${client.last_name}: ${error.message}`);\n          errorCount++;\n        } else {\n          console.log(`‚úÖ Cliente inserido: ${client.first_name} ${client.last_name}`);\n          successCount++;\n        }\n        \n      } catch (err) {\n        console.log(`‚ùå Erro ao processar cliente: ${err.message}`);\n        errorCount++;\n      }\n    }\n    \n    console.log('\\nüìä RESUMO DA IMPORTA√á√ÉO:');\n    console.log(`‚úÖ Sucessos: ${successCount}`);\n    console.log(`‚ùå Erros: ${errorCount}`);\n    \n    // Verificar total na tabela\n    const { count } = await supabase\n      .from('clients')\n      .select('*', { count: 'exact', head: true });\n    \n    console.log(`üìã Total de clientes na tabela: ${count}`);\n    \n  } catch (error) {\n    console.error('‚ùå Erro geral:', error.message);\n  }\n}\n\nimportClientsTest().catch(console.error);"],"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","ignoreList":[]}