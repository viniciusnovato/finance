{"version":3,"names":["cov_1kmmmmraxz","actualCoverage","s","require","config","createClient","fs","csv","path","supabase","process","env","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","CSV_DIR","createClientMapping","f","console","log","data","dbClients","error","dbError","from","select","b","Map","csvClients","clientsFile","join","Promise","resolve","createReadStream","pipe","on","row","key","first_name","last_name","toLowerCase","trim","set","id","mapping","forEach","dbClient","csvId","get","size","importContracts","clientMapping","count","success","errors","clientNotFound","contractsFile","dbClientId","client_id","contractData","contract_number","substring","description","value","parseFloat","start_date","end_date","status","payment_frequency","notes","insert","message","catch"],"sources":["import_contracts_mapped.js"],"sourcesContent":["require('dotenv').config();\nconst { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst path = require('path');\n\n// Usar service_role key para ter permiss√µes administrativas\nconst supabase = createClient(\n  process.env.SUPABASE_URL, \n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nconst CSV_DIR = '/Users/insitutoareluna/Documents/finance/importBD';\n\nasync function createClientMapping() {\n  console.log('üîç Criando mapeamento de clientes...');\n  \n  // Buscar clientes do banco\n  const { data: dbClients, error: dbError } = await supabase\n    .from('clients')\n    .select('id, first_name, last_name');\n  \n  if (dbError) {\n    console.error('Erro ao buscar clientes do banco:', dbError);\n    return new Map();\n  }\n  \n  // Ler clientes do CSV original\n  const csvClients = new Map();\n  const clientsFile = path.join(CSV_DIR, 'clients.csv');\n  \n  return new Promise((resolve) => {\n    fs.createReadStream(clientsFile)\n      .pipe(csv())\n      .on('data', (row) => {\n        const key = `${row.first_name}_${row.last_name}`.toLowerCase().trim();\n        csvClients.set(key, row.id);\n      })\n      .on('end', () => {\n        // Criar mapeamento CSV ID -> DB ID\n        const mapping = new Map();\n        \n        dbClients.forEach(dbClient => {\n          const key = `${dbClient.first_name}_${dbClient.last_name}`.toLowerCase().trim();\n          const csvId = csvClients.get(key);\n          if (csvId) {\n            mapping.set(csvId, dbClient.id);\n          }\n        });\n        \n        console.log(`üìã Mapeamento criado: ${mapping.size} clientes mapeados`);\n        resolve(mapping);\n      });\n  });\n}\n\nasync function importContracts() {\n  console.log('üìÑ IMPORTA√á√ÉO DE CONTRATOS COM MAPEAMENTO');\n  console.log('==================================================');\n  \n  // Criar mapeamento de clientes\n  const clientMapping = await createClientMapping();\n  \n  let count = 0;\n  let success = 0;\n  let errors = 0;\n  let clientNotFound = 0;\n  \n  const contractsFile = path.join(CSV_DIR, 'contracts.csv');\n  \n  return new Promise((resolve) => {\n    fs.createReadStream(contractsFile)\n      .pipe(csv())\n      .on('data', async (row) => {\n        count++;\n        \n        try {\n          // Mapear client_id do CSV para o ID do banco\n          const dbClientId = clientMapping.get(row.client_id);\n          \n          if (!dbClientId) {\n            if (count <= 10) {\n              console.log(`‚ö†Ô∏è  Cliente n√£o mapeado para contrato ${count}: ${row.client_id}`);\n            }\n            clientNotFound++;\n            return;\n          }\n          \n          const contractData = {\n            client_id: dbClientId,\n            contract_number: row.contract_number?.substring(0, 100) || `CONTRACT_${count}`,\n            description: row.description?.substring(0, 500) || null,\n            value: parseFloat(row.value) || 0,\n            start_date: row.start_date || null,\n            end_date: row.end_date || null,\n            status: row.status || 'active',\n            payment_frequency: row.payment_frequency || 'monthly',\n            notes: row.notes?.substring(0, 1000) || null\n          };\n          \n          const { data, error } = await supabase\n            .from('contracts')\n            .insert([contractData])\n            .select();\n          \n          if (error) {\n            console.error(`‚ùå Erro ao inserir contrato ${count}:`, error.message);\n            errors++;\n          } else {\n            if (count <= 5) {\n              console.log(`‚úÖ Contrato ${count} inserido:`, data[0].id);\n            }\n            success++;\n          }\n        } catch (error) {\n          console.error(`‚ùå Erro ao processar contrato ${count}:`, error.message);\n          errors++;\n        }\n      })\n      .on('end', () => {\n        console.log('\\nüìä RESUMO DA IMPORTA√á√ÉO DE CONTRATOS:');\n        console.log(`Total processados: ${count}`);\n        console.log(`Sucessos: ${success}`);\n        console.log(`Erros: ${errors}`);\n        console.log(`Clientes n√£o encontrados: ${clientNotFound}`);\n        resolve({ count, success, errors, clientNotFound });\n      })\n      .on('error', (error) => {\n        console.error('‚ùå Erro ao ler CSV de contratos:', error);\n        resolve({ count, success, errors, clientNotFound });\n      });\n  });\n}\n\nimportContracts().catch(console.error);"],"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","ignoreList":[]}