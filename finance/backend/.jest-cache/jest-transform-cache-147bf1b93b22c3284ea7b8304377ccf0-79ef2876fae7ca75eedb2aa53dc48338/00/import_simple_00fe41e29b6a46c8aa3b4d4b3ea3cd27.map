{"version":3,"names":["cov_lliv0sq73","actualCoverage","s","require","config","createClient","fs","csv","path","supabase","process","env","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","CSV_DIR","importSimple","f","console","log","from","delete","neq","clientsFile","join","clients","Promise","resolve","reject","count","createReadStream","pipe","on","row","b","push","length","clientsSuccess","clientsErrors","uniqueEmail","email","substring","id","split","uniqueExternalId","clientData","first_name","last_name","phone","mobile","tax_id","birth_date","address","city","postal_code","country","notes","error","insert","message","finalClientsCount","select","head","stack","catch"],"sources":["import_simple.js"],"sourcesContent":["require('dotenv').config();\nconst { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst path = require('path');\n\n// Usar service_role key para ter permiss√µes administrativas\nconst supabase = createClient(\n  process.env.SUPABASE_URL, \n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nconst CSV_DIR = '/Users/insitutoareluna/Documents/finance/importBD';\n\nasync function importSimple() {\n  console.log('üöÄ IMPORTA√á√ÉO SIMPLES DE DADOS');\n  console.log('==================================================');\n  \n  try {\n    // 1. Limpar dados existentes\n    console.log('\\nüßπ Limpando dados existentes...');\n    await supabase.from('payments').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n    await supabase.from('contracts').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n    await supabase.from('clients').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n    console.log('‚úÖ Banco de dados limpo');\n    \n    // 2. Importar clientes (primeiros 10)\n    console.log('\\nüë• Importando primeiros 10 clientes...');\n    const clientsFile = path.join(CSV_DIR, 'clients.csv');\n    const clients = [];\n    \n    await new Promise((resolve, reject) => {\n      let count = 0;\n      fs.createReadStream(clientsFile)\n        .pipe(csv())\n        .on('data', (row) => {\n          if (count < 10) {\n            clients.push(row);\n            count++;\n          }\n        })\n        .on('end', resolve)\n        .on('error', reject);\n    });\n    \n    console.log(`üìä Lidos ${clients.length} clientes do CSV`);\n    \n    let clientsSuccess = 0;\n    let clientsErrors = 0;\n    \n    for (const row of clients) {\n      try {\n        const uniqueEmail = `${row.email.substring(0, 40)}_${row.id.substring(0, 8)}@${row.email.split('@')[1] || 'example.com'}`.substring(0, 100);\n        const uniqueExternalId = `CLI_${row.id.substring(0, 46)}`.substring(0, 50);\n        \n        const clientData = {\n          first_name: row.first_name?.substring(0, 255) || 'Nome',\n          last_name: row.last_name?.substring(0, 255) || 'Sobrenome',\n          email: uniqueEmail,\n          phone: row.phone?.substring(0, 50) || null,\n          mobile: row.mobile?.substring(0, 50) || null,\n          tax_id: row.tax_id?.substring(0, 50) || null,\n          birth_date: row.birth_date || null,\n          address: row.address || null,\n          city: row.city?.substring(0, 100) || null,\n          postal_code: row.postal_code?.substring(0, 20) || null,\n          country: row.country?.substring(0, 100) || 'Portugal',\n          notes: row.notes || null\n        };\n        \n        const { error } = await supabase\n          .from('clients')\n          .insert([clientData]);\n        \n        if (error) {\n          console.error(`‚ùå Erro ao inserir cliente ${row.id}:`, error.message);\n          clientsErrors++;\n        } else {\n          clientsSuccess++;\n          console.log(`‚úÖ Cliente inserido: ${clientData.first_name} ${clientData.last_name}`);\n        }\n      } catch (error) {\n        console.error(`‚ùå Erro ao processar cliente ${row.id}:`, error.message);\n        clientsErrors++;\n      }\n    }\n    \n    console.log(`\\nüìä Clientes: ${clientsSuccess} sucessos, ${clientsErrors} erros`);\n    \n    // 3. Verificar resultado\n    const { count: finalClientsCount } = await supabase\n      .from('clients')\n      .select('*', { count: 'exact', head: true });\n    \n    console.log(`\\nüìà RESULTADO FINAL:`);\n    console.log(`üë• Clientes na tabela: ${finalClientsCount}`);\n    \n    if (finalClientsCount > 0) {\n      console.log('\\nüéâ IMPORTA√á√ÉO SIMPLES REALIZADA COM SUCESSO!');\n    } else {\n      console.log('\\n‚ùå NENHUM CLIENTE FOI IMPORTADO - VERIFIQUE OS ERROS ACIMA');\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Erro na importa√ß√£o simples:', error.message);\n    console.error('Stack:', error.stack);\n  }\n}\n\nimportSimple().catch(console.error);"],"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","ignoreList":[]}