{"version":3,"names":["cov_1wegccv6ko","actualCoverage","getAllRecords","supabase","table","select","b","filters","f","allRecords","s","page","pageSize","hasMore","start","end","query","from","range","Object","entries","forEach","key","value","field","fieldValue","eq","in","gte","lte","data","error","length","concat","console","warn","getAllPayments","getAllContracts","getAllClients","module","exports"],"sources":["supabaseHelpers.js"],"sourcesContent":["/**\n * Utilitários para trabalhar com Supabase e contornar limitações de paginação\n */\n\n/**\n * Busca todos os registros de uma tabela usando paginação automática\n * @param {Object} supabase - Cliente Supabase\n * @param {string} table - Nome da tabela\n * @param {string} select - Campos a selecionar\n * @param {Object} filters - Filtros a aplicar (opcional)\n * @returns {Promise<Array>} Array com todos os registros\n */\nasync function getAllRecords(supabase, table, select = '*', filters = {}) {\n  let allRecords = [];\n  let page = 0;\n  const pageSize = 1000; // Limite máximo do Supabase\n  let hasMore = true;\n  \n  while (hasMore) {\n    const start = page * pageSize;\n    const end = start + pageSize - 1;\n    \n    let query = supabase\n      .from(table)\n      .select(select)\n      .range(start, end);\n    \n    // Aplicar filtros se fornecidos\n    Object.entries(filters).forEach(([key, value]) => {\n      if (key === 'eq') {\n        Object.entries(value).forEach(([field, fieldValue]) => {\n          query = query.eq(field, fieldValue);\n        });\n      } else if (key === 'in') {\n        Object.entries(value).forEach(([field, fieldValue]) => {\n          query = query.in(field, fieldValue);\n        });\n      } else if (key === 'gte') {\n        Object.entries(value).forEach(([field, fieldValue]) => {\n          query = query.gte(field, fieldValue);\n        });\n      } else if (key === 'lte') {\n        Object.entries(value).forEach(([field, fieldValue]) => {\n          query = query.lte(field, fieldValue);\n        });\n      }\n    });\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      throw error;\n    }\n    \n    if (!data || data.length === 0) {\n      hasMore = false;\n    } else {\n      allRecords = allRecords.concat(data);\n      \n      if (data.length < pageSize) {\n        hasMore = false;\n      }\n    }\n    \n    page++;\n    \n    // Limite de segurança para evitar loop infinito\n    if (page > 50) {\n      console.warn(`Limite de páginas alcançado (50 páginas) para tabela ${table}`);\n      break;\n    }\n  }\n  \n  return allRecords;\n}\n\n/**\n * Busca todos os pagamentos com filtros específicos\n * @param {Object} supabase - Cliente Supabase\n * @param {Object} filters - Filtros a aplicar\n * @returns {Promise<Array>} Array com todos os pagamentos\n */\nasync function getAllPayments(supabase, filters = {}) {\n  return getAllRecords(supabase, 'payments', 'id, contract_id, amount, status, due_date, paid_date, created_at', filters);\n}\n\n/**\n * Busca todos os contratos com filtros específicos\n * @param {Object} supabase - Cliente Supabase\n * @param {Object} filters - Filtros a aplicar\n * @returns {Promise<Array>} Array com todos os contratos\n */\nasync function getAllContracts(supabase, filters = {}) {\n  return getAllRecords(supabase, 'contracts', 'id, status, value, down_payment, number_of_payments, created_at', filters);\n}\n\n/**\n * Busca todos os clientes com filtros específicos\n * @param {Object} supabase - Cliente Supabase\n * @param {Object} filters - Filtros a aplicar\n * @returns {Promise<Array>} Array com todos os clientes\n */\nasync function getAllClients(supabase, filters = {}) {\n  return getAllRecords(supabase, 'clients', 'id, first_name, last_name, email, phone, status, created_at', filters);\n}\n\nmodule.exports = {\n  getAllRecords,\n  getAllPayments,\n  getAllContracts,\n  getAllClients\n};"],"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","ignoreList":[]}