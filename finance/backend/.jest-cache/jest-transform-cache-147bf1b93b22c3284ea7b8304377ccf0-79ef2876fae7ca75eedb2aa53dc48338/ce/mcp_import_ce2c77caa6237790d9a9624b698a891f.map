{"version":3,"names":["cov_b9nmw6ymj","actualCoverage","fs","s","require","path","spawn","PROJECT_ID","PROCESSED_DATA_PATH","join","__dirname","executeMCP","toolName","args","f","Promise","resolve","reject","mcpArgs","JSON","stringify","console","log","child","stdio","stdout","stderr","on","data","toString","code","b","Error","importClients","clients","length","batchSize","imported","i","batch","slice","values","map","client","firstName","first_name","replace","lastName","last_name","email","phone","mobile","taxId","tax_id","birthDate","birth_date","address","city","state","postalCode","postal_code","country","notes","status","externalId","external_id","query","Math","floor","substring","project_id","setTimeout","error","message","importContracts","contracts","contract","contractNumber","contract_number","description","value","startDate","start_date","endDate","end_date","paymentFrequency","payment_frequency","clientExternalId","client_external_id","main","existsSync","parse","readFileSync","payments","clientsImported","contractsImported","process","exit","module","exports"],"sources":["mcp_import.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst { spawn } = require('child_process');\n\n// Configurações\nconst PROJECT_ID = 'sxbslulfitfsijqrzljd';\nconst PROCESSED_DATA_PATH = path.join(__dirname, '../../processed_data.json');\n\n// Função para executar comando MCP\nfunction executeMCP(toolName, args) {\n    return new Promise((resolve, reject) => {\n        const mcpArgs = [\n            'run_mcp',\n            '--server-name', 'mcp.config.usrlocalmcp.supabase-mcp-finance',\n            '--tool-name', toolName,\n            '--args', JSON.stringify(args)\n        ];\n        \n        console.log(`🔄 Executando MCP: ${toolName}`);\n        \n        const child = spawn('trae', mcpArgs, { stdio: 'pipe' });\n        \n        let stdout = '';\n        let stderr = '';\n        \n        child.stdout.on('data', (data) => {\n            stdout += data.toString();\n        });\n        \n        child.stderr.on('data', (data) => {\n            stderr += data.toString();\n        });\n        \n        child.on('close', (code) => {\n            if (code === 0) {\n                resolve(stdout);\n            } else {\n                reject(new Error(`MCP failed with code ${code}: ${stderr}`));\n            }\n        });\n    });\n}\n\n// Função para importar clientes em lotes\nasync function importClients(clients) {\n    console.log(`📥 Importando ${clients.length} clientes...`);\n    \n    const batchSize = 10; // Lotes menores para evitar problemas\n    let imported = 0;\n    \n    for (let i = 0; i < clients.length; i += batchSize) {\n        const batch = clients.slice(i, i + batchSize);\n        \n        const values = batch.map(client => {\n            const firstName = client.first_name ? `'${client.first_name.replace(/'/g, \"''\")}'` : 'NULL';\n            const lastName = client.last_name ? `'${client.last_name.replace(/'/g, \"''\")}'` : 'NULL';\n            const email = client.email ? `'${client.email.replace(/'/g, \"''\")}'` : 'NULL';\n            const phone = client.phone ? `'${client.phone.replace(/'/g, \"''\")}'` : 'NULL';\n            const mobile = client.mobile ? `'${client.mobile.replace(/'/g, \"''\")}'` : 'NULL';\n            const taxId = client.tax_id ? `'${client.tax_id.replace(/'/g, \"''\")}'` : 'NULL';\n            const birthDate = client.birth_date ? `'${client.birth_date}'` : 'NULL';\n            const address = client.address ? `'${client.address.replace(/'/g, \"''\")}'` : 'NULL';\n            const city = client.city ? `'${client.city.replace(/'/g, \"''\")}'` : 'NULL';\n            const state = client.state ? `'${client.state.replace(/'/g, \"''\")}'` : 'NULL';\n            const postalCode = client.postal_code ? `'${client.postal_code.replace(/'/g, \"''\")}'` : 'NULL';\n            const country = client.country ? `'${client.country.replace(/'/g, \"''\")}'` : \"'Brasil'\";\n            const notes = client.notes ? `'${client.notes.replace(/'/g, \"''\")}'` : 'NULL';\n            const status = client.status ? `'${client.status}'` : \"'active'\";\n            const externalId = client.external_id ? `'${client.external_id}'` : 'NULL';\n            \n            return `(${firstName}, ${lastName}, ${email}, ${phone}, ${mobile}, ${taxId}, ${birthDate}, ${address}, ${city}, ${state}, ${postalCode}, ${country}, ${notes}, ${status}, ${externalId})`;\n        }).join(',\\n    ');\n        \n        const query = `INSERT INTO clients (\n    first_name, last_name, email, phone, mobile, tax_id, birth_date, \n    address, city, state, postal_code, country, notes, status, external_id\n) VALUES \n    ${values}\nON CONFLICT (external_id) DO UPDATE SET\n    first_name = EXCLUDED.first_name,\n    last_name = EXCLUDED.last_name,\n    email = EXCLUDED.email,\n    phone = EXCLUDED.phone,\n    mobile = EXCLUDED.mobile,\n    updated_at = NOW();`;\n        \n        try {\n            console.log(`Executando SQL para lote ${Math.floor(i/batchSize) + 1}...`);\n            console.log(query.substring(0, 200) + '...');\n            \n            // Executar via MCP do Supabase\n            await executeMCP('execute_sql', {\n                project_id: PROJECT_ID,\n                query: query\n            });\n            \n            imported += batch.length;\n            console.log(`✅ Lote ${Math.floor(i/batchSize) + 1} importado: ${imported}/${clients.length} clientes`);\n            \n            // Pequena pausa entre lotes\n            await new Promise(resolve => setTimeout(resolve, 500));\n            \n        } catch (error) {\n            console.error(`❌ Erro no lote ${Math.floor(i/batchSize) + 1}:`, error.message);\n            throw error;\n        }\n    }\n    \n    return imported;\n}\n\n// Função para importar contratos\nasync function importContracts(contracts) {\n    console.log(`📥 Importando ${contracts.length} contratos...`);\n    \n    const batchSize = 10;\n    let imported = 0;\n    \n    for (let i = 0; i < contracts.length; i += batchSize) {\n        const batch = contracts.slice(i, i + batchSize);\n        \n        const values = batch.map(contract => {\n            const contractNumber = contract.contract_number ? `'${contract.contract_number.replace(/'/g, \"''\")}'` : 'NULL';\n            const description = contract.description ? `'${contract.description.replace(/'/g, \"''\")}'` : 'NULL';\n            const value = contract.value || 0;\n            const startDate = contract.start_date ? `'${contract.start_date}'` : 'NULL';\n            const endDate = contract.end_date ? `'${contract.end_date}'` : 'NULL';\n            const status = contract.status ? `'${contract.status}'` : \"'active'\";\n            const paymentFrequency = contract.payment_frequency ? `'${contract.payment_frequency}'` : \"'monthly'\";\n            const notes = contract.notes ? `'${contract.notes.replace(/'/g, \"''\")}'` : 'NULL';\n            const externalId = contract.external_id ? `'${contract.external_id}'` : 'NULL';\n            const clientExternalId = contract.client_external_id ? `'${contract.client_external_id}'` : 'NULL';\n            \n            return `(\n        (SELECT id FROM clients WHERE external_id = ${clientExternalId} LIMIT 1),\n        ${contractNumber}, ${description}, ${value}, ${startDate}, ${endDate}, \n        ${status}, ${paymentFrequency}, ${notes}, ${externalId}\n    )`;\n        }).join(',\\n    ');\n        \n        const query = `INSERT INTO contracts (\n    client_id, contract_number, description, value, start_date, end_date,\n    status, payment_frequency, notes, external_id\n) VALUES \n    ${values}\nON CONFLICT (external_id) DO UPDATE SET\n    description = EXCLUDED.description,\n    value = EXCLUDED.value,\n    start_date = EXCLUDED.start_date,\n    end_date = EXCLUDED.end_date,\n    status = EXCLUDED.status,\n    updated_at = NOW();`;\n        \n        try {\n            console.log(`Executando SQL para lote de contratos ${Math.floor(i/batchSize) + 1}...`);\n            \n            // Executar via MCP do Supabase\n            await executeMCP('execute_sql', {\n                project_id: PROJECT_ID,\n                query: query\n            });\n            \n            imported += batch.length;\n            console.log(`✅ Lote ${Math.floor(i/batchSize) + 1} importado: ${imported}/${contracts.length} contratos`);\n            \n            await new Promise(resolve => setTimeout(resolve, 500));\n            \n        } catch (error) {\n            console.error(`❌ Erro no lote de contratos ${Math.floor(i/batchSize) + 1}:`, error.message);\n            throw error;\n        }\n    }\n    \n    return imported;\n}\n\n// Função principal\nasync function main() {\n    try {\n        console.log('🚀 Iniciando importação completa para Supabase via MCP...');\n        \n        // Carregar dados processados\n        if (!fs.existsSync(PROCESSED_DATA_PATH)) {\n            throw new Error(`Arquivo de dados processados não encontrado: ${PROCESSED_DATA_PATH}`);\n        }\n        \n        const data = JSON.parse(fs.readFileSync(PROCESSED_DATA_PATH, 'utf8'));\n        \n        console.log(`📊 Dados carregados:`);\n        console.log(`   👥 Clientes: ${data.clients.length}`);\n        console.log(`   📄 Contratos: ${data.contracts.length}`);\n        console.log(`   💰 Pagamentos: ${data.payments.length}`);\n        \n        // Verificar estado atual\n        console.log('\\n🔍 Verificando estado atual do banco...');\n        \n        // Importar dados\n        console.log('\\n📥 Iniciando importação...');\n        const clientsImported = await importClients(data.clients);\n        const contractsImported = await importContracts(data.contracts);\n        \n        console.log('\\n✅ Importação concluída!');\n        console.log(`📊 Resumo:`);\n        console.log(`   👥 Clientes importados: ${clientsImported}`);\n        console.log(`   📄 Contratos importados: ${contractsImported}`);\n        console.log(`   💰 Pagamentos: ${data.payments.length} (nenhum encontrado na planilha)`);\n        \n        console.log('\\n💡 Próximos passos:');\n        console.log('   - Verificar dados importados no Supabase');\n        console.log('   - Processar aba de pagamentos se disponível');\n        console.log('   - Configurar interface do usuário');\n        \n    } catch (error) {\n        console.error('❌ Erro durante a importação:', error.message);\n        process.exit(1);\n    }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n    main();\n}\n\nmodule.exports = { main, importClients, importContracts };"],"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","ignoreList":[]}