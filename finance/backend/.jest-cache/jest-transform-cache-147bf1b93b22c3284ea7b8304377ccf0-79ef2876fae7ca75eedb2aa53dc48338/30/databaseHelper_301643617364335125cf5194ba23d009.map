{"version":3,"names":["cov_2g71ajvlw3","actualCoverage","DEFAULT_PAGE_SIZE","MAX_PAGE_SIZE","DEFAULT_SORT_ORDER","s","require","ValidationHelper","DatabaseHelper","processPaginationParams","query","f","page","Math","max","b","parseInt","limit","min","offset","processSortParams","allowedFields","defaultField","sortBy","sortOrder","toUpperCase","validSortBy","includes","validSortOrder","orderClause","processSearchParams","searchableFields","search","trim","length","searchConditions","Op","or","map","field","iLike","searchTerm","processDateFilters","dateField","dateConditions","startDate","isValidDate","gte","Date","endDate","setHours","lte","Object","keys","processStatusFilters","validStatuses","status","buildWhereConditions","params","conditions","assign","statusConditions","customConditions","calculatePaginationMeta","totalCount","totalPages","ceil","hasNextPage","hasPreviousPage","currentPage","pageSize","nextPage","previousPage","formatPaginatedResponse","data","pagination","meta","success","sanitizeFields","sanitized","forEach","hasOwnProperty","value","sanitizeString","validateRequiredFields","requiredFields","errors","undefined","push","buildQueryOptions","options","where","order","include","attributes","executeTransaction","callback","sequelize","transaction","result","commit","error","rollback","toResponseFormat","excludeFields","convert","item","plain","toJSON","Array","isArray","module","exports"],"sources":["databaseHelper.js"],"sourcesContent":["const { DEFAULT_PAGE_SIZE, MAX_PAGE_SIZE, DEFAULT_SORT_ORDER } = require('./constants');\nconst { ValidationHelper } = require('./validationHelper');\n\n/**\n * Helper para operações comuns de banco de dados\n * Centraliza lógicas de paginação, ordenação e filtros\n */\nclass DatabaseHelper {\n  /**\n   * Processa parâmetros de paginação\n   * @param {Object} query - Query parameters da requisição\n   * @returns {Object} Parâmetros de paginação processados\n   */\n  static processPaginationParams(query) {\n    const page = Math.max(1, parseInt(query.page) || 1);\n    const limit = Math.min(\n      MAX_PAGE_SIZE,\n      Math.max(1, parseInt(query.limit) || DEFAULT_PAGE_SIZE)\n    );\n    const offset = (page - 1) * limit;\n\n    return {\n      page,\n      limit,\n      offset\n    };\n  }\n\n  /**\n   * Processa parâmetros de ordenação\n   * @param {Object} query - Query parameters da requisição\n   * @param {Array} allowedFields - Campos permitidos para ordenação\n   * @param {string} defaultField - Campo padrão para ordenação\n   * @returns {Object} Parâmetros de ordenação processados\n   */\n  static processSortParams(query, allowedFields = [], defaultField = 'id') {\n    const sortBy = query.sortBy || defaultField;\n    const sortOrder = (query.sortOrder || DEFAULT_SORT_ORDER).toUpperCase();\n\n    // Valida campo de ordenação\n    const validSortBy = allowedFields.includes(sortBy) ? sortBy : defaultField;\n    \n    // Valida ordem de ordenação\n    const validSortOrder = ['ASC', 'DESC'].includes(sortOrder) ? sortOrder : 'ASC';\n\n    return {\n      sortBy: validSortBy,\n      sortOrder: validSortOrder,\n      orderClause: [[validSortBy, validSortOrder]]\n    };\n  }\n\n  /**\n   * Processa filtros de busca\n   * @param {Object} query - Query parameters da requisição\n   * @param {Array} searchableFields - Campos pesquisáveis\n   * @returns {Object} Condições de busca processadas\n   */\n  static processSearchParams(query, searchableFields = []) {\n    const search = query.search?.trim();\n    \n    if (!search || searchableFields.length === 0) {\n      return { searchConditions: null };\n    }\n\n    // Cria condições OR para busca em múltiplos campos\n    const searchConditions = {\n      [Op.or]: searchableFields.map(field => ({\n        [field]: {\n          [Op.iLike]: `%${search}%`\n        }\n      }))\n    };\n\n    return { searchConditions, searchTerm: search };\n  }\n\n  /**\n   * Processa filtros de data\n   * @param {Object} query - Query parameters da requisição\n   * @param {string} dateField - Campo de data para filtrar\n   * @returns {Object} Condições de filtro de data\n   */\n  static processDateFilters(query, dateField = 'createdAt') {\n    const dateConditions = {};\n    \n    if (query.startDate && ValidationHelper.isValidDate(query.startDate)) {\n      dateConditions[Op.gte] = new Date(query.startDate);\n    }\n    \n    if (query.endDate && ValidationHelper.isValidDate(query.endDate)) {\n      const endDate = new Date(query.endDate);\n      endDate.setHours(23, 59, 59, 999); // Fim do dia\n      dateConditions[Op.lte] = endDate;\n    }\n\n    return Object.keys(dateConditions).length > 0 \n      ? { [dateField]: dateConditions }\n      : {};\n  }\n\n  /**\n   * Processa filtros de status\n   * @param {Object} query - Query parameters da requisição\n   * @param {Array} validStatuses - Status válidos\n   * @returns {Object} Condições de filtro de status\n   */\n  static processStatusFilters(query, validStatuses = []) {\n    const status = query.status;\n    \n    if (!status || !validStatuses.includes(status)) {\n      return {};\n    }\n\n    return { status };\n  }\n\n  /**\n   * Constrói condições WHERE completas\n   * @param {Object} params - Parâmetros de filtro\n   * @returns {Object} Condições WHERE do Sequelize\n   */\n  static buildWhereConditions(params) {\n    const conditions = {};\n    \n    // Adiciona condições de busca\n    if (params.searchConditions) {\n      Object.assign(conditions, params.searchConditions);\n    }\n    \n    // Adiciona filtros de data\n    if (params.dateConditions) {\n      Object.assign(conditions, params.dateConditions);\n    }\n    \n    // Adiciona filtros de status\n    if (params.statusConditions) {\n      Object.assign(conditions, params.statusConditions);\n    }\n    \n    // Adiciona filtros customizados\n    if (params.customConditions) {\n      Object.assign(conditions, params.customConditions);\n    }\n\n    return conditions;\n  }\n\n  /**\n   * Calcula metadados de paginação\n   * @param {number} totalCount - Total de registros\n   * @param {number} page - Página atual\n   * @param {number} limit - Limite por página\n   * @returns {Object} Metadados de paginação\n   */\n  static calculatePaginationMeta(totalCount, page, limit) {\n    const totalPages = Math.ceil(totalCount / limit);\n    const hasNextPage = page < totalPages;\n    const hasPreviousPage = page > 1;\n    \n    return {\n      currentPage: page,\n      totalPages,\n      totalCount,\n      pageSize: limit,\n      hasNextPage,\n      hasPreviousPage,\n      nextPage: hasNextPage ? page + 1 : null,\n      previousPage: hasPreviousPage ? page - 1 : null\n    };\n  }\n\n  /**\n   * Formata resposta paginada\n   * @param {Array} data - Dados da consulta\n   * @param {Object} pagination - Parâmetros de paginação\n   * @param {number} totalCount - Total de registros\n   * @returns {Object} Resposta formatada\n   */\n  static formatPaginatedResponse(data, pagination, totalCount) {\n    const meta = DatabaseHelper.calculatePaginationMeta(\n      totalCount,\n      pagination.page,\n      pagination.limit\n    );\n\n    return {\n      data,\n      meta,\n      success: true\n    };\n  }\n\n  /**\n   * Sanitiza campos de entrada\n   * @param {Object} data - Dados a serem sanitizados\n   * @param {Array} allowedFields - Campos permitidos\n   * @returns {Object} Dados sanitizados\n   */\n  static sanitizeFields(data, allowedFields) {\n    const sanitized = {};\n    \n    allowedFields.forEach(field => {\n      if (data.hasOwnProperty(field)) {\n        const value = data[field];\n        \n        // Sanitiza strings\n        if (typeof value === 'string') {\n          sanitized[field] = ValidationHelper.sanitizeString(value);\n        } else {\n          sanitized[field] = value;\n        }\n      }\n    });\n\n    return sanitized;\n  }\n\n  /**\n   * Valida campos obrigatórios\n   * @param {Object} data - Dados a serem validados\n   * @param {Array} requiredFields - Campos obrigatórios\n   * @returns {Array} Lista de erros de validação\n   */\n  static validateRequiredFields(data, requiredFields) {\n    const errors = [];\n    \n    requiredFields.forEach(field => {\n      if (!data.hasOwnProperty(field) || \n          data[field] === null || \n          data[field] === undefined || \n          (typeof data[field] === 'string' && data[field].trim() === '')) {\n        errors.push(`Campo '${field}' é obrigatório`);\n      }\n    });\n\n    return errors;\n  }\n\n  /**\n   * Constrói opções de consulta do Sequelize\n   * @param {Object} params - Parâmetros da consulta\n   * @returns {Object} Opções do Sequelize\n   */\n  static buildQueryOptions(params) {\n    const options = {};\n    \n    // Adiciona condições WHERE\n    if (params.where) {\n      options.where = params.where;\n    }\n    \n    // Adiciona ordenação\n    if (params.order) {\n      options.order = params.order;\n    }\n    \n    // Adiciona paginação\n    if (params.limit) {\n      options.limit = params.limit;\n    }\n    \n    if (params.offset) {\n      options.offset = params.offset;\n    }\n    \n    // Adiciona includes\n    if (params.include) {\n      options.include = params.include;\n    }\n    \n    // Adiciona atributos\n    if (params.attributes) {\n      options.attributes = params.attributes;\n    }\n\n    return options;\n  }\n\n  /**\n   * Executa transação de banco de dados\n   * @param {Function} callback - Função a ser executada na transação\n   * @param {Object} sequelize - Instância do Sequelize\n   * @returns {Promise} Resultado da transação\n   */\n  static async executeTransaction(callback, sequelize) {\n    const transaction = await sequelize.transaction();\n    \n    try {\n      const result = await callback(transaction);\n      await transaction.commit();\n      return result;\n    } catch (error) {\n      await transaction.rollback();\n      throw error;\n    }\n  }\n\n  /**\n   * Converte dados para formato de resposta\n   * @param {Object|Array} data - Dados a serem convertidos\n   * @param {Array} excludeFields - Campos a serem excluídos\n   * @returns {Object|Array} Dados convertidos\n   */\n  static toResponseFormat(data, excludeFields = ['password', 'deletedAt']) {\n    if (!data) return null;\n    \n    const convert = (item) => {\n      if (!item) return null;\n      \n      const plain = item.toJSON ? item.toJSON() : item;\n      \n      excludeFields.forEach(field => {\n        delete plain[field];\n      });\n      \n      return plain;\n    };\n    \n    return Array.isArray(data) \n      ? data.map(convert)\n      : convert(data);\n  }\n}\n\n// Importa operadores do Sequelize se disponível\ntry {\n  const { Op } = require('sequelize');\n  DatabaseHelper.Op = Op;\n} catch (error) {\n  // Fallback se Sequelize não estiver disponível\n  DatabaseHelper.Op = {};\n}\n\nmodule.exports = { DatabaseHelper };"],"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","ignoreList":[]}