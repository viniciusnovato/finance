cc7137c1969b9f4732a78df48b317a43
"use strict";

/**
 * Testes unitários para ResponseHelper
 * Testa todas as respostas HTTP padronizadas
 */

const ResponseHelper = require('../../utils/responseHelper');
const {
  HttpStatusCodes,
  ErrorCodes,
  SuccessMessages
} = require('../../utils/constants');

// Mock do objeto response do Express
const createMockResponse = () => {
  const res = {
    status: jest.fn().mockReturnThis(),
    json: jest.fn().mockReturnThis(),
    statusCode: null,
    jsonData: null
  };

  // Capturar os dados enviados
  res.status.mockImplementation(code => {
    res.statusCode = code;
    return res;
  });
  res.json.mockImplementation(data => {
    res.jsonData = data;
    return res;
  });
  return res;
};
describe('ResponseHelper', () => {
  let mockRes;
  beforeEach(() => {
    mockRes = createMockResponse();
  });
  describe('success', () => {
    test('should send success response with data and message', () => {
      const data = {
        id: 1,
        name: 'Test'
      };
      const message = 'Operação realizada com sucesso';
      ResponseHelper.success(mockRes, data, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.OK);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        message,
        data,
        timestamp: expect.any(String)
      });
    });
    test('should use default message when not provided', () => {
      const data = {
        id: 1
      };
      ResponseHelper.success(mockRes, data);
      expect(mockRes.jsonData.message).toBe(SuccessMessages.OPERATION_SUCCESS);
    });
    test('should handle null data', () => {
      ResponseHelper.success(mockRes, null);
      expect(mockRes.jsonData.data).toBeNull();
      expect(mockRes.jsonData.success).toBe(true);
    });
  });
  describe('created', () => {
    test('should send created response', () => {
      const data = {
        id: 1,
        name: 'New Item'
      };
      const message = 'Item criado com sucesso';
      ResponseHelper.created(mockRes, data, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.CREATED);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        message,
        data,
        timestamp: expect.any(String)
      });
    });
  });
  describe('noContent', () => {
    test('should send no content response', () => {
      ResponseHelper.noContent(mockRes);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.NO_CONTENT);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        message: 'Operação realizada com sucesso',
        timestamp: expect.any(String)
      });
    });
  });
  describe('error', () => {
    test('should send error response', () => {
      const message = 'Erro interno';
      const code = ErrorCodes.INTERNAL_ERROR;
      ResponseHelper.error(mockRes, message, code);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.INTERNAL_SERVER_ERROR);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code,
        timestamp: expect.any(String)
      });
    });
    test('should use default values when not provided', () => {
      ResponseHelper.error(mockRes);
      expect(mockRes.jsonData.message).toBe('Erro interno do servidor');
      expect(mockRes.jsonData.code).toBe(ErrorCodes.INTERNAL_ERROR);
    });
  });
  describe('badRequest', () => {
    test('should send bad request response', () => {
      const message = 'Dados inválidos';
      ResponseHelper.badRequest(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.BAD_REQUEST);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.VALIDATION_ERROR,
        timestamp: expect.any(String)
      });
    });
  });
  describe('validationError', () => {
    test('should send validation error response with errors array', () => {
      const message = 'Dados inválidos';
      const errors = [{
        field: 'email',
        message: 'Email inválido'
      }, {
        field: 'phone',
        message: 'Telefone obrigatório'
      }];
      ResponseHelper.validationError(mockRes, message, errors);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.UNPROCESSABLE_ENTITY);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.VALIDATION_ERROR,
        errors,
        timestamp: expect.any(String)
      });
    });
    test('should handle empty errors array', () => {
      ResponseHelper.validationError(mockRes, 'Erro de validação', []);
      expect(mockRes.jsonData.errors).toEqual([]);
    });
  });
  describe('notFound', () => {
    test('should send not found response', () => {
      const message = 'Cliente não encontrado';
      ResponseHelper.notFound(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.NOT_FOUND);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.NOT_FOUND,
        timestamp: expect.any(String)
      });
    });
  });
  describe('conflict', () => {
    test('should send conflict response', () => {
      const message = 'Email já existe';
      ResponseHelper.conflict(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.CONFLICT);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.CONFLICT,
        timestamp: expect.any(String)
      });
    });
  });
  describe('unauthorized', () => {
    test('should send unauthorized response', () => {
      const message = 'Token inválido';
      ResponseHelper.unauthorized(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.UNAUTHORIZED);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.UNAUTHORIZED,
        timestamp: expect.any(String)
      });
    });
  });
  describe('forbidden', () => {
    test('should send forbidden response', () => {
      const message = 'Acesso negado';
      ResponseHelper.forbidden(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.FORBIDDEN);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.FORBIDDEN,
        timestamp: expect.any(String)
      });
    });
  });
  describe('paginated', () => {
    test('should send paginated response with metadata', () => {
      const data = [{
        id: 1
      }, {
        id: 2
      }];
      const pagination = {
        page: 1,
        limit: 10,
        total: 25,
        totalPages: 3
      };
      const message = 'Clientes encontrados';
      ResponseHelper.paginated(mockRes, data, pagination, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.OK);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        message,
        data,
        pagination: {
          currentPage: 1,
          totalPages: 3,
          totalItems: 25,
          itemsPerPage: 10,
          hasNextPage: true,
          hasPreviousPage: false
        },
        timestamp: expect.any(String)
      });
    });
    test('should calculate hasNextPage and hasPreviousPage correctly', () => {
      const data = [];
      const pagination = {
        page: 2,
        limit: 10,
        total: 25,
        totalPages: 3
      };
      ResponseHelper.paginated(mockRes, data, pagination);
      expect(mockRes.jsonData.pagination.hasNextPage).toBe(true);
      expect(mockRes.jsonData.pagination.hasPreviousPage).toBe(true);
    });
    test('should handle last page correctly', () => {
      const data = [];
      const pagination = {
        page: 3,
        limit: 10,
        total: 25,
        totalPages: 3
      };
      ResponseHelper.paginated(mockRes, data, pagination);
      expect(mockRes.jsonData.pagination.hasNextPage).toBe(false);
      expect(mockRes.jsonData.pagination.hasPreviousPage).toBe(true);
    });
  });
  describe('requestTimeout', () => {
    test('should send request timeout response', () => {
      const message = 'Timeout da requisição';
      ResponseHelper.requestTimeout(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.REQUEST_TIMEOUT);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: 'REQUEST_TIMEOUT',
        timestamp: expect.any(String)
      });
    });
  });
  describe('tooManyRequests', () => {
    test('should send too many requests response', () => {
      const message = 'Muitas requisições';
      ResponseHelper.tooManyRequests(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.TOO_MANY_REQUESTS);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: 'TOO_MANY_REQUESTS',
        timestamp: expect.any(String)
      });
    });
  });
  describe('badGateway', () => {
    test('should send bad gateway response', () => {
      const message = 'Bad Gateway';
      ResponseHelper.badGateway(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.BAD_GATEWAY);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: 'BAD_GATEWAY',
        timestamp: expect.any(String)
      });
    });
  });
  describe('serviceUnavailable', () => {
    test('should send service unavailable response', () => {
      const message = 'Serviço indisponível';
      ResponseHelper.serviceUnavailable(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.SERVICE_UNAVAILABLE);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: 'SERVICE_UNAVAILABLE',
        timestamp: expect.any(String)
      });
    });
  });
  describe('timestamp format', () => {
    test('should include valid ISO timestamp in all responses', () => {
      ResponseHelper.success(mockRes, {});
      const timestamp = mockRes.jsonData.timestamp;
      expect(timestamp).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/);
      expect(new Date(timestamp).toISOString()).toBe(timestamp);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,