{"version":3,"names":["cov_147gyo80vo","actualCoverage","createClient","s","require","config","supabaseUrl","process","env","SUPABASE_URL","supabaseKey","SUPABASE_SERVICE_ROLE_KEY","supabase","checkTableStructure","f","console","log","data","error","rpc","query","b","forEach","col","maxLength","character_maximum_length","column_name","data_type","is_nullable","fieldsWithLimit50","filter","length","message"],"sources":["check_table_structure.js"],"sourcesContent":["const { createClient } = require('@supabase/supabase-js');\nrequire('dotenv').config();\n\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function checkTableStructure() {\n    console.log('🔍 Verificando estrutura das tabelas...');\n    \n    try {\n        // Query para obter informações das colunas da tabela clients\n        const { data, error } = await supabase.rpc('sql', {\n            query: `\n                SELECT \n                    column_name,\n                    data_type,\n                    character_maximum_length,\n                    is_nullable,\n                    column_default\n                FROM information_schema.columns \n                WHERE table_name = 'clients' \n                AND table_schema = 'public'\n                ORDER BY ordinal_position;\n            `\n        });\n        \n        if (error) {\n            console.error('❌ Erro ao consultar estrutura:', error);\n            return;\n        }\n        \n        console.log('\\n📋 Estrutura da tabela clients:');\n        console.log('================================');\n        data.forEach(col => {\n            const maxLength = col.character_maximum_length ? `(${col.character_maximum_length})` : '';\n            console.log(`${col.column_name}: ${col.data_type}${maxLength} - Nullable: ${col.is_nullable}`);\n        });\n        \n        // Verificar campos com limite de 50 caracteres\n        const fieldsWithLimit50 = data.filter(col => col.character_maximum_length === 50);\n        if (fieldsWithLimit50.length > 0) {\n            console.log('\\n⚠️ Campos com limite de 50 caracteres:');\n            fieldsWithLimit50.forEach(col => {\n                console.log(`- ${col.column_name}`);\n            });\n        }\n        \n    } catch (error) {\n        console.error('💥 Erro:', error.message);\n    }\n}\n\ncheckTableStructure();"],"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","ignoreList":[]}