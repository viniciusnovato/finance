{"version":3,"names":["cov_13zxybx9ky","actualCoverage","s","require","config","createClient","fs","csv","b","process","env","SUPABASE_URL","SUPABASE_ANON_KEY","console","error","exit","supabase","cleanData","value","maxLength","f","cleaned","String","trim","length","substring","parseMonetaryValue","parseFloat","replace","parseDate","dateStr","formats","format","match","day","month","year","padStart","importCSV","csvPath","existsSync","contracts","processedCount","successCount","errorCount","LIMIT","Promise","resolve","createReadStream","pipe","on","row","contract","client_name","contract_number","start_date","end_date","total_value","installment_value","area","location","method","push","log","nameParts","split","firstName","lastName","slice","join","data","existingClient","from","select","eq","single","clientId","newClient","clientError","insert","first_name","last_name","email","toLowerCase","tax_id","Math","random","toString","substr","phone","country","status","notes","message","id","contractInfo","contractError","main","module","catch","exports"],"sources":["import_contratos_simples.js"],"sourcesContent":["require('dotenv').config();\nconst { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst csv = require('csv-parser');\n\n// Configurar cliente Supabase\nif (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {\n  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_ANON_KEY s√£o obrigat√≥rias');\n  process.exit(1);\n}\n\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);\n\n// Fun√ß√£o para limpar e converter dados\nfunction cleanData(value, maxLength = null) {\n  if (!value || value === '') return null;\n  let cleaned = String(value).trim();\n  if (maxLength && cleaned.length > maxLength) {\n    cleaned = cleaned.substring(0, maxLength);\n  }\n  return cleaned;\n}\n\nfunction parseMonetaryValue(value) {\n  if (!value || value === '') return 0;\n  return parseFloat(String(value).replace(/[^0-9.,]/g, '').replace(',', '.')) || 0;\n}\n\nfunction parseDate(dateStr) {\n  if (!dateStr || dateStr === '') return null;\n  \n  // Tentar diferentes formatos de data\n  const formats = [\n    /^(\\d{1,2})\\/(\\d{1,2})\\/(\\d{4})$/, // DD/MM/YYYY\n    /^(\\d{4})-(\\d{1,2})-(\\d{1,2})$/, // YYYY-MM-DD\n  ];\n  \n  for (const format of formats) {\n    const match = dateStr.match(format);\n    if (match) {\n      if (format === formats[0]) {\n        // DD/MM/YYYY\n        const [, day, month, year] = match;\n        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n      } else {\n        // YYYY-MM-DD\n        return dateStr;\n      }\n    }\n  }\n  \n  return null;\n}\n\n// Fun√ß√£o para importar CSV\nasync function importCSV() {\n  const csvPath = '/Users/insitutoareluna/Documents/finance/importBD/contratosAtivosFinal - Contratos Ativos.csv';\n  \n  if (!fs.existsSync(csvPath)) {\n    console.error(`‚ùå Arquivo CSV n√£o encontrado: ${csvPath}`);\n    return;\n  }\n\n  const contracts = [];\n  let processedCount = 0;\n  let successCount = 0;\n  let errorCount = 0;\n  const LIMIT = 1000; // Processar at√© 1000 contratos (ou todos se for menor)\n\n  return new Promise((resolve) => {\n    fs.createReadStream(csvPath)\n      .pipe(csv())\n      .on('data', (row) => {\n        if (processedCount >= LIMIT) return;\n        \n        const contract = {\n          client_name: cleanData(row['Nome'], 100),\n          contract_number: cleanData(row['Contrato'], 50),\n          start_date: parseDate(row['In√≠cio']),\n          end_date: parseDate(row['Fim']),\n          total_value: parseMonetaryValue(row['Total']),\n          installment_value: parseMonetaryValue(row['Valor de Parcela']),\n          area: cleanData(row['√Årea'] || 'N/A', 50),\n          location: cleanData(row['Local'] || 'N/A', 50),\n          method: cleanData(row['M√©todo'] || 'N/A', 20)\n        };\n        \n        // Validar dados essenciais\n        if (contract.client_name && contract.contract_number && contract.total_value > 0) {\n          contracts.push(contract);\n          processedCount++;\n          console.log(`üìù Processado: ${contract.client_name} - Contrato ${contract.contract_number}`);\n        }\n      })\n      .on('end', async () => {\n        console.log(`\\nüìä Total de contratos processados: ${contracts.length}`);\n        \n        // Processar cada contrato\n        for (const contract of contracts) {\n          try {\n            // Verificar se cliente j√° existe\n            const nameParts = contract.client_name.split(' ');\n            const firstName = nameParts[0] || '';\n            const lastName = nameParts.slice(1).join(' ') || '';\n            \n            let { data: existingClient } = await supabase\n              .from('clients')\n              .select('id')\n              .eq('first_name', firstName)\n              .eq('last_name', lastName)\n              .single();\n            \n            let clientId;\n            if (!existingClient) {\n              // Criar novo cliente\n              const { data: newClient, error: clientError } = await supabase\n                .from('clients')\n                .insert({\n                  first_name: firstName,\n                  last_name: lastName,\n                  email: `${firstName.toLowerCase()}@exemplo.com`,\n                  tax_id: `000${Math.random().toString().substr(2, 8)}`,\n                  phone: '(00) 00000-0000',\n                  country: 'Brasil',\n                  status: 'active',\n                  notes: `Cliente importado do contrato ${contract.contract_number}`\n                })\n                .select('id')\n                .single();\n              \n              if (clientError) {\n                console.error(`‚ùå Erro ao criar cliente ${contract.client_name}:`, clientError.message);\n                errorCount++;\n                continue;\n              }\n              \n              clientId = newClient.id;\n              console.log(`‚úÖ Cliente criado: ${contract.client_name}`);\n            } else {\n              clientId = existingClient.id;\n              console.log(`‚ÑπÔ∏è  Cliente j√° existe: ${contract.client_name}`);\n            }\n            \n            // Criar um registro simples na tabela clients como \"contrato\"\n            // J√° que a tabela contracts n√£o existe, vamos usar a tabela clients para armazenar info do contrato\n            const contractInfo = {\n              first_name: `CONTRATO_${contract.contract_number}`,\n              last_name: contract.client_name,\n              email: `contrato${contract.contract_number}@exemplo.com`,\n              tax_id: contract.contract_number,\n              phone: contract.total_value.toString(),\n              country: contract.area || 'N/A',\n              status: 'active',\n              notes: `Valor: R$ ${contract.total_value}, Parcela: R$ ${contract.installment_value}, In√≠cio: ${contract.start_date}, Local: ${contract.location}, M√©todo: ${contract.method}`\n            };\n            \n            const { error: contractError } = await supabase\n              .from('clients')\n              .insert(contractInfo);\n            \n            if (contractError) {\n              console.error(`‚ùå Erro ao inserir contrato ${contract.contract_number}:`, contractError.message);\n              errorCount++;\n            } else {\n              console.log(`‚úÖ Contrato ${contract.contract_number} salvo como registro de cliente`);\n              successCount++;\n            }\n            \n          } catch (error) {\n            console.error(`‚ùå Erro ao processar contrato ${contract.contract_number}:`, error.message);\n            errorCount++;\n          }\n        }\n        \n        console.log('\\nüéâ IMPORTA√á√ÉO CONCLU√çDA!');\n        console.log('==================================================');\n        console.log(`‚úÖ Contratos importados com sucesso: ${successCount}`);\n        console.log(`‚ùå Erros: ${errorCount}`);\n        console.log('==================================================');\n        \n        resolve();\n      });\n  });\n}\n\n// Executar importa√ß√£o\nif (require.main === module) {\n  importCSV().catch(console.error);\n}\n\nmodule.exports = { importCSV };"],"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","ignoreList":[]}