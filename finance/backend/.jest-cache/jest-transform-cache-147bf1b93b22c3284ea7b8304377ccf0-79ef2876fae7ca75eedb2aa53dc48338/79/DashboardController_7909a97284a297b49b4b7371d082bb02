946faf86ffa28c438d958f12f71665fb
/* istanbul ignore next */
function cov_2ic6xj3s86() {
  var path = "/Users/insitutoareluna/Documents/repFinance/finance/backend/src/controllers/DashboardController.js";
  var hash = "e74298f063b0e1d182dc728a9df95a7ce704483c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/insitutoareluna/Documents/repFinance/finance/backend/src/controllers/DashboardController.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 29
        },
        end: {
          line: 1,
          column: 68
        }
      },
      "1": {
        start: {
          line: 2,
          column: 25
        },
        end: {
          line: 2,
          column: 65
        }
      },
      "2": {
        start: {
          line: 10,
          column: 20
        },
        end: {
          line: 23,
          column: 4
        }
      },
      "3": {
        start: {
          line: 11,
          column: 30
        },
        end: {
          line: 11,
          column: 39
        }
      },
      "4": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 22,
          column: 5
        }
      },
      "5": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 59
        }
      },
      "6": {
        start: {
          line: 15,
          column: 6
        },
        end: {
          line: 15,
          column: 26
        }
      },
      "7": {
        start: {
          line: 17,
          column: 6
        },
        end: {
          line: 17,
          column: 59
        }
      },
      "8": {
        start: {
          line: 18,
          column: 6
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "9": {
        start: {
          line: 30,
          column: 27
        },
        end: {
          line: 43,
          column: 4
        }
      },
      "10": {
        start: {
          line: 31,
          column: 48
        },
        end: {
          line: 31,
          column: 57
        }
      },
      "11": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 42,
          column: 5
        }
      },
      "12": {
        start: {
          line: 34,
          column: 24
        },
        end: {
          line: 34,
          column: 76
        }
      },
      "13": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 26
        }
      },
      "14": {
        start: {
          line: 37,
          column: 6
        },
        end: {
          line: 37,
          column: 63
        }
      },
      "15": {
        start: {
          line: 38,
          column: 6
        },
        end: {
          line: 41,
          column: 9
        }
      },
      "16": {
        start: {
          line: 50,
          column: 28
        },
        end: {
          line: 63,
          column: 4
        }
      },
      "17": {
        start: {
          line: 51,
          column: 30
        },
        end: {
          line: 51,
          column: 39
        }
      },
      "18": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "19": {
        start: {
          line: 54,
          column: 24
        },
        end: {
          line: 54,
          column: 71
        }
      },
      "20": {
        start: {
          line: 55,
          column: 6
        },
        end: {
          line: 55,
          column: 26
        }
      },
      "21": {
        start: {
          line: 57,
          column: 6
        },
        end: {
          line: 57,
          column: 77
        }
      },
      "22": {
        start: {
          line: 58,
          column: 6
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "23": {
        start: {
          line: 70,
          column: 31
        },
        end: {
          line: 83,
          column: 4
        }
      },
      "24": {
        start: {
          line: 71,
          column: 29
        },
        end: {
          line: 71,
          column: 38
        }
      },
      "25": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "26": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 74
        }
      },
      "27": {
        start: {
          line: 75,
          column: 6
        },
        end: {
          line: 75,
          column: 31
        }
      },
      "28": {
        start: {
          line: 77,
          column: 6
        },
        end: {
          line: 77,
          column: 66
        }
      },
      "29": {
        start: {
          line: 78,
          column: 6
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "30": {
        start: {
          line: 86,
          column: 0
        },
        end: {
          line: 86,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 33
          },
          end: {
            line: 10,
            column: 34
          }
        },
        loc: {
          start: {
            line: 10,
            column: 53
          },
          end: {
            line: 23,
            column: 3
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 30,
            column: 40
          },
          end: {
            line: 30,
            column: 41
          }
        },
        loc: {
          start: {
            line: 30,
            column: 60
          },
          end: {
            line: 43,
            column: 3
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 50,
            column: 41
          },
          end: {
            line: 50,
            column: 42
          }
        },
        loc: {
          start: {
            line: 50,
            column: 61
          },
          end: {
            line: 63,
            column: 3
          }
        },
        line: 50
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 70,
            column: 44
          },
          end: {
            line: 70,
            column: 45
          }
        },
        loc: {
          start: {
            line: 70,
            column: 64
          },
          end: {
            line: 83,
            column: 3
          }
        },
        line: 70
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 12
          },
          end: {
            line: 11,
            column: 25
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 21
          },
          end: {
            line: 11,
            column: 25
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 31,
            column: 25
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 31,
            column: 21
          },
          end: {
            line: 31,
            column: 25
          }
        }],
        line: 31
      },
      "2": {
        loc: {
          start: {
            line: 31,
            column: 27
          },
          end: {
            line: 31,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 31,
            column: 34
          },
          end: {
            line: 31,
            column: 43
          }
        }],
        line: 31
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 51,
            column: 25
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 51,
            column: 21
          },
          end: {
            line: 51,
            column: 25
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 71,
            column: 12
          },
          end: {
            line: 71,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 71,
            column: 20
          },
          end: {
            line: 71,
            column: 24
          }
        }],
        line: 71
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e74298f063b0e1d182dc728a9df95a7ce704483c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ic6xj3s86 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ic6xj3s86();
const {
  DashboardService
} =
/* istanbul ignore next */
(cov_2ic6xj3s86().s[0]++, require('../services/DashboardService'));
const {
  asyncHandler
} =
/* istanbul ignore next */
(cov_2ic6xj3s86().s[1]++, require('../middleware/errorMiddleware'));
class DashboardController {
  /**
   * Obter estatísticas gerais do dashboard
   * @route GET /api/dashboard/stats
   * @access Public (temporário para desenvolvimento)
   */
  static getStats =
  /* istanbul ignore next */
  (cov_2ic6xj3s86().s[2]++, asyncHandler(async (req, res) => {
    /* istanbul ignore next */
    cov_2ic6xj3s86().f[0]++;
    const {
      period =
      /* istanbul ignore next */
      (cov_2ic6xj3s86().b[0][0]++, '30')
    } =
    /* istanbul ignore next */
    (cov_2ic6xj3s86().s[3]++, req.query);
    /* istanbul ignore next */
    cov_2ic6xj3s86().s[4]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_2ic6xj3s86().s[5]++, await DashboardService.getStats(period));
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[6]++;
      res.json({
        stats
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[7]++;
      console.error('Erro ao buscar estatísticas:', error);
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[8]++;
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'STATS_FETCH_ERROR'
      });
    }
  }));

  /**
   * Obter gráfico de receita por período
   * @route GET /api/dashboard/revenue-chart
   * @access Private
   */
  static getRevenueChart =
  /* istanbul ignore next */
  (cov_2ic6xj3s86().s[9]++, asyncHandler(async (req, res) => {
    /* istanbul ignore next */
    cov_2ic6xj3s86().f[1]++;
    const {
      period =
      /* istanbul ignore next */
      (cov_2ic6xj3s86().b[1][0]++, '12'),
      type =
      /* istanbul ignore next */
      (cov_2ic6xj3s86().b[2][0]++, 'monthly')
    } =
    /* istanbul ignore next */
    (cov_2ic6xj3s86().s[10]++, req.query);
    /* istanbul ignore next */
    cov_2ic6xj3s86().s[11]++;
    try {
      const chartData =
      /* istanbul ignore next */
      (cov_2ic6xj3s86().s[12]++, await DashboardService.getRevenueChart(period, type));
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[13]++;
      res.json(chartData);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[14]++;
      console.error('Erro ao buscar dados do gráfico:', error);
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[15]++;
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'CHART_FETCH_ERROR'
      });
    }
  }));

  /**
   * Obter gráfico de pagamentos por status
   * @route GET /api/dashboard/payments-chart
   * @access Private
   */
  static getPaymentsChart =
  /* istanbul ignore next */
  (cov_2ic6xj3s86().s[16]++, asyncHandler(async (req, res) => {
    /* istanbul ignore next */
    cov_2ic6xj3s86().f[2]++;
    const {
      period =
      /* istanbul ignore next */
      (cov_2ic6xj3s86().b[3][0]++, '30')
    } =
    /* istanbul ignore next */
    (cov_2ic6xj3s86().s[17]++, req.query);
    /* istanbul ignore next */
    cov_2ic6xj3s86().s[18]++;
    try {
      const chartData =
      /* istanbul ignore next */
      (cov_2ic6xj3s86().s[19]++, await DashboardService.getPaymentsChart(period));
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[20]++;
      res.json(chartData);
    } catch (error) {
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[21]++;
      console.error('Erro ao buscar dados do gráfico de pagamentos:', error);
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[22]++;
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'PAYMENTS_CHART_FETCH_ERROR'
      });
    }
  }));

  /**
   * Obter atividades recentes
   * @route GET /api/dashboard/recent-activities
   * @access Private
   */
  static getRecentActivities =
  /* istanbul ignore next */
  (cov_2ic6xj3s86().s[23]++, asyncHandler(async (req, res) => {
    /* istanbul ignore next */
    cov_2ic6xj3s86().f[3]++;
    const {
      limit =
      /* istanbul ignore next */
      (cov_2ic6xj3s86().b[4][0]++, '10')
    } =
    /* istanbul ignore next */
    (cov_2ic6xj3s86().s[24]++, req.query);
    /* istanbul ignore next */
    cov_2ic6xj3s86().s[25]++;
    try {
      const activities =
      /* istanbul ignore next */
      (cov_2ic6xj3s86().s[26]++, await DashboardService.getRecentActivities(limit));
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[27]++;
      res.json({
        activities
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[28]++;
      console.error('Erro ao buscar atividades recentes:', error);
      /* istanbul ignore next */
      cov_2ic6xj3s86().s[29]++;
      res.status(500).json({
        error: 'Erro interno do servidor',
        code: 'ACTIVITIES_FETCH_ERROR'
      });
    }
  }));
}
/* istanbul ignore next */
cov_2ic6xj3s86().s[30]++;
module.exports = {
  DashboardController
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,