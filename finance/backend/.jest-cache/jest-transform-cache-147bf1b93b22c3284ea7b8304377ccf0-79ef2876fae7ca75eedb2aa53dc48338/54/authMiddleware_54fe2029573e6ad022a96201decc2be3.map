{"version":3,"names":["cov_1b6vpqw0b","actualCoverage","jwt","s","require","supabase","supabaseAdmin","authenticateToken","req","res","next","f","process","env","NODE_ENV","b","user","id","email","role","authHeader","headers","token","split","status","json","error","code","data","auth","getUser","console","log","userData","userError","from","select","eq","single","supabaseUser","requireRole","roles","userRoles","Array","isArray","includes","required","current","requireClientAccess","clientId","params","body","client_id","module","exports"],"sources":["authMiddleware.js"],"sourcesContent":["const jwt = require('jsonwebtoken');\nconst { supabase, supabaseAdmin } = require('../config/supabase');\n\n// Middleware para verificar token JWT\nconst authenticateToken = async (req, res, next) => {\n  try {\n    // Em desenvolvimento, bypass da autenticação\n    if (process.env.NODE_ENV === 'development') {\n      req.user = {\n        id: 'dev-user-id',\n        email: 'dev@example.com',\n        role: 'admin'\n      };\n      return next();\n    }\n\n    const authHeader = req.headers['authorization'];\n    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n    if (!token) {\n      return res.status(401).json({ \n        error: 'Token de acesso requerido',\n        code: 'MISSING_TOKEN'\n      });\n    }\n\n    // Verificar token com Supabase\n    const { data: { user }, error } = await supabase.auth.getUser(token);\n    \n    if (error || !user) {\n      console.log('Erro na verificação do token:', error);\n      return res.status(401).json({ \n        error: 'Token inválido ou expirado',\n        code: 'INVALID_TOKEN'\n      });\n    }\n\n    console.log('Usuário do token:', user.id, user.email);\n\n    // Buscar dados completos do usuário usando user_id\n    const { data: userData, error: userError } = await supabaseAdmin\n      .from('user_profiles')\n      .select('*')\n      .eq('user_id', user.id)\n      .single();\n\n    console.log('Resultado da busca user_profiles:', { userData, userError });\n\n    if (userError || !userData) {\n      return res.status(401).json({ \n        error: 'Usuário não encontrado no sistema',\n        code: 'USER_NOT_FOUND'\n      });\n    }\n\n    // Comentado: campo is_active não existe na tabela user_profiles\n    // if (!userData.is_active) {\n    //   return res.status(401).json({ \n    //     error: 'Usuário inativo',\n    //     code: 'USER_INACTIVE'\n    //   });\n    // }\n\n    req.user = userData;\n    req.supabaseUser = user;\n    next();\n  } catch (error) {\n    console.error('Erro na autenticação:', error);\n    res.status(500).json({ \n      error: 'Erro interno do servidor',\n      code: 'INTERNAL_ERROR'\n    });\n  }\n};\n\n// Middleware para verificar roles específicos\nconst requireRole = (roles) => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ \n        error: 'Usuário não autenticado',\n        code: 'NOT_AUTHENTICATED'\n      });\n    }\n\n    const userRoles = Array.isArray(roles) ? roles : [roles];\n    \n    if (!userRoles.includes(req.user.role)) {\n      return res.status(403).json({ \n        error: 'Acesso negado. Permissões insuficientes.',\n        code: 'INSUFFICIENT_PERMISSIONS',\n        required: userRoles,\n        current: req.user.role\n      });\n    }\n\n    next();\n  };\n};\n\n// Middleware removido - tabela branches não existe mais\n// const requireBranchAccess = ...\n\n// Middleware para verificar se o usuário pode acessar dados de um cliente específico\nconst requireClientAccess = async (req, res, next) => {\n  try {\n    const clientId = req.params.clientId || req.body.client_id;\n    \n    if (!clientId) {\n      return next(); // Se não há clientId, prosseguir\n    }\n\n    // Admins e analistas podem acessar qualquer cliente\n    if (['admin', 'analyst'].includes(req.user.role)) {\n      return next();\n    }\n\n    // Clientes só podem acessar seus próprios dados\n    if (req.user.role === 'client' && req.user.client_id !== clientId) {\n      return res.status(403).json({ \n        error: 'Acesso negado. Você só pode acessar seus próprios dados.',\n        code: 'CLIENT_ACCESS_DENIED'\n      });\n    }\n\n    // Verificação de filial removida - tabela branches não existe mais\n    // Recepção pode acessar todos os clientes\n\n    next();\n  } catch (error) {\n    console.error('Erro na verificação de acesso ao cliente:', error);\n    res.status(500).json({ \n      error: 'Erro interno do servidor',\n      code: 'INTERNAL_ERROR'\n    });\n  }\n};\n\nmodule.exports = {\n  authenticateToken,\n  requireRole,\n  // requireBranchAccess removido - tabela branches não existe mais\n  requireClientAccess\n};"],"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","ignoreList":[]}