{"version":3,"names":["cov_299msg6u5j","actualCoverage","s","require","config","createClient","fs","csv","path","supabase","process","env","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","CSV_DIR","importAllData","f","console","log","cleanDatabase","clientsResult","importClients","success","errors","b","contractsResult","importContracts","paymentsResult","importPayments","verifyFinalIntegrity","totalSuccess","totalErrors","error","message","from","delete","neq","Promise","resolve","results","clientsFile","join","createReadStream","pipe","on","row","uniqueEmail","email","substring","id","split","uniqueExternalId","clientData","first_name","last_name","phone","mobile","tax_id","birth_date","address","city","postal_code","country","notes","insert","contractsFile","clientExternalId","client_id","data","select","eq","single","uniqueContractNumber","contract_number","contractData","description","value","parseFloat","start_date","end_date","status","payment_frequency","external_id","paymentsFile","contractExternalId","contract_id","paymentData","installment_number","parseInt","amount","due_date","paid_date","payment_method","reference_number","receipt_path","count","clientsCount","head","contractsCount","paymentsCount","catch"],"sources":["import_all_data.js"],"sourcesContent":["require('dotenv').config();\nconst { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst path = require('path');\n\n// Usar service_role key para ter permiss√µes administrativas\nconst supabase = createClient(\n  process.env.SUPABASE_URL, \n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nconst CSV_DIR = '/Users/insitutoareluna/Documents/finance/importBD';\n\nasync function importAllData() {\n  console.log('üöÄ IMPORTA√á√ÉO COMPLETA DE DADOS');\n  console.log('==================================================');\n  \n  try {\n    // 1. Limpar dados existentes\n    console.log('\\nüßπ Limpando dados existentes...');\n    await cleanDatabase();\n    \n    // 2. Importar clientes\n    console.log('\\nüë• Importando clientes...');\n    const clientsResult = await importClients();\n    console.log(`‚úÖ Clientes importados: ${clientsResult.success}`);\n    console.log(`‚ùå Erros em clientes: ${clientsResult.errors}`);\n    \n    if (clientsResult.errors > 0) {\n      console.log('‚ö†Ô∏è  H√° erros na importa√ß√£o de clientes. Continuando...');\n    }\n    \n    // 3. Importar contratos\n    console.log('\\nüìÑ Importando contratos...');\n    const contractsResult = await importContracts();\n    console.log(`‚úÖ Contratos importados: ${contractsResult.success}`);\n    console.log(`‚ùå Erros em contratos: ${contractsResult.errors}`);\n    \n    if (contractsResult.errors > 0) {\n      console.log('‚ö†Ô∏è  H√° erros na importa√ß√£o de contratos. Continuando...');\n    }\n    \n    // 4. Importar pagamentos\n    console.log('\\nüí∞ Importando pagamentos...');\n    const paymentsResult = await importPayments();\n    console.log(`‚úÖ Pagamentos importados: ${paymentsResult.success}`);\n    console.log(`‚ùå Erros em pagamentos: ${paymentsResult.errors}`);\n    \n    // 5. Verificar integridade final\n    console.log('\\nüîç Verificando integridade dos dados...');\n    await verifyFinalIntegrity();\n    \n    // 6. Resumo final\n    console.log('\\nüìä RESUMO FINAL DA IMPORTA√á√ÉO:');\n    console.log(`üë• Clientes: ${clientsResult.success} sucessos, ${clientsResult.errors} erros`);\n    console.log(`üìÑ Contratos: ${contractsResult.success} sucessos, ${contractsResult.errors} erros`);\n    console.log(`üí∞ Pagamentos: ${paymentsResult.success} sucessos, ${paymentsResult.errors} erros`);\n    \n    const totalSuccess = clientsResult.success + contractsResult.success + paymentsResult.success;\n    const totalErrors = clientsResult.errors + contractsResult.errors + paymentsResult.errors;\n    \n    console.log(`\\nüéØ TOTAL GERAL: ${totalSuccess} sucessos, ${totalErrors} erros`);\n    \n    if (totalErrors === 0) {\n      console.log('\\nüéâ IMPORTA√á√ÉO COMPLETA REALIZADA COM SUCESSO!');\n    } else {\n      console.log('\\n‚ö†Ô∏è  IMPORTA√á√ÉO COMPLETA COM ALGUNS ERROS - VERIFIQUE OS LOGS ACIMA');\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Erro na importa√ß√£o completa:', error.message);\n  }\n}\n\nasync function cleanDatabase() {\n  // Limpar na ordem correta (depend√™ncias)\n  await supabase.from('payments').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n  await supabase.from('contracts').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n  await supabase.from('clients').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n  console.log('‚úÖ Banco de dados limpo');\n}\n\nasync function importClients() {\n  return new Promise((resolve) => {\n    const results = { success: 0, errors: 0 };\n    const clientsFile = path.join(CSV_DIR, 'clients.csv');\n    \n    fs.createReadStream(clientsFile)\n      .pipe(csv())\n      .on('data', async (row) => {\n        try {\n          // Preparar dados √∫nicos\n          const uniqueEmail = `${row.email.substring(0, 40)}_${row.id.substring(0, 8)}@${row.email.split('@')[1] || 'example.com'}`.substring(0, 100);\n          const uniqueExternalId = `CLI_${row.id.substring(0, 46)}`.substring(0, 50);\n          \n          const clientData = {\n            first_name: row.first_name?.substring(0, 255) || 'Nome',\n            last_name: row.last_name?.substring(0, 255) || 'Sobrenome',\n            email: uniqueEmail,\n            phone: row.phone?.substring(0, 50) || null,\n            mobile: row.mobile?.substring(0, 50) || null,\n            tax_id: row.tax_id?.substring(0, 50) || null,\n            birth_date: row.birth_date || null,\n            address: row.address || null,\n            city: row.city?.substring(0, 100) || null,\n            postal_code: row.postal_code?.substring(0, 20) || null,\n            country: row.country?.substring(0, 100) || 'Portugal',\n            notes: row.notes || null\n          };\n          \n          const { error } = await supabase\n            .from('clients')\n            .insert([clientData]);\n          \n          if (error) {\n            console.error(`‚ùå Erro ao inserir cliente ${row.id}:`, error.message);\n            results.errors++;\n          } else {\n            results.success++;\n          }\n        } catch (error) {\n          console.error(`‚ùå Erro ao processar cliente ${row.id}:`, error.message);\n          results.errors++;\n        }\n      })\n      .on('end', () => {\n        resolve(results);\n      });\n  });\n}\n\nasync function importContracts() {\n  return new Promise((resolve) => {\n    const results = { success: 0, errors: 0 };\n    const contractsFile = path.join(CSV_DIR, 'contracts.csv');\n    \n    fs.createReadStream(contractsFile)\n      .pipe(csv())\n      .on('data', async (row) => {\n        try {\n          // Verificar se o cliente existe\n          const clientExternalId = `CLI_${row.client_id.substring(0, 46)}`.substring(0, 50);\n          const { data: clientData } = await supabase\n            .from('clients')\n            .select('id')\n            .eq('external_id', clientExternalId)\n            .single();\n          \n          if (!clientData) {\n            console.error(`‚ùå Cliente n√£o encontrado para contrato ${row.id}`);\n            results.errors++;\n            return;\n          }\n          \n          // Preparar dados √∫nicos\n          const uniqueContractNumber = `${row.contract_number}_${row.id.substring(0, 8)}`.substring(0, 50);\n          const uniqueExternalId = `CON_${row.id.substring(0, 46)}`.substring(0, 50);\n          \n          const contractData = {\n            client_id: clientData.id,\n            contract_number: uniqueContractNumber,\n            description: row.description?.substring(0, 255) || null,\n            value: parseFloat(row.value) || 0,\n            start_date: row.start_date || null,\n            end_date: row.end_date || null,\n            status: row.status || 'active',\n            payment_frequency: row.payment_frequency || 'monthly',\n            notes: row.notes || null,\n            external_id: uniqueExternalId\n          };\n          \n          const { error } = await supabase\n            .from('contracts')\n            .insert([contractData]);\n          \n          if (error) {\n            console.error(`‚ùå Erro ao inserir contrato ${row.id}:`, error.message);\n            results.errors++;\n          } else {\n            results.success++;\n          }\n        } catch (error) {\n          console.error(`‚ùå Erro ao processar contrato ${row.id}:`, error.message);\n          results.errors++;\n        }\n      })\n      .on('end', () => {\n        resolve(results);\n      });\n  });\n}\n\nasync function importPayments() {\n  return new Promise((resolve) => {\n    const results = { success: 0, errors: 0 };\n    const paymentsFile = path.join(CSV_DIR, 'payments.csv');\n    \n    fs.createReadStream(paymentsFile)\n      .pipe(csv())\n      .on('data', async (row) => {\n        try {\n          // Verificar se o contrato existe\n          const contractExternalId = `CON_${row.contract_id.substring(0, 46)}`.substring(0, 50);\n          const { data: contractData } = await supabase\n            .from('contracts')\n            .select('id')\n            .eq('external_id', contractExternalId)\n            .single();\n          \n          if (!contractData) {\n            console.error(`‚ùå Contrato n√£o encontrado para pagamento ${row.id}`);\n            results.errors++;\n            return;\n          }\n          \n          // Preparar dados √∫nicos\n          const uniqueExternalId = `PAY_${row.id.substring(0, 46)}`.substring(0, 50);\n          \n          const paymentData = {\n            contract_id: contractData.id,\n            installment_number: parseInt(row.installment_number) || 1,\n            amount: parseFloat(row.amount) || 0,\n            due_date: row.due_date || null,\n            paid_date: row.paid_date || null,\n            payment_method: row.payment_method?.substring(0, 50) || 'other',\n            status: row.status || 'pending',\n            reference_number: row.reference_number?.substring(0, 100) || null,\n            receipt_path: row.receipt_path?.substring(0, 500) || null,\n            notes: row.notes || null,\n            external_id: uniqueExternalId\n          };\n          \n          const { error } = await supabase\n            .from('payments')\n            .insert([paymentData]);\n          \n          if (error) {\n            console.error(`‚ùå Erro ao inserir pagamento ${row.id}:`, error.message);\n            results.errors++;\n          } else {\n            results.success++;\n          }\n        } catch (error) {\n          console.error(`‚ùå Erro ao processar pagamento ${row.id}:`, error.message);\n          results.errors++;\n        }\n      })\n      .on('end', () => {\n        resolve(results);\n      });\n  });\n}\n\nasync function verifyFinalIntegrity() {\n  const { count: clientsCount } = await supabase\n    .from('clients')\n    .select('*', { count: 'exact', head: true });\n  \n  const { count: contractsCount } = await supabase\n    .from('contracts')\n    .select('*', { count: 'exact', head: true });\n  \n  const { count: paymentsCount } = await supabase\n    .from('payments')\n    .select('*', { count: 'exact', head: true });\n  \n  console.log(`üìä Registros finais: ${clientsCount} clientes, ${contractsCount} contratos, ${paymentsCount} pagamentos`);\n}\n\nimportAllData().catch(console.error);"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;AAfZC,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;AAC1B,MAAM;EAAEC;AAAa,CAAC;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,OAAGC,OAAO,CAAC,uBAAuB,CAAC;AACzD,MAAMG,EAAE;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,OAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMI,GAAG;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,OAAGC,OAAO,CAAC,YAAY,CAAC;AACjC,MAAMK,IAAI;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,OAAGC,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA,MAAMM,QAAQ;AAAA;AAAA,CAAAT,cAAA,GAAAE,CAAA,OAAGG,YAAY,CAC3BK,OAAO,CAACC,GAAG,CAACC,YAAY,EACxBF,OAAO,CAACC,GAAG,CAACE,yBAAyB,EACrC;EACEC,IAAI,EAAE;IACJC,gBAAgB,EAAE,KAAK;IACvBC,cAAc,EAAE;EAClB;AACF,CACF,CAAC;AAED,MAAMC,OAAO;AAAA;AAAA,CAAAjB,cAAA,GAAAE,CAAA,OAAG,mDAAmD;AAEnE,eAAegB,aAAaA,CAAA,EAAG;EAAA;EAAAlB,cAAA,GAAAmB,CAAA;EAAAnB,cAAA,GAAAE,CAAA;EAC7BkB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;EAAC;EAAArB,cAAA,GAAAE,CAAA;EAC/CkB,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;EAAC;EAAArB,cAAA,GAAAE,CAAA;EAElE,IAAI;IAAA;IAAAF,cAAA,GAAAE,CAAA;IACF;IACAkB,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IACjD,MAAMoB,aAAa,CAAC,CAAC;;IAErB;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IACAkB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1C,MAAME,aAAa;IAAA;IAAA,CAAAvB,cAAA,GAAAE,CAAA,QAAG,MAAMsB,aAAa,CAAC,CAAC;IAAC;IAAAxB,cAAA,GAAAE,CAAA;IAC5CkB,OAAO,CAACC,GAAG,CAAC,0BAA0BE,aAAa,CAACE,OAAO,EAAE,CAAC;IAAC;IAAAzB,cAAA,GAAAE,CAAA;IAC/DkB,OAAO,CAACC,GAAG,CAAC,wBAAwBE,aAAa,CAACG,MAAM,EAAE,CAAC;IAAC;IAAA1B,cAAA,GAAAE,CAAA;IAE5D,IAAIqB,aAAa,CAACG,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA1B,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MAC5BkB,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;IACvE,CAAC;IAAA;IAAA;MAAArB,cAAA,GAAA2B,CAAA;IAAA;;IAED;IAAA3B,cAAA,GAAAE,CAAA;IACAkB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,MAAMO,eAAe;IAAA;IAAA,CAAA5B,cAAA,GAAAE,CAAA,QAAG,MAAM2B,eAAe,CAAC,CAAC;IAAC;IAAA7B,cAAA,GAAAE,CAAA;IAChDkB,OAAO,CAACC,GAAG,CAAC,2BAA2BO,eAAe,CAACH,OAAO,EAAE,CAAC;IAAC;IAAAzB,cAAA,GAAAE,CAAA;IAClEkB,OAAO,CAACC,GAAG,CAAC,yBAAyBO,eAAe,CAACF,MAAM,EAAE,CAAC;IAAC;IAAA1B,cAAA,GAAAE,CAAA;IAE/D,IAAI0B,eAAe,CAACF,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA1B,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MAC9BkB,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;IACxE,CAAC;IAAA;IAAA;MAAArB,cAAA,GAAA2B,CAAA;IAAA;;IAED;IAAA3B,cAAA,GAAAE,CAAA;IACAkB,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C,MAAMS,cAAc;IAAA;IAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAG,MAAM6B,cAAc,CAAC,CAAC;IAAC;IAAA/B,cAAA,GAAAE,CAAA;IAC9CkB,OAAO,CAACC,GAAG,CAAC,4BAA4BS,cAAc,CAACL,OAAO,EAAE,CAAC;IAAC;IAAAzB,cAAA,GAAAE,CAAA;IAClEkB,OAAO,CAACC,GAAG,CAAC,0BAA0BS,cAAc,CAACJ,MAAM,EAAE,CAAC;;IAE9D;IAAA;IAAA1B,cAAA,GAAAE,CAAA;IACAkB,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IACzD,MAAM8B,oBAAoB,CAAC,CAAC;;IAE5B;IAAA;IAAAhC,cAAA,GAAAE,CAAA;IACAkB,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAAC;IAAArB,cAAA,GAAAE,CAAA;IAChDkB,OAAO,CAACC,GAAG,CAAC,gBAAgBE,aAAa,CAACE,OAAO,cAAcF,aAAa,CAACG,MAAM,QAAQ,CAAC;IAAC;IAAA1B,cAAA,GAAAE,CAAA;IAC7FkB,OAAO,CAACC,GAAG,CAAC,iBAAiBO,eAAe,CAACH,OAAO,cAAcG,eAAe,CAACF,MAAM,QAAQ,CAAC;IAAC;IAAA1B,cAAA,GAAAE,CAAA;IAClGkB,OAAO,CAACC,GAAG,CAAC,kBAAkBS,cAAc,CAACL,OAAO,cAAcK,cAAc,CAACJ,MAAM,QAAQ,CAAC;IAEhG,MAAMO,YAAY;IAAA;IAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAGqB,aAAa,CAACE,OAAO,GAAGG,eAAe,CAACH,OAAO,GAAGK,cAAc,CAACL,OAAO;IAC7F,MAAMS,WAAW;IAAA;IAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAGqB,aAAa,CAACG,MAAM,GAAGE,eAAe,CAACF,MAAM,GAAGI,cAAc,CAACJ,MAAM;IAAC;IAAA1B,cAAA,GAAAE,CAAA;IAE1FkB,OAAO,CAACC,GAAG,CAAC,qBAAqBY,YAAY,cAAcC,WAAW,QAAQ,CAAC;IAAC;IAAAlC,cAAA,GAAAE,CAAA;IAEhF,IAAIgC,WAAW,KAAK,CAAC,EAAE;MAAA;MAAAlC,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MACrBkB,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;IAChE,CAAC,MAAM;MAAA;MAAArB,cAAA,GAAA2B,CAAA;MAAA3B,cAAA,GAAAE,CAAA;MACLkB,OAAO,CAACC,GAAG,CAAC,sEAAsE,CAAC;IACrF;EAEF,CAAC,CAAC,OAAOc,KAAK,EAAE;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IACdkB,OAAO,CAACe,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACC,OAAO,CAAC;EAChE;AACF;AAEA,eAAed,aAAaA,CAAA,EAAG;EAAA;EAAAtB,cAAA,GAAAmB,CAAA;EAAAnB,cAAA,GAAAE,CAAA;EAC7B;EACA,MAAMO,QAAQ,CAAC4B,IAAI,CAAC,UAAU,CAAC,CAACC,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,IAAI,EAAE,sCAAsC,CAAC;EAAC;EAAAvC,cAAA,GAAAE,CAAA;EAC3F,MAAMO,QAAQ,CAAC4B,IAAI,CAAC,WAAW,CAAC,CAACC,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,IAAI,EAAE,sCAAsC,CAAC;EAAC;EAAAvC,cAAA,GAAAE,CAAA;EAC5F,MAAMO,QAAQ,CAAC4B,IAAI,CAAC,SAAS,CAAC,CAACC,MAAM,CAAC,CAAC,CAACC,GAAG,CAAC,IAAI,EAAE,sCAAsC,CAAC;EAAC;EAAAvC,cAAA,GAAAE,CAAA;EAC1FkB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;AACvC;AAEA,eAAeG,aAAaA,CAAA,EAAG;EAAA;EAAAxB,cAAA,GAAAmB,CAAA;EAAAnB,cAAA,GAAAE,CAAA;EAC7B,OAAO,IAAIsC,OAAO,CAAEC,OAAO,IAAK;IAAA;IAAAzC,cAAA,GAAAmB,CAAA;IAC9B,MAAMuB,OAAO;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAG;MAAEuB,OAAO,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;IACzC,MAAMiB,WAAW;IAAA;IAAA,CAAA3C,cAAA,GAAAE,CAAA,QAAGM,IAAI,CAACoC,IAAI,CAAC3B,OAAO,EAAE,aAAa,CAAC;IAAC;IAAAjB,cAAA,GAAAE,CAAA;IAEtDI,EAAE,CAACuC,gBAAgB,CAACF,WAAW,CAAC,CAC7BG,IAAI,CAACvC,GAAG,CAAC,CAAC,CAAC,CACXwC,EAAE,CAAC,MAAM,EAAE,MAAOC,GAAG,IAAK;MAAA;MAAAhD,cAAA,GAAAmB,CAAA;MAAAnB,cAAA,GAAAE,CAAA;MACzB,IAAI;QACF;QACA,MAAM+C,WAAW;QAAA;QAAA,CAAAjD,cAAA,GAAAE,CAAA,QAAG,GAAG8C,GAAG,CAACE,KAAK,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,IAAIH,GAAG,CAACI,EAAE,CAACD,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;QAAI;QAAA,CAAAnD,cAAA,GAAA2B,CAAA,UAAAqB,GAAG,CAACE,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAAA;QAAA,CAAArD,cAAA,GAAA2B,CAAA,UAAI,aAAa,GAAE,CAACwB,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;QAC3I,MAAMG,gBAAgB;QAAA;QAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAG,OAAO8C,GAAG,CAACI,EAAE,CAACD,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;QAE1E,MAAMI,UAAU;QAAA;QAAA,CAAAvD,cAAA,GAAAE,CAAA,QAAG;UACjBsD,UAAU;UAAE;UAAA,CAAAxD,cAAA,GAAA2B,CAAA,UAAAqB,GAAG,CAACQ,UAAU,EAAEL,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,UAAI,MAAM;UACvD8B,SAAS;UAAE;UAAA,CAAAzD,cAAA,GAAA2B,CAAA,UAAAqB,GAAG,CAACS,SAAS,EAAEN,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,UAAI,WAAW;UAC1DuB,KAAK,EAAED,WAAW;UAClBS,KAAK;UAAE;UAAA,CAAA1D,cAAA,GAAA2B,CAAA,UAAAqB,GAAG,CAACU,KAAK,EAAEP,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,UAAI,IAAI;UAC1CgC,MAAM;UAAE;UAAA,CAAA3D,cAAA,GAAA2B,CAAA,UAAAqB,GAAG,CAACW,MAAM,EAAER,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,UAAI,IAAI;UAC5CiC,MAAM;UAAE;UAAA,CAAA5D,cAAA,GAAA2B,CAAA,UAAAqB,GAAG,CAACY,MAAM,EAAET,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,UAAI,IAAI;UAC5CkC,UAAU;UAAE;UAAA,CAAA7D,cAAA,GAAA2B,CAAA,UAAAqB,GAAG,CAACa,UAAU;UAAA;UAAA,CAAA7D,cAAA,GAAA2B,CAAA,UAAI,IAAI;UAClCmC,OAAO;UAAE;UAAA,CAAA9D,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACc,OAAO;UAAA;UAAA,CAAA9D,cAAA,GAAA2B,CAAA,WAAI,IAAI;UAC5BoC,IAAI;UAAE;UAAA,CAAA/D,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACe,IAAI,EAAEZ,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,WAAI,IAAI;UACzCqC,WAAW;UAAE;UAAA,CAAAhE,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACgB,WAAW,EAAEb,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,WAAI,IAAI;UACtDsC,OAAO;UAAE;UAAA,CAAAjE,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACiB,OAAO,EAAEd,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,WAAI,UAAU;UACrDuC,KAAK;UAAE;UAAA,CAAAlE,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACkB,KAAK;UAAA;UAAA,CAAAlE,cAAA,GAAA2B,CAAA,WAAI,IAAI;QAC1B,CAAC;QAED,MAAM;UAAEQ;QAAM,CAAC;QAAA;QAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAG,MAAMO,QAAQ,CAC7B4B,IAAI,CAAC,SAAS,CAAC,CACf8B,MAAM,CAAC,CAACZ,UAAU,CAAC,CAAC;QAAC;QAAAvD,cAAA,GAAAE,CAAA;QAExB,IAAIiC,KAAK,EAAE;UAAA;UAAAnC,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACTkB,OAAO,CAACe,KAAK,CAAC,6BAA6Ba,GAAG,CAACI,EAAE,GAAG,EAAEjB,KAAK,CAACC,OAAO,CAAC;UAAC;UAAApC,cAAA,GAAAE,CAAA;UACrEwC,OAAO,CAAChB,MAAM,EAAE;QAClB,CAAC,MAAM;UAAA;UAAA1B,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACLwC,OAAO,CAACjB,OAAO,EAAE;QACnB;MACF,CAAC,CAAC,OAAOU,KAAK,EAAE;QAAA;QAAAnC,cAAA,GAAAE,CAAA;QACdkB,OAAO,CAACe,KAAK,CAAC,+BAA+Ba,GAAG,CAACI,EAAE,GAAG,EAAEjB,KAAK,CAACC,OAAO,CAAC;QAAC;QAAApC,cAAA,GAAAE,CAAA;QACvEwC,OAAO,CAAChB,MAAM,EAAE;MAClB;IACF,CAAC,CAAC,CACDqB,EAAE,CAAC,KAAK,EAAE,MAAM;MAAA;MAAA/C,cAAA,GAAAmB,CAAA;MAAAnB,cAAA,GAAAE,CAAA;MACfuC,OAAO,CAACC,OAAO,CAAC;IAClB,CAAC,CAAC;EACN,CAAC,CAAC;AACJ;AAEA,eAAeb,eAAeA,CAAA,EAAG;EAAA;EAAA7B,cAAA,GAAAmB,CAAA;EAAAnB,cAAA,GAAAE,CAAA;EAC/B,OAAO,IAAIsC,OAAO,CAAEC,OAAO,IAAK;IAAA;IAAAzC,cAAA,GAAAmB,CAAA;IAC9B,MAAMuB,OAAO;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAG;MAAEuB,OAAO,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;IACzC,MAAM0C,aAAa;IAAA;IAAA,CAAApE,cAAA,GAAAE,CAAA,QAAGM,IAAI,CAACoC,IAAI,CAAC3B,OAAO,EAAE,eAAe,CAAC;IAAC;IAAAjB,cAAA,GAAAE,CAAA;IAE1DI,EAAE,CAACuC,gBAAgB,CAACuB,aAAa,CAAC,CAC/BtB,IAAI,CAACvC,GAAG,CAAC,CAAC,CAAC,CACXwC,EAAE,CAAC,MAAM,EAAE,MAAOC,GAAG,IAAK;MAAA;MAAAhD,cAAA,GAAAmB,CAAA;MAAAnB,cAAA,GAAAE,CAAA;MACzB,IAAI;QACF;QACA,MAAMmE,gBAAgB;QAAA;QAAA,CAAArE,cAAA,GAAAE,CAAA,QAAG,OAAO8C,GAAG,CAACsB,SAAS,CAACnB,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;QACjF,MAAM;UAAEoB,IAAI,EAAEhB;QAAW,CAAC;QAAA;QAAA,CAAAvD,cAAA,GAAAE,CAAA,QAAG,MAAMO,QAAQ,CACxC4B,IAAI,CAAC,SAAS,CAAC,CACfmC,MAAM,CAAC,IAAI,CAAC,CACZC,EAAE,CAAC,aAAa,EAAEJ,gBAAgB,CAAC,CACnCK,MAAM,CAAC,CAAC;QAAC;QAAA1E,cAAA,GAAAE,CAAA;QAEZ,IAAI,CAACqD,UAAU,EAAE;UAAA;UAAAvD,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACfkB,OAAO,CAACe,KAAK,CAAC,0CAA0Ca,GAAG,CAACI,EAAE,EAAE,CAAC;UAAC;UAAApD,cAAA,GAAAE,CAAA;UAClEwC,OAAO,CAAChB,MAAM,EAAE;UAAC;UAAA1B,cAAA,GAAAE,CAAA;UACjB;QACF,CAAC;QAAA;QAAA;UAAAF,cAAA,GAAA2B,CAAA;QAAA;;QAED;QACA,MAAMgD,oBAAoB;QAAA;QAAA,CAAA3E,cAAA,GAAAE,CAAA,QAAG,GAAG8C,GAAG,CAAC4B,eAAe,IAAI5B,GAAG,CAACI,EAAE,CAACD,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;QAChG,MAAMG,gBAAgB;QAAA;QAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAG,OAAO8C,GAAG,CAACI,EAAE,CAACD,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;QAE1E,MAAM0B,YAAY;QAAA;QAAA,CAAA7E,cAAA,GAAAE,CAAA,QAAG;UACnBoE,SAAS,EAAEf,UAAU,CAACH,EAAE;UACxBwB,eAAe,EAAED,oBAAoB;UACrCG,WAAW;UAAE;UAAA,CAAA9E,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAAC8B,WAAW,EAAE3B,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,WAAI,IAAI;UACvDoD,KAAK;UAAE;UAAA,CAAA/E,cAAA,GAAA2B,CAAA,WAAAqD,UAAU,CAAChC,GAAG,CAAC+B,KAAK,CAAC;UAAA;UAAA,CAAA/E,cAAA,GAAA2B,CAAA,WAAI,CAAC;UACjCsD,UAAU;UAAE;UAAA,CAAAjF,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACiC,UAAU;UAAA;UAAA,CAAAjF,cAAA,GAAA2B,CAAA,WAAI,IAAI;UAClCuD,QAAQ;UAAE;UAAA,CAAAlF,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACkC,QAAQ;UAAA;UAAA,CAAAlF,cAAA,GAAA2B,CAAA,WAAI,IAAI;UAC9BwD,MAAM;UAAE;UAAA,CAAAnF,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACmC,MAAM;UAAA;UAAA,CAAAnF,cAAA,GAAA2B,CAAA,WAAI,QAAQ;UAC9ByD,iBAAiB;UAAE;UAAA,CAAApF,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACoC,iBAAiB;UAAA;UAAA,CAAApF,cAAA,GAAA2B,CAAA,WAAI,SAAS;UACrDuC,KAAK;UAAE;UAAA,CAAAlE,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACkB,KAAK;UAAA;UAAA,CAAAlE,cAAA,GAAA2B,CAAA,WAAI,IAAI;UACxB0D,WAAW,EAAE/B;QACf,CAAC;QAED,MAAM;UAAEnB;QAAM,CAAC;QAAA;QAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAG,MAAMO,QAAQ,CAC7B4B,IAAI,CAAC,WAAW,CAAC,CACjB8B,MAAM,CAAC,CAACU,YAAY,CAAC,CAAC;QAAC;QAAA7E,cAAA,GAAAE,CAAA;QAE1B,IAAIiC,KAAK,EAAE;UAAA;UAAAnC,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACTkB,OAAO,CAACe,KAAK,CAAC,8BAA8Ba,GAAG,CAACI,EAAE,GAAG,EAAEjB,KAAK,CAACC,OAAO,CAAC;UAAC;UAAApC,cAAA,GAAAE,CAAA;UACtEwC,OAAO,CAAChB,MAAM,EAAE;QAClB,CAAC,MAAM;UAAA;UAAA1B,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACLwC,OAAO,CAACjB,OAAO,EAAE;QACnB;MACF,CAAC,CAAC,OAAOU,KAAK,EAAE;QAAA;QAAAnC,cAAA,GAAAE,CAAA;QACdkB,OAAO,CAACe,KAAK,CAAC,gCAAgCa,GAAG,CAACI,EAAE,GAAG,EAAEjB,KAAK,CAACC,OAAO,CAAC;QAAC;QAAApC,cAAA,GAAAE,CAAA;QACxEwC,OAAO,CAAChB,MAAM,EAAE;MAClB;IACF,CAAC,CAAC,CACDqB,EAAE,CAAC,KAAK,EAAE,MAAM;MAAA;MAAA/C,cAAA,GAAAmB,CAAA;MAAAnB,cAAA,GAAAE,CAAA;MACfuC,OAAO,CAACC,OAAO,CAAC;IAClB,CAAC,CAAC;EACN,CAAC,CAAC;AACJ;AAEA,eAAeX,cAAcA,CAAA,EAAG;EAAA;EAAA/B,cAAA,GAAAmB,CAAA;EAAAnB,cAAA,GAAAE,CAAA;EAC9B,OAAO,IAAIsC,OAAO,CAAEC,OAAO,IAAK;IAAA;IAAAzC,cAAA,GAAAmB,CAAA;IAC9B,MAAMuB,OAAO;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAG;MAAEuB,OAAO,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE,CAAC;IACzC,MAAM4D,YAAY;IAAA;IAAA,CAAAtF,cAAA,GAAAE,CAAA,QAAGM,IAAI,CAACoC,IAAI,CAAC3B,OAAO,EAAE,cAAc,CAAC;IAAC;IAAAjB,cAAA,GAAAE,CAAA;IAExDI,EAAE,CAACuC,gBAAgB,CAACyC,YAAY,CAAC,CAC9BxC,IAAI,CAACvC,GAAG,CAAC,CAAC,CAAC,CACXwC,EAAE,CAAC,MAAM,EAAE,MAAOC,GAAG,IAAK;MAAA;MAAAhD,cAAA,GAAAmB,CAAA;MAAAnB,cAAA,GAAAE,CAAA;MACzB,IAAI;QACF;QACA,MAAMqF,kBAAkB;QAAA;QAAA,CAAAvF,cAAA,GAAAE,CAAA,QAAG,OAAO8C,GAAG,CAACwC,WAAW,CAACrC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;QACrF,MAAM;UAAEoB,IAAI,EAAEM;QAAa,CAAC;QAAA;QAAA,CAAA7E,cAAA,GAAAE,CAAA,QAAG,MAAMO,QAAQ,CAC1C4B,IAAI,CAAC,WAAW,CAAC,CACjBmC,MAAM,CAAC,IAAI,CAAC,CACZC,EAAE,CAAC,aAAa,EAAEc,kBAAkB,CAAC,CACrCb,MAAM,CAAC,CAAC;QAAC;QAAA1E,cAAA,GAAAE,CAAA;QAEZ,IAAI,CAAC2E,YAAY,EAAE;UAAA;UAAA7E,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACjBkB,OAAO,CAACe,KAAK,CAAC,4CAA4Ca,GAAG,CAACI,EAAE,EAAE,CAAC;UAAC;UAAApD,cAAA,GAAAE,CAAA;UACpEwC,OAAO,CAAChB,MAAM,EAAE;UAAC;UAAA1B,cAAA,GAAAE,CAAA;UACjB;QACF,CAAC;QAAA;QAAA;UAAAF,cAAA,GAAA2B,CAAA;QAAA;;QAED;QACA,MAAM2B,gBAAgB;QAAA;QAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAG,OAAO8C,GAAG,CAACI,EAAE,CAACD,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;QAE1E,MAAMsC,WAAW;QAAA;QAAA,CAAAzF,cAAA,GAAAE,CAAA,QAAG;UAClBsF,WAAW,EAAEX,YAAY,CAACzB,EAAE;UAC5BsC,kBAAkB;UAAE;UAAA,CAAA1F,cAAA,GAAA2B,CAAA,WAAAgE,QAAQ,CAAC3C,GAAG,CAAC0C,kBAAkB,CAAC;UAAA;UAAA,CAAA1F,cAAA,GAAA2B,CAAA,WAAI,CAAC;UACzDiE,MAAM;UAAE;UAAA,CAAA5F,cAAA,GAAA2B,CAAA,WAAAqD,UAAU,CAAChC,GAAG,CAAC4C,MAAM,CAAC;UAAA;UAAA,CAAA5F,cAAA,GAAA2B,CAAA,WAAI,CAAC;UACnCkE,QAAQ;UAAE;UAAA,CAAA7F,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAAC6C,QAAQ;UAAA;UAAA,CAAA7F,cAAA,GAAA2B,CAAA,WAAI,IAAI;UAC9BmE,SAAS;UAAE;UAAA,CAAA9F,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAAC8C,SAAS;UAAA;UAAA,CAAA9F,cAAA,GAAA2B,CAAA,WAAI,IAAI;UAChCoE,cAAc;UAAE;UAAA,CAAA/F,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAAC+C,cAAc,EAAE5C,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,WAAI,OAAO;UAC/DwD,MAAM;UAAE;UAAA,CAAAnF,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACmC,MAAM;UAAA;UAAA,CAAAnF,cAAA,GAAA2B,CAAA,WAAI,SAAS;UAC/BqE,gBAAgB;UAAE;UAAA,CAAAhG,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACgD,gBAAgB,EAAE7C,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,WAAI,IAAI;UACjEsE,YAAY;UAAE;UAAA,CAAAjG,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACiD,YAAY,EAAE9C,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC;UAAA;UAAA,CAAAnD,cAAA,GAAA2B,CAAA,WAAI,IAAI;UACzDuC,KAAK;UAAE;UAAA,CAAAlE,cAAA,GAAA2B,CAAA,WAAAqB,GAAG,CAACkB,KAAK;UAAA;UAAA,CAAAlE,cAAA,GAAA2B,CAAA,WAAI,IAAI;UACxB0D,WAAW,EAAE/B;QACf,CAAC;QAED,MAAM;UAAEnB;QAAM,CAAC;QAAA;QAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAG,MAAMO,QAAQ,CAC7B4B,IAAI,CAAC,UAAU,CAAC,CAChB8B,MAAM,CAAC,CAACsB,WAAW,CAAC,CAAC;QAAC;QAAAzF,cAAA,GAAAE,CAAA;QAEzB,IAAIiC,KAAK,EAAE;UAAA;UAAAnC,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACTkB,OAAO,CAACe,KAAK,CAAC,+BAA+Ba,GAAG,CAACI,EAAE,GAAG,EAAEjB,KAAK,CAACC,OAAO,CAAC;UAAC;UAAApC,cAAA,GAAAE,CAAA;UACvEwC,OAAO,CAAChB,MAAM,EAAE;QAClB,CAAC,MAAM;UAAA;UAAA1B,cAAA,GAAA2B,CAAA;UAAA3B,cAAA,GAAAE,CAAA;UACLwC,OAAO,CAACjB,OAAO,EAAE;QACnB;MACF,CAAC,CAAC,OAAOU,KAAK,EAAE;QAAA;QAAAnC,cAAA,GAAAE,CAAA;QACdkB,OAAO,CAACe,KAAK,CAAC,iCAAiCa,GAAG,CAACI,EAAE,GAAG,EAAEjB,KAAK,CAACC,OAAO,CAAC;QAAC;QAAApC,cAAA,GAAAE,CAAA;QACzEwC,OAAO,CAAChB,MAAM,EAAE;MAClB;IACF,CAAC,CAAC,CACDqB,EAAE,CAAC,KAAK,EAAE,MAAM;MAAA;MAAA/C,cAAA,GAAAmB,CAAA;MAAAnB,cAAA,GAAAE,CAAA;MACfuC,OAAO,CAACC,OAAO,CAAC;IAClB,CAAC,CAAC;EACN,CAAC,CAAC;AACJ;AAEA,eAAeV,oBAAoBA,CAAA,EAAG;EAAA;EAAAhC,cAAA,GAAAmB,CAAA;EACpC,MAAM;IAAE+E,KAAK,EAAEC;EAAa,CAAC;EAAA;EAAA,CAAAnG,cAAA,GAAAE,CAAA,SAAG,MAAMO,QAAQ,CAC3C4B,IAAI,CAAC,SAAS,CAAC,CACfmC,MAAM,CAAC,GAAG,EAAE;IAAE0B,KAAK,EAAE,OAAO;IAAEE,IAAI,EAAE;EAAK,CAAC,CAAC;EAE9C,MAAM;IAAEF,KAAK,EAAEG;EAAe,CAAC;EAAA;EAAA,CAAArG,cAAA,GAAAE,CAAA,SAAG,MAAMO,QAAQ,CAC7C4B,IAAI,CAAC,WAAW,CAAC,CACjBmC,MAAM,CAAC,GAAG,EAAE;IAAE0B,KAAK,EAAE,OAAO;IAAEE,IAAI,EAAE;EAAK,CAAC,CAAC;EAE9C,MAAM;IAAEF,KAAK,EAAEI;EAAc,CAAC;EAAA;EAAA,CAAAtG,cAAA,GAAAE,CAAA,SAAG,MAAMO,QAAQ,CAC5C4B,IAAI,CAAC,UAAU,CAAC,CAChBmC,MAAM,CAAC,GAAG,EAAE;IAAE0B,KAAK,EAAE,OAAO;IAAEE,IAAI,EAAE;EAAK,CAAC,CAAC;EAAC;EAAApG,cAAA,GAAAE,CAAA;EAE/CkB,OAAO,CAACC,GAAG,CAAC,wBAAwB8E,YAAY,cAAcE,cAAc,eAAeC,aAAa,aAAa,CAAC;AACxH;AAAC;AAAAtG,cAAA,GAAAE,CAAA;AAEDgB,aAAa,CAAC,CAAC,CAACqF,KAAK,CAACnF,OAAO,CAACe,KAAK,CAAC","ignoreList":[]}