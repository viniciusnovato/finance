{"version":3,"names":["cov_4kuizinh7","actualCoverage","fs","s","require","path","PROCESSED_DATA_PATH","join","__dirname","createClientsBatchSQL","clients","batchSize","b","f","batches","i","length","batch","slice","values","map","client","firstName","first_name","replace","lastName","last_name","email","phone","mobile","taxId","tax_id","birthDate","birth_date","address","city","state","postalCode","postal_code","country","notes","status","externalId","external_id","query","push","batchNumber","Math","floor","totalBatches","ceil","count","createContractsBatchSQL","contracts","contract","contractNumber","contract_number","description","value","startDate","start_date","endDate","end_date","paymentFrequency","payment_frequency","clientExternalId","client_external_id","main","console","log","existsSync","Error","data","JSON","parse","readFileSync","payments","clientBatches","clientsSQL","index","writeFileSync","contractBatches","contractsSQL","totalClients","totalContracts","error","message","process","exit","module","exports"],"sources":["real_import.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\n// Configura√ß√µes\nconst PROCESSED_DATA_PATH = path.join(__dirname, '../../processed_data.json');\n\n// Fun√ß√£o para criar SQL de importa√ß√£o de clientes\nfunction createClientsBatchSQL(clients, batchSize = 50) {\n    const batches = [];\n    \n    for (let i = 0; i < clients.length; i += batchSize) {\n        const batch = clients.slice(i, i + batchSize);\n        \n        const values = batch.map(client => {\n            const firstName = client.first_name ? `'${client.first_name.replace(/'/g, \"''\")}'` : 'NULL';\n            const lastName = client.last_name ? `'${client.last_name.replace(/'/g, \"''\")}'` : 'NULL';\n            const email = client.email ? `'${client.email.replace(/'/g, \"''\")}'` : 'NULL';\n            const phone = client.phone ? `'${client.phone.replace(/'/g, \"''\")}'` : 'NULL';\n            const mobile = client.mobile ? `'${client.mobile.replace(/'/g, \"''\")}'` : 'NULL';\n            const taxId = client.tax_id ? `'${client.tax_id.replace(/'/g, \"''\")}'` : 'NULL';\n            const birthDate = client.birth_date ? `'${client.birth_date}'` : 'NULL';\n            const address = client.address ? `'${client.address.replace(/'/g, \"''\")}'` : 'NULL';\n            const city = client.city ? `'${client.city.replace(/'/g, \"''\")}'` : 'NULL';\n            const state = client.state ? `'${client.state.replace(/'/g, \"''\")}'` : 'NULL';\n            const postalCode = client.postal_code ? `'${client.postal_code.replace(/'/g, \"''\")}'` : 'NULL';\n            const country = client.country ? `'${client.country.replace(/'/g, \"''\")}'` : \"'Brasil'\";\n            const notes = client.notes ? `'${client.notes.replace(/'/g, \"''\")}'` : 'NULL';\n            const status = client.status ? `'${client.status}'` : \"'active'\";\n            const externalId = client.external_id ? `'${client.external_id}'` : 'NULL';\n            \n            return `(${firstName}, ${lastName}, ${email}, ${phone}, ${mobile}, ${taxId}, ${birthDate}, ${address}, ${city}, ${state}, ${postalCode}, ${country}, ${notes}, ${status}, ${externalId})`;\n        }).join(',\\n    ');\n        \n        const query = `INSERT INTO clients (\n    first_name, last_name, email, phone, mobile, tax_id, birth_date, \n    address, city, state, postal_code, country, notes, status, external_id\n) VALUES \n    ${values}\nON CONFLICT (external_id) DO UPDATE SET\n    first_name = EXCLUDED.first_name,\n    last_name = EXCLUDED.last_name,\n    email = EXCLUDED.email,\n    phone = EXCLUDED.phone,\n    mobile = EXCLUDED.mobile,\n    updated_at = NOW();`;\n        \n        batches.push({\n            batchNumber: Math.floor(i/batchSize) + 1,\n            totalBatches: Math.ceil(clients.length/batchSize),\n            count: batch.length,\n            query: query\n        });\n    }\n    \n    return batches;\n}\n\n// Fun√ß√£o para criar SQL de importa√ß√£o de contratos\nfunction createContractsBatchSQL(contracts, batchSize = 50) {\n    const batches = [];\n    \n    for (let i = 0; i < contracts.length; i += batchSize) {\n        const batch = contracts.slice(i, i + batchSize);\n        \n        const values = batch.map(contract => {\n            const contractNumber = contract.contract_number ? `'${contract.contract_number.replace(/'/g, \"''\")}'` : 'NULL';\n            const description = contract.description ? `'${contract.description.replace(/'/g, \"''\")}'` : 'NULL';\n            const value = contract.value || 0;\n            const startDate = contract.start_date ? `'${contract.start_date}'` : 'NULL';\n            const endDate = contract.end_date ? `'${contract.end_date}'` : 'NULL';\n            const status = contract.status ? `'${contract.status}'` : \"'active'\";\n            const paymentFrequency = contract.payment_frequency ? `'${contract.payment_frequency}'` : \"'monthly'\";\n            const notes = contract.notes ? `'${contract.notes.replace(/'/g, \"''\")}'` : 'NULL';\n            const externalId = contract.external_id ? `'${contract.external_id}'` : 'NULL';\n            const clientExternalId = contract.client_external_id ? `'${contract.client_external_id}'` : 'NULL';\n            \n            return `(\n        (SELECT id FROM clients WHERE external_id = ${clientExternalId} LIMIT 1),\n        ${contractNumber}, ${description}, ${value}, ${startDate}, ${endDate}, \n        ${status}, ${paymentFrequency}, ${notes}, ${externalId}\n    )`;\n        }).join(',\\n    ');\n        \n        const query = `INSERT INTO contracts (\n    client_id, contract_number, description, value, start_date, end_date,\n    status, payment_frequency, notes, external_id\n) VALUES \n    ${values}\nON CONFLICT (external_id) DO UPDATE SET\n    description = EXCLUDED.description,\n    value = EXCLUDED.value,\n    start_date = EXCLUDED.start_date,\n    end_date = EXCLUDED.end_date,\n    status = EXCLUDED.status,\n    updated_at = NOW();`;\n        \n        batches.push({\n            batchNumber: Math.floor(i/batchSize) + 1,\n            totalBatches: Math.ceil(contracts.length/batchSize),\n            count: batch.length,\n            query: query\n        });\n    }\n    \n    return batches;\n}\n\nasync function main() {\n    try {\n        console.log('üöÄ Gerando SQLs de importa√ß√£o...');\n        \n        // Carregar dados processados\n        if (!fs.existsSync(PROCESSED_DATA_PATH)) {\n            throw new Error(`Arquivo de dados processados n√£o encontrado: ${PROCESSED_DATA_PATH}`);\n        }\n        \n        const data = JSON.parse(fs.readFileSync(PROCESSED_DATA_PATH, 'utf8'));\n        \n        console.log(`üìä Dados carregados:`);\n        console.log(`   üë• Clientes: ${data.clients.length}`);\n        console.log(`   üìÑ Contratos: ${data.contracts.length}`);\n        console.log(`   üí∞ Pagamentos: ${data.payments.length}`);\n        \n        // Gerar SQLs de clientes\n        console.log('\\nüìù Gerando SQLs de clientes...');\n        const clientBatches = createClientsBatchSQL(data.clients, 50);\n        \n        // Salvar SQLs de clientes\n        const clientsSQL = clientBatches.map((batch, index) => {\n            return `-- Lote ${batch.batchNumber}/${batch.totalBatches} - ${batch.count} clientes\\n${batch.query};\\n`;\n        }).join('\\n');\n        \n        fs.writeFileSync(path.join(__dirname, '../../clients_import_full.sql'), clientsSQL);\n        console.log(`‚úÖ Arquivo clients_import_full.sql criado com ${clientBatches.length} lotes`);\n        \n        // Gerar SQLs de contratos\n        console.log('\\nüìù Gerando SQLs de contratos...');\n        const contractBatches = createContractsBatchSQL(data.contracts, 50);\n        \n        // Salvar SQLs de contratos\n        const contractsSQL = contractBatches.map((batch, index) => {\n            return `-- Lote ${batch.batchNumber}/${batch.totalBatches} - ${batch.count} contratos\\n${batch.query};\\n`;\n        }).join('\\n');\n        \n        fs.writeFileSync(path.join(__dirname, '../../contracts_import_full.sql'), contractsSQL);\n        console.log(`‚úÖ Arquivo contracts_import_full.sql criado com ${contractBatches.length} lotes`);\n        \n        console.log('\\nüéØ Pr√≥ximos passos:');\n        console.log('   1. Execute os SQLs via MCP do Supabase');\n        console.log('   2. Primeiro importe todos os clientes');\n        console.log('   3. Depois importe todos os contratos');\n        console.log('   4. Verifique os dados importados');\n        \n        // Retornar informa√ß√µes dos lotes para execu√ß√£o manual\n        return {\n            clientBatches: clientBatches.length,\n            contractBatches: contractBatches.length,\n            totalClients: data.clients.length,\n            totalContracts: data.contracts.length\n        };\n        \n    } catch (error) {\n        console.error('‚ùå Erro durante a gera√ß√£o:', error.message);\n        process.exit(1);\n    }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n    main();\n}\n\nmodule.exports = { main, createClientsBatchSQL, createContractsBatchSQL };"],"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","ignoreList":[]}