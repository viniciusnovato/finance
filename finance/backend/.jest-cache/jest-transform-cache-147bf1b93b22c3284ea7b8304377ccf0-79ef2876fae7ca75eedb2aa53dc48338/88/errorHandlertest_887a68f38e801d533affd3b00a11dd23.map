{"version":3,"names":["_getJestObj","mock","jest","require","ErrorHandler","ResponseHelper","createMockResponse","status","fn","mockReturnThis","json","headersSent","createMockRequest","method","url","ip","headers","describe","mockRes","mockReq","mockNext","consoleErrorSpy","beforeEach","spyOn","console","mockImplementation","clearAllMocks","afterEach","mockRestore","test","error","name","message","details","field","handleValidationError","expect","sendValidationError","toHaveBeenCalledWith","handleDatabaseError","sendConflict","code","sendInternalError","handleAuthenticationError","sendUnauthorized","handleAuthorizationError","sendForbidden","handleNotFoundError","sendNotFound","handleNetworkError","serviceUnavailable","badGateway","handleGenericError","toHaveBeenCalled","Error","consoleSpy","expressErrorHandler","not","objectContaining","createError","toBe","statusCode","toBeInstanceOf","operationalError","result","isOperationalError","statusError","statusResult","nonOperationalErrors","forEach"],"sources":["errorHandler.test.js"],"sourcesContent":["/**\n * Testes unitários para ErrorHandler\n * Testa o tratamento centralizado de erros\n */\n\nconst { ErrorHandler } = require('../../utils/errorHandler');\nconst { ResponseHelper } = require('../../utils/responseHelper');\n\n// Mock do ResponseHelper\njest.mock('../../utils/responseHelper');\n\n// Mock do objeto response do Express\nconst createMockResponse = () => ({\n  status: jest.fn().mockReturnThis(),\n  json: jest.fn().mockReturnThis(),\n  headersSent: false\n});\n\n// Mock do objeto request do Express\nconst createMockRequest = () => ({\n  method: 'GET',\n  url: '/api/test',\n  ip: '127.0.0.1',\n  headers: { 'user-agent': 'test-agent' }\n});\n\ndescribe('ErrorHandler', () => {\n  let mockRes;\n  let mockReq;\n  let mockNext;\n  let consoleErrorSpy;\n\n  beforeEach(() => {\n    mockRes = createMockResponse();\n    mockReq = createMockRequest();\n    mockNext = jest.fn();\n    \n    // Mock console.error para evitar logs durante os testes\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    \n    // Limpar mocks\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    consoleErrorSpy.mockRestore();\n  });\n\n  describe('handleValidationError', () => {\n    test('should handle validation error with details', () => {\n      const error = {\n        name: 'ValidationError',\n        message: 'Dados inválidos',\n        details: [\n          { field: 'email', message: 'Email inválido' },\n          { field: 'phone', message: 'Telefone obrigatório' }\n        ]\n      };\n\n      ErrorHandler.handleValidationError(mockRes, error.details, error.message);\n\n      expect(ResponseHelper.sendValidationError).toHaveBeenCalledWith(\n        mockRes,\n        error.details\n      );\n    });\n\n    test('should handle validation error without details', () => {\n      const error = {\n        name: 'ValidationError',\n        message: 'Erro de validação'\n      };\n\n      ErrorHandler.handleValidationError(mockRes, [], error.message);\n\n      expect(ResponseHelper.sendValidationError).toHaveBeenCalledWith(\n        mockRes,\n        []\n      );\n    });\n  });\n\n  describe('handleDatabaseError', () => {\n    test('should handle unique constraint violation', () => {\n      const error = {\n        name: 'SequelizeUniqueConstraintError',\n        message: 'Duplicate entry'\n      };\n\n      ErrorHandler.handleDatabaseError(mockRes, error);\n\n      expect(ResponseHelper.sendConflict).toHaveBeenCalledWith(\n        mockRes,\n        'Registro já existe'\n      );\n    });\n\n    test('should handle foreign key constraint violation', () => {\n      const error = {\n        name: 'SequelizeForeignKeyConstraintError',\n        message: 'Foreign key violation'\n      };\n\n      ErrorHandler.handleDatabaseError(mockRes, error);\n\n      expect(ResponseHelper.sendValidationError).toHaveBeenCalledWith(\n        mockRes,\n        ['Referência inválida']\n      );\n    });\n\n    test('should handle not null constraint violation', () => {\n      const error = {\n        code: '23502', // PostgreSQL not null violation\n        message: 'null value in column violates not-null constraint'\n      };\n\n      ErrorHandler.handleDatabaseError(mockRes, error);\n\n      expect(ResponseHelper.sendInternalError).toHaveBeenCalledWith(\n        mockRes,\n        'Erro interno do servidor'\n      );\n    });\n\n    test('should handle connection timeout', () => {\n      const error = {\n        code: 'ETIMEDOUT',\n        message: 'Connection timeout'\n      };\n\n      ErrorHandler.handleDatabaseError(mockRes, error);\n\n      expect(ResponseHelper.sendInternalError).toHaveBeenCalledWith(\n        mockRes,\n        'Erro interno do servidor'\n      );\n    });\n\n    test('should handle generic database error', () => {\n      const error = {\n        message: 'Generic database error'\n      };\n\n      ErrorHandler.handleDatabaseError(mockRes, error);\n\n      expect(ResponseHelper.sendInternalError).toHaveBeenCalledWith(\n        mockRes,\n        'Erro interno do servidor'\n      );\n    });\n  });\n\n  describe('handleAuthenticationError', () => {\n    test('should handle authentication error', () => {\n      const error = {\n        name: 'AuthenticationError',\n        message: 'Token inválido'\n      };\n\n      ErrorHandler.handleAuthenticationError(mockRes, error.message);\n\n      expect(ResponseHelper.sendUnauthorized).toHaveBeenCalledWith(\n        mockRes,\n        'Token inválido'\n      );\n    });\n\n    test('should use default message for authentication error', () => {\n      const error = {\n        name: 'AuthenticationError'\n      };\n\n      ErrorHandler.handleAuthenticationError(mockRes);\n\n      expect(ResponseHelper.sendUnauthorized).toHaveBeenCalledWith(\n        mockRes,\n        'Credenciais inválidas'\n      );\n    });\n  });\n\n  describe('handleAuthorizationError', () => {\n    test('should handle authorization error', () => {\n      const error = {\n        name: 'AuthorizationError',\n        message: 'Acesso negado'\n      };\n\n      ErrorHandler.handleAuthorizationError(mockRes, error.message);\n\n      expect(ResponseHelper.sendForbidden).toHaveBeenCalledWith(\n        mockRes,\n        'Acesso negado'\n      );\n    });\n\n    test('should use default message for authorization error', () => {\n      const error = {\n        name: 'AuthorizationError'\n      };\n\n      ErrorHandler.handleAuthorizationError(mockRes);\n\n      expect(ResponseHelper.sendForbidden).toHaveBeenCalledWith(\n        mockRes,\n        'Acesso negado'\n      );\n    });\n  });\n\n  describe('handleNotFoundError', () => {\n    test('should handle not found error', () => {\n      const error = {\n        name: 'NotFoundError',\n        message: 'Cliente não encontrado'\n      };\n\n      ErrorHandler.handleNotFoundError(mockRes, error.message);\n\n      expect(ResponseHelper.sendNotFound).toHaveBeenCalledWith(\n        mockRes,\n        'Cliente não encontrado'\n      );\n    });\n\n    test('should use default message for not found error', () => {\n      const error = {\n        name: 'NotFoundError'\n      };\n\n      ErrorHandler.handleNotFoundError(mockRes);\n\n      expect(ResponseHelper.sendNotFound).toHaveBeenCalledWith(\n        mockRes,\n        'Recurso'\n      );\n    });\n  });\n\n  describe('handleNetworkError', () => {\n    test('should handle connection refused error', () => {\n      const error = {\n        code: 'ECONNREFUSED',\n        message: 'Connection refused'\n      };\n\n      ErrorHandler.handleNetworkError(mockRes, error);\n\n      expect(ResponseHelper.serviceUnavailable).toHaveBeenCalledWith(\n        mockRes,\n        'serviço externo indisponível'\n      );\n    });\n\n    test('should handle DNS lookup error', () => {\n      const error = {\n        code: 'ENOTFOUND',\n        message: 'DNS lookup failed'\n      };\n\n      ErrorHandler.handleNetworkError(mockRes, error);\n\n      expect(ResponseHelper.serviceUnavailable).toHaveBeenCalledWith(\n        mockRes,\n        'serviço externo indisponível'\n      );\n    });\n\n    test('should handle generic network error', () => {\n      const error = {\n        message: 'Network error'\n      };\n\n      ErrorHandler.handleNetworkError(mockRes, error);\n\n      expect(ResponseHelper.badGateway).toHaveBeenCalledWith(\n        mockRes,\n        'Erro de comunicação com serviço externo'\n      );\n    });\n  });\n\n  describe('handleGenericError', () => {\n    test('should handle validation error in generic handler', () => {\n      const error = {\n        name: 'ValidationError',\n        message: 'Dados inválidos'\n      };\n\n      ErrorHandler.handleGenericError(mockRes, error);\n\n      expect(ResponseHelper.sendValidationError).toHaveBeenCalled();\n    });\n\n    test('should handle cast error in generic handler', () => {\n      const error = {\n        name: 'CastError',\n        message: 'Formato inválido'\n      };\n\n      ErrorHandler.handleGenericError(mockRes, error);\n\n      expect(ResponseHelper.sendValidationError).toHaveBeenCalledWith(\n        mockRes,\n        ['Formato de dados inválido']\n      );\n    });\n\n\n\n    test('should handle generic error', () => {\n      const error = new Error('Erro genérico');\n\n      ErrorHandler.handleGenericError(mockRes, error);\n\n      expect(ResponseHelper.sendInternalError).toHaveBeenCalled();\n    });\n\n    test('should log error details', () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n      const error = new Error('Test error');\n\n      ErrorHandler.handleGenericError(mockRes, error);\n\n      expect(consoleSpy).toHaveBeenCalled();\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('expressErrorHandler', () => {\n    test('should skip if headers already sent', () => {\n      mockRes.headersSent = true;\n      const error = new Error('Test error');\n\n      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);\n\n      expect(mockNext).toHaveBeenCalledWith(error);\n      expect(ResponseHelper.sendInternalError).not.toHaveBeenCalled();\n    });\n\n    test('should handle validation error in Express middleware', () => {\n      const error = {\n        name: 'ValidationError',\n        message: 'Validation failed'\n      };\n\n      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);\n\n      expect(ResponseHelper.sendValidationError).toHaveBeenCalled();\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    test('should handle authentication error in Express middleware', () => {\n      const error = {\n        name: 'JsonWebTokenError',\n        message: 'Invalid token'\n      };\n\n      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);\n\n      expect(ResponseHelper.sendUnauthorized).toHaveBeenCalled();\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    test('should handle generic error in Express middleware', () => {\n      const error = new Error('Generic error');\n\n      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);\n\n      expect(ResponseHelper.sendInternalError).toHaveBeenCalledWith(\n        mockRes,\n        'Erro interno do servidor'\n      );\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    test('should log request details with error', () => {\n      const error = new Error('Test error');\n\n      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Express Error Handler:',\n        expect.objectContaining({\n          error: 'Test error',\n          url: '/api/test',\n          method: 'GET'\n        })\n      );\n    });\n  });\n\n  describe('createError', () => {\n    test('should create error with message and status code', () => {\n      const error = ErrorHandler.createError('Test message', 400, 'TEST_ERROR');\n      \n      expect(error.message).toBe('Test message');\n      expect(error.statusCode).toBe(400);\n      expect(error.code).toBe('TEST_ERROR');\n      expect(error).toBeInstanceOf(Error);\n    });\n\n    test('should create error with default values', () => {\n      const error = ErrorHandler.createError('Test message');\n      \n      expect(error.message).toBe('Test message');\n      expect(error.statusCode).toBe(500);\n      expect(error).toBeInstanceOf(Error);\n    });\n  });\n\n  describe('isOperationalError', () => {\n    test('should identify operational errors', () => {\n      const operationalError = new Error('Validation failed');\n      operationalError.name = 'ValidationError';\n      \n      const result = ErrorHandler.isOperationalError(operationalError);\n      expect(result).toBe(true);\n      \n      // Test with status code\n      const statusError = new Error('Bad request');\n      statusError.statusCode = 400;\n      \n      const statusResult = ErrorHandler.isOperationalError(statusError);\n      expect(statusResult).toBe(true);\n    });\n\n    test('should identify non-operational errors', () => {\n      const nonOperationalErrors = [\n        new Error('Generic error'),\n        { name: 'SyntaxError' },\n        { name: 'ReferenceError' },\n        { message: 'Unknown error' }\n      ];\n\n      nonOperationalErrors.forEach(error => {\n        expect(ErrorHandler.isOperationalError(error)).toBe(false);\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}