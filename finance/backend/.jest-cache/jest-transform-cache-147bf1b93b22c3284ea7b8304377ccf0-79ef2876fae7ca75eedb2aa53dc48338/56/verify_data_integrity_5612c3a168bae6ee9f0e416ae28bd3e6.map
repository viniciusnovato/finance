{"version":3,"names":["cov_1yjs3aix8t","actualCoverage","s","require","config","createClient","supabase","process","env","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","verifyDataIntegrity","f","console","log","count","clientsCount","from","select","head","contractsCount","paymentsCount","data","contractsWithoutClients","not","getClientIds","b","length","paymentsWithoutContracts","getContractIds","clientsWithoutName","or","contractsWithoutValue","is","paymentsWithoutAmount","duplicateEmails","rpc","toFixed","error","message","map","c","id","join","catch"],"sources":["verify_data_integrity.js"],"sourcesContent":["require('dotenv').config();\nconst { createClient } = require('@supabase/supabase-js');\n\n// Usar service_role key para ter permissões administrativas\nconst supabase = createClient(\n  process.env.SUPABASE_URL, \n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nasync function verifyDataIntegrity() {\n  console.log('🔍 VERIFICAÇÃO DE INTEGRIDADE DOS DADOS');\n  console.log('==================================================');\n  \n  try {\n    // 1. Verificar contagem de registros\n    console.log('\\n📊 CONTAGEM DE REGISTROS:');\n    \n    const { count: clientsCount } = await supabase\n      .from('clients')\n      .select('*', { count: 'exact', head: true });\n    console.log(`👥 Clientes: ${clientsCount}`);\n    \n    const { count: contractsCount } = await supabase\n      .from('contracts')\n      .select('*', { count: 'exact', head: true });\n    console.log(`📄 Contratos: ${contractsCount}`);\n    \n    const { count: paymentsCount } = await supabase\n      .from('payments')\n      .select('*', { count: 'exact', head: true });\n    console.log(`💰 Pagamentos: ${paymentsCount}`);\n    \n    // 2. Verificar integridade referencial\n    console.log('\\n🔗 INTEGRIDADE REFERENCIAL:');\n    \n    // Contratos sem clientes\n    const { data: contractsWithoutClients } = await supabase\n      .from('contracts')\n      .select('id, client_id')\n      .not('client_id', 'in', `(${await getClientIds()})`);\n    \n    if (contractsWithoutClients && contractsWithoutClients.length > 0) {\n      console.log(`❌ ${contractsWithoutClients.length} contratos com client_id inválido`);\n    } else {\n      console.log('✅ Todos os contratos têm client_id válido');\n    }\n    \n    // Pagamentos sem contratos\n    const { data: paymentsWithoutContracts } = await supabase\n      .from('payments')\n      .select('id, contract_id')\n      .not('contract_id', 'in', `(${await getContractIds()})`);\n    \n    if (paymentsWithoutContracts && paymentsWithoutContracts.length > 0) {\n      console.log(`❌ ${paymentsWithoutContracts.length} pagamentos com contract_id inválido`);\n    } else {\n      console.log('✅ Todos os pagamentos têm contract_id válido');\n    }\n    \n    // 3. Verificar dados obrigatórios\n    console.log('\\n📋 DADOS OBRIGATÓRIOS:');\n    \n    // Clientes sem nome\n    const { count: clientsWithoutName } = await supabase\n      .from('clients')\n      .select('*', { count: 'exact', head: true })\n      .or('first_name.is.null,last_name.is.null');\n    \n    if (clientsWithoutName > 0) {\n      console.log(`⚠️  ${clientsWithoutName} clientes sem nome completo`);\n    } else {\n      console.log('✅ Todos os clientes têm nome completo');\n    }\n    \n    // Contratos sem valor\n    const { count: contractsWithoutValue } = await supabase\n      .from('contracts')\n      .select('*', { count: 'exact', head: true })\n      .is('value', null);\n    \n    if (contractsWithoutValue > 0) {\n      console.log(`⚠️  ${contractsWithoutValue} contratos sem valor`);\n    } else {\n      console.log('✅ Todos os contratos têm valor definido');\n    }\n    \n    // Pagamentos sem valor\n    const { count: paymentsWithoutAmount } = await supabase\n      .from('payments')\n      .select('*', { count: 'exact', head: true })\n      .is('amount', null);\n    \n    if (paymentsWithoutAmount > 0) {\n      console.log(`⚠️  ${paymentsWithoutAmount} pagamentos sem valor`);\n    } else {\n      console.log('✅ Todos os pagamentos têm valor definido');\n    }\n    \n    // 4. Verificar duplicatas\n    console.log('\\n🔄 VERIFICAÇÃO DE DUPLICATAS:');\n    \n    // Clientes com mesmo email\n    const { data: duplicateEmails } = await supabase\n      .rpc('check_duplicate_emails');\n    \n    if (duplicateEmails && duplicateEmails.length > 0) {\n      console.log(`⚠️  ${duplicateEmails.length} emails duplicados encontrados`);\n    } else {\n      console.log('✅ Nenhum email duplicado encontrado');\n    }\n    \n    // 5. Resumo final\n    console.log('\\n📈 RESUMO FINAL:');\n    console.log(`📊 Total de registros: ${clientsCount + contractsCount + paymentsCount}`);\n    console.log(`👥 Clientes: ${clientsCount}`);\n    console.log(`📄 Contratos: ${contractsCount}`);\n    console.log(`💰 Pagamentos: ${paymentsCount}`);\n    \n    if (contractsCount > 0 && clientsCount > 0) {\n      console.log(`📊 Média de contratos por cliente: ${(contractsCount / clientsCount).toFixed(2)}`);\n    }\n    \n    if (paymentsCount > 0 && contractsCount > 0) {\n      console.log(`📊 Média de pagamentos por contrato: ${(paymentsCount / contractsCount).toFixed(2)}`);\n    }\n    \n    console.log('\\n✅ VERIFICAÇÃO DE INTEGRIDADE CONCLUÍDA!');\n    \n  } catch (error) {\n    console.error('❌ Erro na verificação:', error.message);\n  }\n}\n\nasync function getClientIds() {\n  const { data } = await supabase\n    .from('clients')\n    .select('id');\n  return data ? data.map(c => `'${c.id}'`).join(',') : \"''\";\n}\n\nasync function getContractIds() {\n  const { data } = await supabase\n    .from('contracts')\n    .select('id');\n  return data ? data.map(c => `'${c.id}'`).join(',') : \"''\";\n}\n\nverifyDataIntegrity().catch(console.error);"],"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","ignoreList":[]}