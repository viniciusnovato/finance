{"version":3,"names":["cov_2v8u5xm03","actualCoverage","calculatePaymentPercentage","contract","payments","b","f","totalAmount","s","parseFloat","value","total_amount","downPayment","down_payment","numberOfPayments","parseInt","number_of_payments","percentage_paid","amount_paid","amount_remaining","payments_made","payments_remaining","installment_amount","is_fully_paid","installmentAmount","paidPayments","filter","p","status","installmentsPaid","reduce","sum","amount","totalPaid","percentagePaid","amountRemaining","paymentsRemaining","Math","max","length","round","calculateAggregatePaymentStats","contracts","total_contracts","total_value","total_paid","total_remaining","average_percentage_paid","fully_paid_contracts","contracts_with_down_payment","totalValue","totalRemaining","fullyPaidCount","contractsWithDownPayment","totalPercentage","forEach","paymentInfo","payment_completion_rate","getNextPaymentDue","pendingPayments","sort","a","Date","due_date","nextPayment","today","dueDate","daysUntilDue","ceil","payment_id","id","days_until_due","is_overdue","days_overdue","abs","module","exports"],"sources":["contractCalculations.js"],"sourcesContent":["/**\n * Utilitários para cálculos relacionados a contratos\n */\n\n/**\n * Calcula a porcentagem paga de um contrato\n * @param {Object} contract - Objeto do contrato\n * @param {Array} payments - Array de pagamentos do contrato\n * @returns {Object} Objeto com informações de pagamento\n */\nfunction calculatePaymentPercentage(contract, payments = []) {\n  const totalAmount = parseFloat(contract.value || contract.total_amount || 0);\n  const downPayment = parseFloat(contract.down_payment || 0);\n  const numberOfPayments = parseInt(contract.number_of_payments || 0);\n  \n  if (totalAmount === 0) {\n    return {\n      percentage_paid: 0,\n      amount_paid: 0,\n      amount_remaining: 0,\n      payments_made: 0,\n      payments_remaining: numberOfPayments,\n      down_payment: downPayment,\n      installment_amount: 0,\n      is_fully_paid: false\n    };\n  }\n\n  // Calcular valor das parcelas (total - entrada) / número de parcelas\n  const installmentAmount = numberOfPayments > 0 ? (totalAmount - downPayment) / numberOfPayments : 0;\n  \n  // Calcular total pago (entrada + parcelas pagas)\n  const paidPayments = payments.filter(p => p.status === 'paid');\n  const installmentsPaid = paidPayments.reduce((sum, p) => sum + parseFloat(p.amount || 0), 0);\n  const totalPaid = downPayment + installmentsPaid;\n  \n  // Calcular porcentagem\n  const percentagePaid = (totalPaid / totalAmount) * 100;\n  const amountRemaining = totalAmount - totalPaid;\n  const paymentsRemaining = Math.max(0, numberOfPayments - paidPayments.length);\n  \n  return {\n    percentage_paid: Math.round(percentagePaid * 100) / 100,\n    amount_paid: Math.round(totalPaid * 100) / 100,\n    amount_remaining: Math.round(amountRemaining * 100) / 100,\n    payments_made: paidPayments.length,\n    payments_remaining: paymentsRemaining,\n    down_payment: downPayment,\n    installment_amount: Math.round(installmentAmount * 100) / 100,\n    is_fully_paid: percentagePaid >= 100\n  };\n}\n\n/**\n * Calcula estatísticas agregadas de pagamento para múltiplos contratos\n * @param {Array} contracts - Array de contratos com pagamentos\n * @returns {Object} Estatísticas agregadas\n */\nfunction calculateAggregatePaymentStats(contracts) {\n  if (!contracts || contracts.length === 0) {\n    return {\n      total_contracts: 0,\n      total_value: 0,\n      total_paid: 0,\n      total_remaining: 0,\n      average_percentage_paid: 0,\n      fully_paid_contracts: 0,\n      contracts_with_down_payment: 0\n    };\n  }\n\n  let totalValue = 0;\n  let totalPaid = 0;\n  let totalRemaining = 0;\n  let fullyPaidCount = 0;\n  let contractsWithDownPayment = 0;\n  let totalPercentage = 0;\n\n  contracts.forEach(contract => {\n    const paymentInfo = calculatePaymentPercentage(contract, contract.payments || []);\n    \n    totalValue += parseFloat(contract.value || contract.total_amount || 0);\n    totalPaid += paymentInfo.amount_paid;\n    totalRemaining += paymentInfo.amount_remaining;\n    totalPercentage += paymentInfo.percentage_paid;\n    \n    if (paymentInfo.is_fully_paid) {\n      fullyPaidCount++;\n    }\n    \n    if (parseFloat(contract.down_payment || 0) > 0) {\n      contractsWithDownPayment++;\n    }\n  });\n\n  return {\n    total_contracts: contracts.length,\n    total_value: Math.round(totalValue * 100) / 100,\n    total_paid: Math.round(totalPaid * 100) / 100,\n    total_remaining: Math.round(totalRemaining * 100) / 100,\n    average_percentage_paid: Math.round(totalPercentage / contracts.length * 100) / 100,\n    fully_paid_contracts: fullyPaidCount,\n    contracts_with_down_payment: contractsWithDownPayment,\n    payment_completion_rate: Math.round((fullyPaidCount / contracts.length) * 10000) / 100\n  };\n}\n\n/**\n * Calcula o próximo vencimento de um contrato\n * @param {Object} contract - Objeto do contrato\n * @param {Array} payments - Array de pagamentos do contrato\n * @returns {Object|null} Informações do próximo pagamento ou null se não houver\n */\nfunction getNextPaymentDue(contract, payments = []) {\n  const pendingPayments = payments\n    .filter(p => p.status === 'pending')\n    .sort((a, b) => new Date(a.due_date) - new Date(b.due_date));\n  \n  if (pendingPayments.length === 0) {\n    return null;\n  }\n  \n  const nextPayment = pendingPayments[0];\n  const today = new Date();\n  const dueDate = new Date(nextPayment.due_date);\n  const daysUntilDue = Math.ceil((dueDate - today) / (1000 * 60 * 60 * 24));\n  \n  return {\n    payment_id: nextPayment.id,\n    due_date: nextPayment.due_date,\n    amount: parseFloat(nextPayment.amount || 0),\n    days_until_due: daysUntilDue,\n    is_overdue: daysUntilDue < 0,\n    days_overdue: daysUntilDue < 0 ? Math.abs(daysUntilDue) : 0\n  };\n}\n\nmodule.exports = {\n  calculatePaymentPercentage,\n  calculateAggregatePaymentStats,\n  getNextPaymentDue\n};"],"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","ignoreList":[]}