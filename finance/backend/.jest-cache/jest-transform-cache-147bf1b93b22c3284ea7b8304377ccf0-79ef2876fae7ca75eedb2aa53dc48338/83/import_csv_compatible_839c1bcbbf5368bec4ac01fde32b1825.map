{"version":3,"names":["cov_s5j4osvoy","actualCoverage","createClient","s","require","fs","path","csv","config","supabaseUrl","process","env","SUPABASE_URL","supabaseKey","SUPABASE_SERVICE_ROLE_KEY","b","console","error","exit","supabase","truncate","str","maxLength","f","toString","substring","clearAllTables","log","from","delete","neq","message","readCSV","filePath","Promise","resolve","reject","results","createReadStream","pipe","on","data","push","mapClientData","csvRow","first_name","name","split","last_name","slice","join","email","phone","mobile","tax_id","document","mapContractData","clientsMap","clientId","client_id","warn","id","contract_number","value","parseFloat","total_amount","start_date","date","Date","toISOString","mapPaymentData","contractsMap","contractId","contract_id","amount","due_date","paid_date","status","payment_method","notes","external_id","importClients","testMode","csvPath","__dirname","clientsData","dataToImport","mappedClients","map","insert","select","allClients","forEach","index","client","length","importContracts","contractsData","mappedContracts","row","filter","contract","allContracts","importPayments","paymentsData","mappedPayments","payment","main","argv","includes","clientsCount","count","contractsCount","paymentsCount","module","exports"],"sources":["import_csv_compatible.js"],"sourcesContent":["const { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst path = require('path');\nconst csv = require('csv-parser');\nrequire('dotenv').config();\n\n// Configura√ß√£o do Supabase\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // Usar service role para opera√ß√µes administrativas\n\nif (!supabaseUrl || !supabaseKey) {\n    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');\n    process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n/**\n * Fun√ß√£o para truncar strings\n */\nfunction truncate(str, maxLength) {\n    if (!str) return str;\n    return str.toString().substring(0, maxLength);\n}\n\n/**\n * Limpa todas as tabelas\n */\nasync function clearAllTables() {\n    console.log('üßπ Limpando dados existentes...');\n    \n    try {\n        // Limpar na ordem correta (respeitando foreign keys)\n        await supabase.from('payments').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n        console.log('‚úÖ Tabela payments limpa');\n        \n        await supabase.from('contracts').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n        console.log('‚úÖ Tabela contracts limpa');\n        \n        await supabase.from('clients').delete().neq('id', '00000000-0000-0000-0000-000000000000');\n        console.log('‚úÖ Tabela clients limpa');\n        \n    } catch (error) {\n        console.error('‚ùå Erro ao limpar tabelas:', error.message);\n        throw error;\n    }\n}\n\n/**\n * L√™ arquivo CSV e retorna array de objetos\n */\nfunction readCSV(filePath) {\n    return new Promise((resolve, reject) => {\n        const results = [];\n        fs.createReadStream(filePath)\n            .pipe(csv())\n            .on('data', (data) => results.push(data))\n            .on('end', () => resolve(results))\n            .on('error', reject);\n    });\n}\n\n/**\n * Converte dados do CSV para formato compat√≠vel com a tabela clients\n */\nfunction mapClientData(csvRow) {\n    \n    return {\n        first_name: truncate(csvRow.first_name || csvRow.name?.split(' ')[0], 100) || 'Nome',\n        last_name: truncate(csvRow.last_name || csvRow.name?.split(' ').slice(1).join(' '), 100) || 'n√£o informado',\n        email: truncate(csvRow.email, 255) || null,\n        phone: truncate(csvRow.phone, 20) || null,\n        mobile: truncate(csvRow.mobile, 20) || null,\n        tax_id: truncate(csvRow.document || csvRow.tax_id, 50) || null\n    };\n}\n\n/**\n * Converte dados do CSV para formato compat√≠vel com a tabela contracts\n */\nfunction mapContractData(csvRow, clientsMap) {\n    const clientId = clientsMap[csvRow.client_id];\n    if (!clientId) {\n        console.warn(`‚ö†Ô∏è Cliente n√£o encontrado para contract_id: ${csvRow.id}`);\n        return null;\n    }\n    \n    return {\n        client_id: clientId,\n        contract_number: truncate(`CONT_${csvRow.id}`, 100) || csvRow.id,\n        value: parseFloat(csvRow.total_amount) || parseFloat(csvRow.value) || 0,\n        start_date: csvRow.start_date || csvRow.date || new Date().toISOString().split('T')[0]\n    };\n}\n\n/**\n * Converte dados do CSV para formato compat√≠vel com a tabela payments\n */\nfunction mapPaymentData(csvRow, contractsMap) {\n    const contractId = contractsMap[csvRow.contract_id];\n    if (!contractId) {\n        console.warn(`‚ö†Ô∏è Contrato n√£o encontrado para payment_id: ${csvRow.id}`);\n        return null;\n    }\n    \n    return {\n        contract_id: contractId,\n        amount: parseFloat(csvRow.amount) || 0,\n        due_date: csvRow.due_date || new Date().toISOString().split('T')[0],\n        paid_date: csvRow.paid_date || null,\n        status: truncate(csvRow.status, 50) || 'pending',\n        payment_method: truncate(csvRow.payment_method, 50) || 'bank_transfer',\n        notes: csvRow.notes || null,\n        external_id: truncate(csvRow.id, 50) || null\n    };\n}\n\n/**\n * Importa clientes\n */\nasync function importClients(testMode = false) {\n    console.log('üë• Importando clientes...');\n    \n    const csvPath = path.join(__dirname, '../../../importBD/clients.csv');\n    const clientsData = await readCSV(csvPath);\n    \n    // Em modo teste, importar apenas os primeiros 5 registros\n    const dataToImport = testMode ? clientsData.slice(0, 5) : clientsData;\n    \n    const mappedClients = dataToImport.map(mapClientData);\n    \n    const { data, error } = await supabase\n        .from('clients')\n        .insert(mappedClients)\n        .select('id, external_id');\n    \n    if (error) {\n        console.error('‚ùå Erro ao importar clientes:', error);\n        throw error;\n    }\n    \n    // Criar mapa de external_id -> id para usar nas pr√≥ximas importa√ß√µes\n    const clientsMap = {};\n    \n    // Buscar todos os clientes importados com seus external_ids\n    const { data: allClients } = await supabase\n        .from('clients')\n        .select('id, external_id');\n    \n    // Criar mapa usando tanto external_id quanto o ID original do CSV\n    dataToImport.forEach((csvRow, index) => {\n        const client = allClients[index];\n        if (client) {\n            // Mapear pelo ID original do CSV\n            clientsMap[csvRow.id] = client.id;\n            // Mapear tamb√©m pelo external_id se existir\n            if (client.external_id) {\n                clientsMap[client.external_id] = client.id;\n            }\n        }\n    });\n    \n    console.log(`‚úÖ ${data.length} clientes importados`);\n    return clientsMap;\n}\n\n/**\n * Importa contratos\n */\nasync function importContracts(clientsMap, testMode = false) {\n    console.log('üìã Importando contratos...');\n    \n    const csvPath = path.join(__dirname, '../../../importBD/contracts.csv');\n    const contractsData = await readCSV(csvPath);\n    \n    // Em modo teste, importar apenas os primeiros 5 registros\n    const dataToImport = testMode ? contractsData.slice(0, 5) : contractsData;\n    \n    const mappedContracts = dataToImport\n        .map(row => mapContractData(row, clientsMap))\n        .filter(contract => contract !== null);\n    \n    if (mappedContracts.length === 0) {\n        console.log('‚ö†Ô∏è Nenhum contrato v√°lido para importar');\n        return {};\n    }\n    \n    const { data, error } = await supabase\n        .from('contracts')\n        .insert(mappedContracts)\n        .select('id, external_id');\n    \n    if (error) {\n        console.error('‚ùå Erro ao importar contratos:', error);\n        throw error;\n    }\n    \n    // Criar mapa de external_id -> id para usar na importa√ß√£o de pagamentos\n    const contractsMap = {};\n    \n    // Buscar todos os contratos importados\n    const { data: allContracts } = await supabase\n        .from('contracts')\n        .select('id, external_id');\n    \n    // Criar mapa usando tanto external_id quanto o ID original do CSV\n    dataToImport.forEach((csvRow, index) => {\n        const contract = allContracts[index];\n        if (contract) {\n            // Mapear pelo ID original do CSV\n            contractsMap[csvRow.id] = contract.id;\n            // Mapear tamb√©m pelo external_id se existir\n            if (contract.external_id) {\n                contractsMap[contract.external_id] = contract.id;\n            }\n        }\n    });\n    \n    console.log(`‚úÖ ${data.length} contratos importados`);\n    return contractsMap;\n}\n\n/**\n * Importa pagamentos\n */\nasync function importPayments(contractsMap, testMode = false) {\n    console.log('üí∞ Importando pagamentos...');\n    \n    const csvPath = path.join(__dirname, '../../../importBD/payments.csv');\n    const paymentsData = await readCSV(csvPath);\n    \n    // Em modo teste, importar apenas os primeiros 10 registros\n    const dataToImport = testMode ? paymentsData.slice(0, 10) : paymentsData;\n    \n    const mappedPayments = dataToImport\n        .map(row => mapPaymentData(row, contractsMap))\n        .filter(payment => payment !== null);\n    \n    if (mappedPayments.length === 0) {\n        console.log('‚ö†Ô∏è Nenhum pagamento v√°lido para importar');\n        return;\n    }\n    \n    const { data, error } = await supabase\n        .from('payments')\n        .insert(mappedPayments);\n    \n    if (error) {\n        console.error('‚ùå Erro ao importar pagamentos:', error);\n        throw error;\n    }\n    \n    console.log(`‚úÖ ${data ? data.length : mappedPayments.length} pagamentos importados`);\n}\n\n/**\n * Fun√ß√£o principal\n */\nasync function main() {\n    const testMode = process.argv.includes('--test');\n    \n    console.log('üöÄ Iniciando importa√ß√£o de dados CSV');\n    console.log(`üìä Modo: ${testMode ? 'TESTE (poucos registros)' : 'COMPLETO'}`);\n    \n    try {\n        // Limpar dados existentes\n        await clearAllTables();\n        \n        // Importar na ordem correta (respeitando foreign keys)\n        const clientsMap = await importClients(testMode);\n        const contractsMap = await importContracts(clientsMap, testMode);\n        await importPayments(contractsMap, testMode);\n        \n        console.log('\\nüéâ Importa√ß√£o conclu√≠da com sucesso!');\n        \n        // Mostrar estat√≠sticas\n        const { data: clientsCount } = await supabase.from('clients').select('id', { count: 'exact' });\n        const { data: contractsCount } = await supabase.from('contracts').select('id', { count: 'exact' });\n        const { data: paymentsCount } = await supabase.from('payments').select('id', { count: 'exact' });\n        \n        console.log('\\nüìä Estat√≠sticas finais:');\n        console.log(`   Clientes: ${clientsCount?.length || 0}`);\n        console.log(`   Contratos: ${contractsCount?.length || 0}`);\n        console.log(`   Pagamentos: ${paymentsCount?.length || 0}`);\n        \n    } catch (error) {\n        console.error('üí• Erro durante a importa√ß√£o:', error.message);\n        process.exit(1);\n    }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n    main();\n}\n\nmodule.exports = { main, importClients, importContracts, importPayments };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}