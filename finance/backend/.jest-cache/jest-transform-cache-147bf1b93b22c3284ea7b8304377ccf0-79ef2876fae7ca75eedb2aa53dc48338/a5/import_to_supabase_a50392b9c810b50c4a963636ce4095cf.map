{"version":3,"names":["cov_2ilwo4y2y1","actualCoverage","fs","s","require","path","PROJECT_ID","PROCESSED_DATA_PATH","join","__dirname","executeMCPSQL","query","f","console","log","substring","success","importClients","clients","length","batchSize","imported","i","batch","slice","values","map","client","firstName","first_name","b","replace","lastName","last_name","email","phone","mobile","taxId","tax_id","birthDate","birth_date","address","city","state","postalCode","postal_code","country","notes","status","externalId","external_id","importContracts","contracts","contract","contractNumber","contract_number","description","value","startDate","start_date","endDate","end_date","paymentFrequency","payment_frequency","client_external_id","importPayments","payments","payment","amount","dueDate","due_date","paidDate","paid_date","paymentMethod","payment_method","contract_external_id","main","existsSync","Error","data","JSON","parse","readFileSync","clientsImported","contractsImported","paymentsImported","error","message","module","catch","exports"],"sources":["import_to_supabase.js"],"sourcesContent":["const fs = require('fs');\nconst path = require('path');\n\n// Configura√ß√µes\nconst PROJECT_ID = 'sxbslulfitfsijqrzljd';\nconst PROCESSED_DATA_PATH = path.join(__dirname, '../../processed_data.json');\n\n// Fun√ß√£o para executar SQL via MCP (simula√ß√£o)\nasync function executeMCPSQL(query) {\n    console.log('üîÑ Executando SQL:', query.substring(0, 100) + '...');\n    // Esta fun√ß√£o seria chamada via MCP na pr√°tica\n    return { success: true };\n}\n\n// Fun√ß√£o para importar clientes\nasync function importClients(clients) {\n    console.log(`üì• Importando ${clients.length} clientes...`);\n    \n    const batchSize = 50;\n    let imported = 0;\n    \n    for (let i = 0; i < clients.length; i += batchSize) {\n        const batch = clients.slice(i, i + batchSize);\n        \n        const values = batch.map(client => {\n            const firstName = client.first_name ? `'${client.first_name.replace(/'/g, \"''\")}'` : 'NULL';\n            const lastName = client.last_name ? `'${client.last_name.replace(/'/g, \"''\")}'` : 'NULL';\n            const email = client.email ? `'${client.email.replace(/'/g, \"''\")}'` : 'NULL';\n            const phone = client.phone ? `'${client.phone.replace(/'/g, \"''\")}'` : 'NULL';\n            const mobile = client.mobile ? `'${client.mobile.replace(/'/g, \"''\")}'` : 'NULL';\n            const taxId = client.tax_id ? `'${client.tax_id.replace(/'/g, \"''\")}'` : 'NULL';\n            const birthDate = client.birth_date ? `'${client.birth_date}'` : 'NULL';\n            const address = client.address ? `'${client.address.replace(/'/g, \"''\")}'` : 'NULL';\n            const city = client.city ? `'${client.city.replace(/'/g, \"''\")}'` : 'NULL';\n            const state = client.state ? `'${client.state.replace(/'/g, \"''\")}'` : 'NULL';\n            const postalCode = client.postal_code ? `'${client.postal_code.replace(/'/g, \"''\")}'` : 'NULL';\n            const country = client.country ? `'${client.country.replace(/'/g, \"''\")}'` : 'NULL';\n            const notes = client.notes ? `'${client.notes.replace(/'/g, \"''\")}'` : 'NULL';\n            const status = client.status ? `'${client.status}'` : \"'active'\";\n            const externalId = client.external_id ? `'${client.external_id}'` : 'NULL';\n            \n            return `(${firstName}, ${lastName}, ${email}, ${phone}, ${mobile}, ${taxId}, ${birthDate}, ${address}, ${city}, ${state}, ${postalCode}, ${country}, ${notes}, ${status}, ${externalId})`;\n        }).join(',\\n    ');\n        \n        const query = `\nINSERT INTO clients (\n    first_name, last_name, email, phone, mobile, tax_id, birth_date, \n    address, city, state, postal_code, country, notes, status, external_id\n) VALUES \n    ${values}\nON CONFLICT (external_id) DO UPDATE SET\n    first_name = EXCLUDED.first_name,\n    last_name = EXCLUDED.last_name,\n    email = EXCLUDED.email,\n    phone = EXCLUDED.phone,\n    mobile = EXCLUDED.mobile,\n    updated_at = NOW();`;\n        \n        await executeMCPSQL(query);\n        imported += batch.length;\n        console.log(`‚úÖ Importados ${imported}/${clients.length} clientes`);\n    }\n    \n    return imported;\n}\n\n// Fun√ß√£o para importar contratos\nasync function importContracts(contracts) {\n    console.log(`üì• Importando ${contracts.length} contratos...`);\n    \n    const batchSize = 50;\n    let imported = 0;\n    \n    for (let i = 0; i < contracts.length; i += batchSize) {\n        const batch = contracts.slice(i, i + batchSize);\n        \n        const values = batch.map(contract => {\n            const contractNumber = contract.contract_number ? `'${contract.contract_number.replace(/'/g, \"''\")}'` : 'NULL';\n            const description = contract.description ? `'${contract.description.replace(/'/g, \"''\")}'` : 'NULL';\n            const value = contract.value || 0;\n            const startDate = contract.start_date ? `'${contract.start_date}'` : 'NULL';\n            const endDate = contract.end_date ? `'${contract.end_date}'` : 'NULL';\n            const status = contract.status ? `'${contract.status}'` : \"'active'\";\n            const paymentFrequency = contract.payment_frequency ? `'${contract.payment_frequency}'` : \"'monthly'\";\n            const notes = contract.notes ? `'${contract.notes.replace(/'/g, \"''\")}'` : 'NULL';\n            const externalId = contract.external_id ? `'${contract.external_id}'` : 'NULL';\n            \n            return `(\n        (SELECT id FROM clients WHERE external_id = '${contract.client_external_id}' LIMIT 1),\n        ${contractNumber}, ${description}, ${value}, ${startDate}, ${endDate}, \n        ${status}, ${paymentFrequency}, ${notes}, ${externalId}\n    )`;\n        }).join(',\\n    ');\n        \n        const query = `\nINSERT INTO contracts (\n    client_id, contract_number, description, value, start_date, end_date,\n    status, payment_frequency, notes, external_id\n) VALUES \n    ${values}\nON CONFLICT (external_id) DO UPDATE SET\n    description = EXCLUDED.description,\n    value = EXCLUDED.value,\n    start_date = EXCLUDED.start_date,\n    end_date = EXCLUDED.end_date,\n    status = EXCLUDED.status,\n    updated_at = NOW();`;\n        \n        await executeMCPSQL(query);\n        imported += batch.length;\n        console.log(`‚úÖ Importados ${imported}/${contracts.length} contratos`);\n    }\n    \n    return imported;\n}\n\n// Fun√ß√£o para importar pagamentos\nasync function importPayments(payments) {\n    if (payments.length === 0) {\n        console.log('‚ö†Ô∏è Nenhum pagamento para importar');\n        return 0;\n    }\n    \n    console.log(`üì• Importando ${payments.length} pagamentos...`);\n    \n    const batchSize = 50;\n    let imported = 0;\n    \n    for (let i = 0; i < payments.length; i += batchSize) {\n        const batch = payments.slice(i, i + batchSize);\n        \n        const values = batch.map(payment => {\n            const amount = payment.amount || 0;\n            const dueDate = payment.due_date ? `'${payment.due_date}'` : 'NULL';\n            const paidDate = payment.paid_date ? `'${payment.paid_date}'` : 'NULL';\n            const status = payment.status ? `'${payment.status}'` : \"'pending'\";\n            const paymentMethod = payment.payment_method ? `'${payment.payment_method.replace(/'/g, \"''\")}'` : 'NULL';\n            const notes = payment.notes ? `'${payment.notes.replace(/'/g, \"''\")}'` : 'NULL';\n            const externalId = payment.external_id ? `'${payment.external_id}'` : 'NULL';\n            \n            return `(\n        (SELECT id FROM contracts WHERE external_id = '${payment.contract_external_id}' LIMIT 1),\n        ${amount}, ${dueDate}, ${paidDate}, ${status}, ${paymentMethod}, ${notes}, ${externalId}\n    )`;\n        }).join(',\\n    ');\n        \n        const query = `\nINSERT INTO payments (\n    contract_id, amount, due_date, paid_date, status, payment_method, notes, external_id\n) VALUES \n    ${values}\nON CONFLICT (external_id) DO UPDATE SET\n    amount = EXCLUDED.amount,\n    due_date = EXCLUDED.due_date,\n    paid_date = EXCLUDED.paid_date,\n    status = EXCLUDED.status,\n    updated_at = NOW();`;\n        \n        await executeMCPSQL(query);\n        imported += batch.length;\n        console.log(`‚úÖ Importados ${imported}/${payments.length} pagamentos`);\n    }\n    \n    return imported;\n}\n\n// Fun√ß√£o principal\nasync function main() {\n    try {\n        console.log('üöÄ Iniciando importa√ß√£o para Supabase...');\n        \n        // Carregar dados processados\n        if (!fs.existsSync(PROCESSED_DATA_PATH)) {\n            throw new Error(`Arquivo de dados processados n√£o encontrado: ${PROCESSED_DATA_PATH}`);\n        }\n        \n        const data = JSON.parse(fs.readFileSync(PROCESSED_DATA_PATH, 'utf8'));\n        \n        console.log(`üìä Dados carregados:`);\n        console.log(`   üë• Clientes: ${data.clients.length}`);\n        console.log(`   üìÑ Contratos: ${data.contracts.length}`);\n        console.log(`   üí∞ Pagamentos: ${data.payments.length}`);\n        \n        // Importar dados\n        const clientsImported = await importClients(data.clients);\n        const contractsImported = await importContracts(data.contracts);\n        const paymentsImported = await importPayments(data.payments);\n        \n        console.log('\\n‚úÖ Importa√ß√£o conclu√≠da!');\n        console.log(`üìä Resumo:`);\n        console.log(`   üë• Clientes importados: ${clientsImported}`);\n        console.log(`   üìÑ Contratos importados: ${contractsImported}`);\n        console.log(`   üí∞ Pagamentos importados: ${paymentsImported}`);\n        \n    } catch (error) {\n        console.error('‚ùå Erro durante a importa√ß√£o:', error.message);\n        throw error;\n    }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n    main().catch(console.error);\n}\n\nmodule.exports = { main, importClients, importContracts, importPayments };"],"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","ignoreList":[]}