{"version":3,"names":["_getJestObj","mock","jest","require","ErrorHandler","ResponseHelper","createMockResponse","status","fn","mockReturnThis","json","headersSent","createMockRequest","method","url","ip","headers","describe","mockRes","mockReq","mockNext","consoleErrorSpy","beforeEach","spyOn","console","mockImplementation","clearAllMocks","afterEach","mockRestore","test","error","name","message","details","field","handleValidationError","expect","validationError","toHaveBeenCalledWith","code","constraint","handleDatabaseError","conflict","badRequest","requestTimeout","handleAuthenticationError","unauthorized","handleAuthorizationError","forbidden","handleNotFoundError","notFound","handleNetworkError","serviceUnavailable","badGateway","handleControllerError","toHaveBeenCalled","Error","stack","objectContaining","handleExpressError","not","request","createCustomError","toBe","toBeInstanceOf","toEqual","operationalErrors","forEach","isOperationalError","nonOperationalErrors"],"sources":["errorHandler.test.js"],"sourcesContent":["/**\n * Testes unitários para ErrorHandler\n * Testa o tratamento centralizado de erros\n */\n\nconst ErrorHandler = require('../../utils/errorHandler');\nconst ResponseHelper = require('../../utils/responseHelper');\n\n// Mock do ResponseHelper\njest.mock('../../utils/responseHelper');\n\n// Mock do objeto response do Express\nconst createMockResponse = () => ({\n  status: jest.fn().mockReturnThis(),\n  json: jest.fn().mockReturnThis(),\n  headersSent: false\n});\n\n// Mock do objeto request do Express\nconst createMockRequest = () => ({\n  method: 'GET',\n  url: '/api/test',\n  ip: '127.0.0.1',\n  headers: { 'user-agent': 'test-agent' }\n});\n\ndescribe('ErrorHandler', () => {\n  let mockRes;\n  let mockReq;\n  let mockNext;\n  let consoleErrorSpy;\n\n  beforeEach(() => {\n    mockRes = createMockResponse();\n    mockReq = createMockRequest();\n    mockNext = jest.fn();\n    \n    // Mock console.error para evitar logs durante os testes\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    \n    // Limpar mocks\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    consoleErrorSpy.mockRestore();\n  });\n\n  describe('handleValidationError', () => {\n    test('should handle validation error with details', () => {\n      const error = {\n        name: 'ValidationError',\n        message: 'Dados inválidos',\n        details: [\n          { field: 'email', message: 'Email inválido' },\n          { field: 'phone', message: 'Telefone obrigatório' }\n        ]\n      };\n\n      ErrorHandler.handleValidationError(error, mockRes);\n\n      expect(ResponseHelper.validationError).toHaveBeenCalledWith(\n        mockRes,\n        'Dados inválidos',\n        error.details\n      );\n    });\n\n    test('should handle validation error without details', () => {\n      const error = {\n        name: 'ValidationError',\n        message: 'Erro de validação'\n      };\n\n      ErrorHandler.handleValidationError(error, mockRes);\n\n      expect(ResponseHelper.validationError).toHaveBeenCalledWith(\n        mockRes,\n        'Erro de validação',\n        []\n      );\n    });\n  });\n\n  describe('handleDatabaseError', () => {\n    test('should handle unique constraint violation', () => {\n      const error = {\n        code: '23505', // PostgreSQL unique violation\n        message: 'duplicate key value violates unique constraint',\n        constraint: 'clients_email_unique'\n      };\n\n      ErrorHandler.handleDatabaseError(error, mockRes);\n\n      expect(ResponseHelper.conflict).toHaveBeenCalledWith(\n        mockRes,\n        'Registro já existe'\n      );\n    });\n\n    test('should handle foreign key constraint violation', () => {\n      const error = {\n        code: '23503', // PostgreSQL foreign key violation\n        message: 'violates foreign key constraint'\n      };\n\n      ErrorHandler.handleDatabaseError(error, mockRes);\n\n      expect(ResponseHelper.badRequest).toHaveBeenCalledWith(\n        mockRes,\n        'Referência inválida'\n      );\n    });\n\n    test('should handle not null constraint violation', () => {\n      const error = {\n        code: '23502', // PostgreSQL not null violation\n        message: 'null value in column violates not-null constraint'\n      };\n\n      ErrorHandler.handleDatabaseError(error, mockRes);\n\n      expect(ResponseHelper.badRequest).toHaveBeenCalledWith(\n        mockRes,\n        'Campo obrigatório não informado'\n      );\n    });\n\n    test('should handle connection timeout', () => {\n      const error = {\n        code: 'ETIMEDOUT',\n        message: 'Connection timeout'\n      };\n\n      ErrorHandler.handleDatabaseError(error, mockRes);\n\n      expect(ResponseHelper.requestTimeout).toHaveBeenCalledWith(\n        mockRes,\n        'Timeout na conexão com o banco de dados'\n      );\n    });\n\n    test('should handle generic database error', () => {\n      const error = {\n        message: 'Generic database error'\n      };\n\n      ErrorHandler.handleDatabaseError(error, mockRes);\n\n      expect(ResponseHelper.error).toHaveBeenCalledWith(\n        mockRes,\n        'Erro no banco de dados'\n      );\n    });\n  });\n\n  describe('handleAuthenticationError', () => {\n    test('should handle authentication error', () => {\n      const error = {\n        name: 'AuthenticationError',\n        message: 'Token inválido'\n      };\n\n      ErrorHandler.handleAuthenticationError(error, mockRes);\n\n      expect(ResponseHelper.unauthorized).toHaveBeenCalledWith(\n        mockRes,\n        'Token inválido'\n      );\n    });\n\n    test('should use default message for authentication error', () => {\n      const error = {\n        name: 'AuthenticationError'\n      };\n\n      ErrorHandler.handleAuthenticationError(error, mockRes);\n\n      expect(ResponseHelper.unauthorized).toHaveBeenCalledWith(\n        mockRes,\n        'Falha na autenticação'\n      );\n    });\n  });\n\n  describe('handleAuthorizationError', () => {\n    test('should handle authorization error', () => {\n      const error = {\n        name: 'AuthorizationError',\n        message: 'Acesso negado'\n      };\n\n      ErrorHandler.handleAuthorizationError(error, mockRes);\n\n      expect(ResponseHelper.forbidden).toHaveBeenCalledWith(\n        mockRes,\n        'Acesso negado'\n      );\n    });\n\n    test('should use default message for authorization error', () => {\n      const error = {\n        name: 'AuthorizationError'\n      };\n\n      ErrorHandler.handleAuthorizationError(error, mockRes);\n\n      expect(ResponseHelper.forbidden).toHaveBeenCalledWith(\n        mockRes,\n        'Acesso não autorizado'\n      );\n    });\n  });\n\n  describe('handleNotFoundError', () => {\n    test('should handle not found error', () => {\n      const error = {\n        name: 'NotFoundError',\n        message: 'Cliente não encontrado'\n      };\n\n      ErrorHandler.handleNotFoundError(error, mockRes);\n\n      expect(ResponseHelper.notFound).toHaveBeenCalledWith(\n        mockRes,\n        'Cliente não encontrado'\n      );\n    });\n\n    test('should use default message for not found error', () => {\n      const error = {\n        name: 'NotFoundError'\n      };\n\n      ErrorHandler.handleNotFoundError(error, mockRes);\n\n      expect(ResponseHelper.notFound).toHaveBeenCalledWith(\n        mockRes,\n        'Recurso não encontrado'\n      );\n    });\n  });\n\n  describe('handleNetworkError', () => {\n    test('should handle connection refused error', () => {\n      const error = {\n        code: 'ECONNREFUSED',\n        message: 'Connection refused'\n      };\n\n      ErrorHandler.handleNetworkError(error, mockRes);\n\n      expect(ResponseHelper.serviceUnavailable).toHaveBeenCalledWith(\n        mockRes,\n        'Serviço indisponível'\n      );\n    });\n\n    test('should handle DNS lookup error', () => {\n      const error = {\n        code: 'ENOTFOUND',\n        message: 'DNS lookup failed'\n      };\n\n      ErrorHandler.handleNetworkError(error, mockRes);\n\n      expect(ResponseHelper.badGateway).toHaveBeenCalledWith(\n        mockRes,\n        'Erro de conectividade'\n      );\n    });\n\n    test('should handle generic network error', () => {\n      const error = {\n        message: 'Network error'\n      };\n\n      ErrorHandler.handleNetworkError(error, mockRes);\n\n      expect(ResponseHelper.error).toHaveBeenCalledWith(\n        mockRes,\n        'Erro de rede'\n      );\n    });\n  });\n\n  describe('handleControllerError', () => {\n    test('should handle validation error in controller', () => {\n      const error = {\n        name: 'ValidationError',\n        message: 'Dados inválidos'\n      };\n\n      ErrorHandler.handleControllerError(error, mockRes);\n\n      expect(ResponseHelper.validationError).toHaveBeenCalled();\n    });\n\n    test('should handle database error in controller', () => {\n      const error = {\n        code: '23505',\n        message: 'duplicate key'\n      };\n\n      ErrorHandler.handleControllerError(error, mockRes);\n\n      expect(ResponseHelper.conflict).toHaveBeenCalled();\n    });\n\n    test('should handle generic error in controller', () => {\n      const error = {\n        message: 'Generic error'\n      };\n\n      ErrorHandler.handleControllerError(error, mockRes);\n\n      expect(ResponseHelper.error).toHaveBeenCalledWith(\n        mockRes,\n        'Erro interno do servidor'\n      );\n    });\n\n    test('should log error details', () => {\n      const error = new Error('Test error');\n      error.stack = 'Error stack trace';\n\n      ErrorHandler.handleControllerError(error, mockRes);\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Controller Error:',\n        expect.objectContaining({\n          message: 'Test error',\n          stack: 'Error stack trace'\n        })\n      );\n    });\n  });\n\n  describe('handleExpressError', () => {\n    test('should skip if headers already sent', () => {\n      mockRes.headersSent = true;\n      const error = new Error('Test error');\n\n      ErrorHandler.handleExpressError(error, mockReq, mockRes, mockNext);\n\n      expect(mockNext).toHaveBeenCalledWith(error);\n      expect(ResponseHelper.error).not.toHaveBeenCalled();\n    });\n\n    test('should handle validation error in Express middleware', () => {\n      const error = {\n        name: 'ValidationError',\n        message: 'Validation failed'\n      };\n\n      ErrorHandler.handleExpressError(error, mockReq, mockRes, mockNext);\n\n      expect(ResponseHelper.validationError).toHaveBeenCalled();\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    test('should handle authentication error in Express middleware', () => {\n      const error = {\n        name: 'AuthenticationError',\n        message: 'Auth failed'\n      };\n\n      ErrorHandler.handleExpressError(error, mockReq, mockRes, mockNext);\n\n      expect(ResponseHelper.unauthorized).toHaveBeenCalled();\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    test('should handle generic error in Express middleware', () => {\n      const error = new Error('Generic error');\n\n      ErrorHandler.handleExpressError(error, mockReq, mockRes, mockNext);\n\n      expect(ResponseHelper.error).toHaveBeenCalledWith(\n        mockRes,\n        'Erro interno do servidor'\n      );\n      expect(mockNext).not.toHaveBeenCalled();\n    });\n\n    test('should log request details with error', () => {\n      const error = new Error('Test error');\n\n      ErrorHandler.handleExpressError(error, mockReq, mockRes, mockNext);\n\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        'Express Error:',\n        expect.objectContaining({\n          error: expect.objectContaining({\n            message: 'Test error'\n          }),\n          request: expect.objectContaining({\n            method: 'GET',\n            url: '/api/test',\n            ip: '127.0.0.1'\n          })\n        })\n      );\n    });\n  });\n\n  describe('createCustomError', () => {\n    test('should create custom error with name and message', () => {\n      const error = ErrorHandler.createCustomError('CustomError', 'Custom message');\n\n      expect(error.name).toBe('CustomError');\n      expect(error.message).toBe('Custom message');\n      expect(error).toBeInstanceOf(Error);\n    });\n\n    test('should create custom error with additional properties', () => {\n      const details = { field: 'email', code: 'INVALID' };\n      const error = ErrorHandler.createCustomError('ValidationError', 'Invalid data', details);\n\n      expect(error.name).toBe('ValidationError');\n      expect(error.message).toBe('Invalid data');\n      expect(error.details).toEqual(details);\n    });\n  });\n\n  describe('isOperationalError', () => {\n    test('should identify operational errors', () => {\n      const operationalErrors = [\n        { name: 'ValidationError' },\n        { name: 'NotFoundError' },\n        { name: 'AuthenticationError' },\n        { name: 'AuthorizationError' },\n        { code: '23505' }, // Database constraint\n        { code: 'ECONNREFUSED' } // Network error\n      ];\n\n      operationalErrors.forEach(error => {\n        expect(ErrorHandler.isOperationalError(error)).toBe(true);\n      });\n    });\n\n    test('should identify non-operational errors', () => {\n      const nonOperationalErrors = [\n        new Error('Generic error'),\n        { name: 'SyntaxError' },\n        { name: 'ReferenceError' },\n        { message: 'Unknown error' }\n      ];\n\n      nonOperationalErrors.forEach(error => {\n        expect(ErrorHandler.isOperationalError(error)).toBe(false);\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}