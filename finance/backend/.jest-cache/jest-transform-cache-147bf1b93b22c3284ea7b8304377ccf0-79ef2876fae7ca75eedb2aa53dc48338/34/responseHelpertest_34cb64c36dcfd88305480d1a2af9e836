52a6d33d501c2fbba2c23a0c16519be3
"use strict";

/**
 * Testes unitários para ResponseHelper
 * Testa todas as respostas HTTP padronizadas
 */

const {
  ResponseHelper
} = require('../../utils/responseHelper');
const {
  HttpStatusCodes,
  ErrorCodes,
  SuccessMessages
} = require('../../utils/constants');

// Mock do objeto response do Express
const createMockResponse = () => {
  const res = {
    status: jest.fn().mockReturnThis(),
    json: jest.fn().mockReturnThis(),
    statusCode: null,
    jsonData: null
  };

  // Capturar os dados enviados
  res.status.mockImplementation(code => {
    res.statusCode = code;
    return res;
  });
  res.json.mockImplementation(data => {
    res.jsonData = data;
    return res;
  });
  return res;
};
describe('ResponseHelper', () => {
  let mockRes;
  beforeEach(() => {
    mockRes = createMockResponse();
  });
  describe('success', () => {
    test('should send success response with data and message', () => {
      const data = {
        id: 1,
        name: 'Test'
      };
      const message = 'Operação realizada com sucesso';
      ResponseHelper.success(mockRes, data, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.OK);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        message,
        data,
        timestamp: expect.any(String)
      });
    });
    test('should use default message when not provided', () => {
      const data = {
        id: 1
      };
      ResponseHelper.success(mockRes, data);
      expect(mockRes.jsonData.message).toBe(SuccessMessages.OPERATION_SUCCESS);
    });
    test('should handle null data', () => {
      ResponseHelper.success(mockRes, null);
      expect(mockRes.jsonData.data).toBeNull();
      expect(mockRes.jsonData.success).toBe(true);
    });
  });
  describe('created', () => {
    test('should send created response', () => {
      const data = {
        id: 1,
        name: 'New Item'
      };
      const message = 'Item criado com sucesso';
      ResponseHelper.created(mockRes, data, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.CREATED);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        message,
        data,
        timestamp: expect.any(String)
      });
    });
  });
  describe('noContent', () => {
    test('should send no content response', () => {
      ResponseHelper.noContent(mockRes);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.NO_CONTENT);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        message: 'Operação realizada com sucesso',
        timestamp: expect.any(String)
      });
    });
  });
  describe('error', () => {
    test('should send error response', () => {
      const message = 'Erro interno';
      const code = ErrorCodes.INTERNAL_ERROR;
      ResponseHelper.error(mockRes, message, code);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.INTERNAL_SERVER_ERROR);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code,
        timestamp: expect.any(String)
      });
    });
    test('should use default values when not provided', () => {
      ResponseHelper.error(mockRes);
      expect(mockRes.jsonData.message).toBe('Erro interno do servidor');
      expect(mockRes.jsonData.code).toBe(ErrorCodes.INTERNAL_ERROR);
    });
  });
  describe('badRequest', () => {
    test('should send bad request response', () => {
      const message = 'Dados inválidos';
      ResponseHelper.badRequest(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.BAD_REQUEST);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.VALIDATION_ERROR,
        timestamp: expect.any(String)
      });
    });
  });
  describe('validationError', () => {
    test('should send validation error response with errors array', () => {
      const message = 'Dados inválidos';
      const errors = [{
        field: 'email',
        message: 'Email inválido'
      }, {
        field: 'phone',
        message: 'Telefone obrigatório'
      }];
      ResponseHelper.validationError(mockRes, message, errors);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.UNPROCESSABLE_ENTITY);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.VALIDATION_ERROR,
        errors,
        timestamp: expect.any(String)
      });
    });
    test('should handle empty errors array', () => {
      ResponseHelper.validationError(mockRes, 'Erro de validação', []);
      expect(mockRes.jsonData.errors).toEqual([]);
    });
  });
  describe('notFound', () => {
    test('should send not found response', () => {
      const message = 'Cliente não encontrado';
      ResponseHelper.notFound(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.NOT_FOUND);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.NOT_FOUND,
        timestamp: expect.any(String)
      });
    });
  });
  describe('conflict', () => {
    test('should send conflict response', () => {
      const message = 'Email já existe';
      ResponseHelper.conflict(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.CONFLICT);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.CONFLICT,
        timestamp: expect.any(String)
      });
    });
  });
  describe('unauthorized', () => {
    test('should send unauthorized response', () => {
      const message = 'Token inválido';
      ResponseHelper.unauthorized(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.UNAUTHORIZED);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.UNAUTHORIZED,
        timestamp: expect.any(String)
      });
    });
  });
  describe('forbidden', () => {
    test('should send forbidden response', () => {
      const message = 'Acesso negado';
      ResponseHelper.forbidden(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.FORBIDDEN);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: ErrorCodes.FORBIDDEN,
        timestamp: expect.any(String)
      });
    });
  });
  describe('paginated', () => {
    test('should send paginated response with metadata', () => {
      const data = [{
        id: 1
      }, {
        id: 2
      }];
      const pagination = {
        page: 1,
        limit: 10,
        total: 25,
        totalPages: 3
      };
      const message = 'Clientes encontrados';
      ResponseHelper.paginated(mockRes, data, pagination, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.OK);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: true,
        message,
        data,
        pagination: {
          currentPage: 1,
          totalPages: 3,
          totalItems: 25,
          itemsPerPage: 10,
          hasNextPage: true,
          hasPreviousPage: false
        },
        timestamp: expect.any(String)
      });
    });
    test('should calculate hasNextPage and hasPreviousPage correctly', () => {
      const data = [];
      const pagination = {
        page: 2,
        limit: 10,
        total: 25,
        totalPages: 3
      };
      ResponseHelper.paginated(mockRes, data, pagination);
      expect(mockRes.jsonData.pagination.hasNextPage).toBe(true);
      expect(mockRes.jsonData.pagination.hasPreviousPage).toBe(true);
    });
    test('should handle last page correctly', () => {
      const data = [];
      const pagination = {
        page: 3,
        limit: 10,
        total: 25,
        totalPages: 3
      };
      ResponseHelper.paginated(mockRes, data, pagination);
      expect(mockRes.jsonData.pagination.hasNextPage).toBe(false);
      expect(mockRes.jsonData.pagination.hasPreviousPage).toBe(true);
    });
  });
  describe('requestTimeout', () => {
    test('should send request timeout response', () => {
      const message = 'Timeout da requisição';
      ResponseHelper.requestTimeout(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.REQUEST_TIMEOUT);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: 'REQUEST_TIMEOUT',
        timestamp: expect.any(String)
      });
    });
  });
  describe('tooManyRequests', () => {
    test('should send too many requests response', () => {
      const message = 'Muitas requisições';
      ResponseHelper.tooManyRequests(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.TOO_MANY_REQUESTS);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: 'TOO_MANY_REQUESTS',
        timestamp: expect.any(String)
      });
    });
  });
  describe('badGateway', () => {
    test('should send bad gateway response', () => {
      const message = 'Bad Gateway';
      ResponseHelper.badGateway(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.BAD_GATEWAY);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: 'BAD_GATEWAY',
        timestamp: expect.any(String)
      });
    });
  });
  describe('serviceUnavailable', () => {
    test('should send service unavailable response', () => {
      const message = 'Serviço indisponível';
      ResponseHelper.serviceUnavailable(mockRes, message);
      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.SERVICE_UNAVAILABLE);
      expect(mockRes.json).toHaveBeenCalledWith({
        success: false,
        message,
        code: 'SERVICE_UNAVAILABLE',
        timestamp: expect.any(String)
      });
    });
  });
  describe('timestamp format', () => {
    test('should include valid ISO timestamp in all responses', () => {
      ResponseHelper.success(mockRes, {});
      const timestamp = mockRes.jsonData.timestamp;
      expect(timestamp).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/);
      expect(new Date(timestamp).toISOString()).toBe(timestamp);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZXNwb25zZUhlbHBlciIsInJlcXVpcmUiLCJIdHRwU3RhdHVzQ29kZXMiLCJFcnJvckNvZGVzIiwiU3VjY2Vzc01lc3NhZ2VzIiwiY3JlYXRlTW9ja1Jlc3BvbnNlIiwicmVzIiwic3RhdHVzIiwiamVzdCIsImZuIiwibW9ja1JldHVyblRoaXMiLCJqc29uIiwic3RhdHVzQ29kZSIsImpzb25EYXRhIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiY29kZSIsImRhdGEiLCJkZXNjcmliZSIsIm1vY2tSZXMiLCJiZWZvcmVFYWNoIiwidGVzdCIsImlkIiwibmFtZSIsIm1lc3NhZ2UiLCJzdWNjZXNzIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJPSyIsInRpbWVzdGFtcCIsImFueSIsIlN0cmluZyIsInRvQmUiLCJPUEVSQVRJT05fU1VDQ0VTUyIsInRvQmVOdWxsIiwiY3JlYXRlZCIsIkNSRUFURUQiLCJub0NvbnRlbnQiLCJOT19DT05URU5UIiwiSU5URVJOQUxfRVJST1IiLCJlcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsImJhZFJlcXVlc3QiLCJCQURfUkVRVUVTVCIsIlZBTElEQVRJT05fRVJST1IiLCJlcnJvcnMiLCJmaWVsZCIsInZhbGlkYXRpb25FcnJvciIsIlVOUFJPQ0VTU0FCTEVfRU5USVRZIiwidG9FcXVhbCIsIm5vdEZvdW5kIiwiTk9UX0ZPVU5EIiwiY29uZmxpY3QiLCJDT05GTElDVCIsInVuYXV0aG9yaXplZCIsIlVOQVVUSE9SSVpFRCIsImZvcmJpZGRlbiIsIkZPUkJJRERFTiIsInBhZ2luYXRpb24iLCJwYWdlIiwibGltaXQiLCJ0b3RhbCIsInRvdGFsUGFnZXMiLCJwYWdpbmF0ZWQiLCJjdXJyZW50UGFnZSIsInRvdGFsSXRlbXMiLCJpdGVtc1BlclBhZ2UiLCJoYXNOZXh0UGFnZSIsImhhc1ByZXZpb3VzUGFnZSIsInJlcXVlc3RUaW1lb3V0IiwiUkVRVUVTVF9USU1FT1VUIiwidG9vTWFueVJlcXVlc3RzIiwiVE9PX01BTllfUkVRVUVTVFMiLCJiYWRHYXRld2F5IiwiQkFEX0dBVEVXQVkiLCJzZXJ2aWNlVW5hdmFpbGFibGUiLCJTRVJWSUNFX1VOQVZBSUxBQkxFIiwidG9NYXRjaCIsIkRhdGUiLCJ0b0lTT1N0cmluZyJdLCJzb3VyY2VzIjpbInJlc3BvbnNlSGVscGVyLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUZXN0ZXMgdW5pdMOhcmlvcyBwYXJhIFJlc3BvbnNlSGVscGVyXG4gKiBUZXN0YSB0b2RhcyBhcyByZXNwb3N0YXMgSFRUUCBwYWRyb25pemFkYXNcbiAqL1xuXG5jb25zdCB7IFJlc3BvbnNlSGVscGVyIH0gPSByZXF1aXJlKCcuLi8uLi91dGlscy9yZXNwb25zZUhlbHBlcicpO1xuY29uc3QgeyBIdHRwU3RhdHVzQ29kZXMsIEVycm9yQ29kZXMsIFN1Y2Nlc3NNZXNzYWdlcyB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvY29uc3RhbnRzJyk7XG5cbi8vIE1vY2sgZG8gb2JqZXRvIHJlc3BvbnNlIGRvIEV4cHJlc3NcbmNvbnN0IGNyZWF0ZU1vY2tSZXNwb25zZSA9ICgpID0+IHtcbiAgY29uc3QgcmVzID0ge1xuICAgIHN0YXR1czogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAganNvbjogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gICAgc3RhdHVzQ29kZTogbnVsbCxcbiAgICBqc29uRGF0YTogbnVsbFxuICB9O1xuICBcbiAgLy8gQ2FwdHVyYXIgb3MgZGFkb3MgZW52aWFkb3NcbiAgcmVzLnN0YXR1cy5tb2NrSW1wbGVtZW50YXRpb24oKGNvZGUpID0+IHtcbiAgICByZXMuc3RhdHVzQ29kZSA9IGNvZGU7XG4gICAgcmV0dXJuIHJlcztcbiAgfSk7XG4gIFxuICByZXMuanNvbi5tb2NrSW1wbGVtZW50YXRpb24oKGRhdGEpID0+IHtcbiAgICByZXMuanNvbkRhdGEgPSBkYXRhO1xuICAgIHJldHVybiByZXM7XG4gIH0pO1xuICBcbiAgcmV0dXJuIHJlcztcbn07XG5cbmRlc2NyaWJlKCdSZXNwb25zZUhlbHBlcicsICgpID0+IHtcbiAgbGV0IG1vY2tSZXM7XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja1JlcyA9IGNyZWF0ZU1vY2tSZXNwb25zZSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgnc3VjY2VzcycsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgc2VuZCBzdWNjZXNzIHJlc3BvbnNlIHdpdGggZGF0YSBhbmQgbWVzc2FnZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7IGlkOiAxLCBuYW1lOiAnVGVzdCcgfTtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnT3BlcmHDp8OjbyByZWFsaXphZGEgY29tIHN1Y2Vzc28nO1xuICAgICAgXG4gICAgICBSZXNwb25zZUhlbHBlci5zdWNjZXNzKG1vY2tSZXMsIGRhdGEsIG1lc3NhZ2UpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja1Jlcy5zdGF0dXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKEh0dHBTdGF0dXNDb2Rlcy5PSyk7XG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCB1c2UgZGVmYXVsdCBtZXNzYWdlIHdoZW4gbm90IHByb3ZpZGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IHsgaWQ6IDEgfTtcbiAgICAgIFxuICAgICAgUmVzcG9uc2VIZWxwZXIuc3VjY2Vzcyhtb2NrUmVzLCBkYXRhKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tSZXMuanNvbkRhdGEubWVzc2FnZSkudG9CZShTdWNjZXNzTWVzc2FnZXMuT1BFUkFUSU9OX1NVQ0NFU1MpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBudWxsIGRhdGEnLCAoKSA9PiB7XG4gICAgICBSZXNwb25zZUhlbHBlci5zdWNjZXNzKG1vY2tSZXMsIG51bGwpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uRGF0YS5kYXRhKS50b0JlTnVsbCgpO1xuICAgICAgZXhwZWN0KG1vY2tSZXMuanNvbkRhdGEuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NyZWF0ZWQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHNlbmQgY3JlYXRlZCByZXNwb25zZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSB7IGlkOiAxLCBuYW1lOiAnTmV3IEl0ZW0nIH07XG4gICAgICBjb25zdCBtZXNzYWdlID0gJ0l0ZW0gY3JpYWRvIGNvbSBzdWNlc3NvJztcbiAgICAgIFxuICAgICAgUmVzcG9uc2VIZWxwZXIuY3JlYXRlZChtb2NrUmVzLCBkYXRhLCBtZXNzYWdlKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tSZXMuc3RhdHVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChIdHRwU3RhdHVzQ29kZXMuQ1JFQVRFRCk7XG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ25vQ29udGVudCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgc2VuZCBubyBjb250ZW50IHJlc3BvbnNlJywgKCkgPT4ge1xuICAgICAgUmVzcG9uc2VIZWxwZXIubm9Db250ZW50KG1vY2tSZXMpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja1Jlcy5zdGF0dXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKEh0dHBTdGF0dXNDb2Rlcy5OT19DT05URU5UKTtcbiAgICAgIGV4cGVjdChtb2NrUmVzLmpzb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogJ09wZXJhw6fDo28gcmVhbGl6YWRhIGNvbSBzdWNlc3NvJyxcbiAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZylcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZXJyb3InLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHNlbmQgZXJyb3IgcmVzcG9uc2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gJ0Vycm8gaW50ZXJubyc7XG4gICAgICBjb25zdCBjb2RlID0gRXJyb3JDb2Rlcy5JTlRFUk5BTF9FUlJPUjtcbiAgICAgIFxuICAgICAgUmVzcG9uc2VIZWxwZXIuZXJyb3IobW9ja1JlcywgbWVzc2FnZSwgY29kZSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrUmVzLnN0YXR1cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoSHR0cFN0YXR1c0NvZGVzLklOVEVSTkFMX1NFUlZFUl9FUlJPUik7XG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBjb2RlLFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgdXNlIGRlZmF1bHQgdmFsdWVzIHdoZW4gbm90IHByb3ZpZGVkJywgKCkgPT4ge1xuICAgICAgUmVzcG9uc2VIZWxwZXIuZXJyb3IobW9ja1Jlcyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrUmVzLmpzb25EYXRhLm1lc3NhZ2UpLnRvQmUoJ0Vycm8gaW50ZXJubyBkbyBzZXJ2aWRvcicpO1xuICAgICAgZXhwZWN0KG1vY2tSZXMuanNvbkRhdGEuY29kZSkudG9CZShFcnJvckNvZGVzLklOVEVSTkFMX0VSUk9SKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2JhZFJlcXVlc3QnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHNlbmQgYmFkIHJlcXVlc3QgcmVzcG9uc2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gJ0RhZG9zIGludsOhbGlkb3MnO1xuICAgICAgXG4gICAgICBSZXNwb25zZUhlbHBlci5iYWRSZXF1ZXN0KG1vY2tSZXMsIG1lc3NhZ2UpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja1Jlcy5zdGF0dXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKEh0dHBTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVCk7XG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBjb2RlOiBFcnJvckNvZGVzLlZBTElEQVRJT05fRVJST1IsXG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3ZhbGlkYXRpb25FcnJvcicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgc2VuZCB2YWxpZGF0aW9uIGVycm9yIHJlc3BvbnNlIHdpdGggZXJyb3JzIGFycmF5JywgKCkgPT4ge1xuICAgICAgY29uc3QgbWVzc2FnZSA9ICdEYWRvcyBpbnbDoWxpZG9zJztcbiAgICAgIGNvbnN0IGVycm9ycyA9IFtcbiAgICAgICAgeyBmaWVsZDogJ2VtYWlsJywgbWVzc2FnZTogJ0VtYWlsIGludsOhbGlkbycgfSxcbiAgICAgICAgeyBmaWVsZDogJ3Bob25lJywgbWVzc2FnZTogJ1RlbGVmb25lIG9icmlnYXTDs3JpbycgfVxuICAgICAgXTtcbiAgICAgIFxuICAgICAgUmVzcG9uc2VIZWxwZXIudmFsaWRhdGlvbkVycm9yKG1vY2tSZXMsIG1lc3NhZ2UsIGVycm9ycyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrUmVzLnN0YXR1cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoSHR0cFN0YXR1c0NvZGVzLlVOUFJPQ0VTU0FCTEVfRU5USVRZKTtcbiAgICAgIGV4cGVjdChtb2NrUmVzLmpzb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIGNvZGU6IEVycm9yQ29kZXMuVkFMSURBVElPTl9FUlJPUixcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGVtcHR5IGVycm9ycyBhcnJheScsICgpID0+IHtcbiAgICAgIFJlc3BvbnNlSGVscGVyLnZhbGlkYXRpb25FcnJvcihtb2NrUmVzLCAnRXJybyBkZSB2YWxpZGHDp8OjbycsIFtdKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tSZXMuanNvbkRhdGEuZXJyb3JzKS50b0VxdWFsKFtdKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ25vdEZvdW5kJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBzZW5kIG5vdCBmb3VuZCByZXNwb25zZScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnQ2xpZW50ZSBuw6NvIGVuY29udHJhZG8nO1xuICAgICAgXG4gICAgICBSZXNwb25zZUhlbHBlci5ub3RGb3VuZChtb2NrUmVzLCBtZXNzYWdlKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tSZXMuc3RhdHVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChIdHRwU3RhdHVzQ29kZXMuTk9UX0ZPVU5EKTtcbiAgICAgIGV4cGVjdChtb2NrUmVzLmpzb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIGNvZGU6IEVycm9yQ29kZXMuTk9UX0ZPVU5ELFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjb25mbGljdCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgc2VuZCBjb25mbGljdCByZXNwb25zZScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnRW1haWwgasOhIGV4aXN0ZSc7XG4gICAgICBcbiAgICAgIFJlc3BvbnNlSGVscGVyLmNvbmZsaWN0KG1vY2tSZXMsIG1lc3NhZ2UpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja1Jlcy5zdGF0dXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKEh0dHBTdGF0dXNDb2Rlcy5DT05GTElDVCk7XG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBjb2RlOiBFcnJvckNvZGVzLkNPTkZMSUNULFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd1bmF1dGhvcml6ZWQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHNlbmQgdW5hdXRob3JpemVkIHJlc3BvbnNlJywgKCkgPT4ge1xuICAgICAgY29uc3QgbWVzc2FnZSA9ICdUb2tlbiBpbnbDoWxpZG8nO1xuICAgICAgXG4gICAgICBSZXNwb25zZUhlbHBlci51bmF1dGhvcml6ZWQobW9ja1JlcywgbWVzc2FnZSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrUmVzLnN0YXR1cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoSHR0cFN0YXR1c0NvZGVzLlVOQVVUSE9SSVpFRCk7XG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBjb2RlOiBFcnJvckNvZGVzLlVOQVVUSE9SSVpFRCxcbiAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZylcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZm9yYmlkZGVuJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBzZW5kIGZvcmJpZGRlbiByZXNwb25zZScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnQWNlc3NvIG5lZ2Fkbyc7XG4gICAgICBcbiAgICAgIFJlc3BvbnNlSGVscGVyLmZvcmJpZGRlbihtb2NrUmVzLCBtZXNzYWdlKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tSZXMuc3RhdHVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChIdHRwU3RhdHVzQ29kZXMuRk9SQklEREVOKTtcbiAgICAgIGV4cGVjdChtb2NrUmVzLmpzb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIGNvZGU6IEVycm9yQ29kZXMuRk9SQklEREVOLFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwYWdpbmF0ZWQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHNlbmQgcGFnaW5hdGVkIHJlc3BvbnNlIHdpdGggbWV0YWRhdGEnLCAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gW3sgaWQ6IDEgfSwgeyBpZDogMiB9XTtcbiAgICAgIGNvbnN0IHBhZ2luYXRpb24gPSB7XG4gICAgICAgIHBhZ2U6IDEsXG4gICAgICAgIGxpbWl0OiAxMCxcbiAgICAgICAgdG90YWw6IDI1LFxuICAgICAgICB0b3RhbFBhZ2VzOiAzXG4gICAgICB9O1xuICAgICAgY29uc3QgbWVzc2FnZSA9ICdDbGllbnRlcyBlbmNvbnRyYWRvcyc7XG4gICAgICBcbiAgICAgIFJlc3BvbnNlSGVscGVyLnBhZ2luYXRlZChtb2NrUmVzLCBkYXRhLCBwYWdpbmF0aW9uLCBtZXNzYWdlKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tSZXMuc3RhdHVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChIdHRwU3RhdHVzQ29kZXMuT0spO1xuICAgICAgZXhwZWN0KG1vY2tSZXMuanNvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBkYXRhLFxuICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICAgICAgdG90YWxQYWdlczogMyxcbiAgICAgICAgICB0b3RhbEl0ZW1zOiAyNSxcbiAgICAgICAgICBpdGVtc1BlclBhZ2U6IDEwLFxuICAgICAgICAgIGhhc05leHRQYWdlOiB0cnVlLFxuICAgICAgICAgIGhhc1ByZXZpb3VzUGFnZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZylcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGNhbGN1bGF0ZSBoYXNOZXh0UGFnZSBhbmQgaGFzUHJldmlvdXNQYWdlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBbXTtcbiAgICAgIGNvbnN0IHBhZ2luYXRpb24gPSB7XG4gICAgICAgIHBhZ2U6IDIsXG4gICAgICAgIGxpbWl0OiAxMCxcbiAgICAgICAgdG90YWw6IDI1LFxuICAgICAgICB0b3RhbFBhZ2VzOiAzXG4gICAgICB9O1xuICAgICAgXG4gICAgICBSZXNwb25zZUhlbHBlci5wYWdpbmF0ZWQobW9ja1JlcywgZGF0YSwgcGFnaW5hdGlvbik7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrUmVzLmpzb25EYXRhLnBhZ2luYXRpb24uaGFzTmV4dFBhZ2UpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uRGF0YS5wYWdpbmF0aW9uLmhhc1ByZXZpb3VzUGFnZSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbGFzdCBwYWdlIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBbXTtcbiAgICAgIGNvbnN0IHBhZ2luYXRpb24gPSB7XG4gICAgICAgIHBhZ2U6IDMsXG4gICAgICAgIGxpbWl0OiAxMCxcbiAgICAgICAgdG90YWw6IDI1LFxuICAgICAgICB0b3RhbFBhZ2VzOiAzXG4gICAgICB9O1xuICAgICAgXG4gICAgICBSZXNwb25zZUhlbHBlci5wYWdpbmF0ZWQobW9ja1JlcywgZGF0YSwgcGFnaW5hdGlvbik7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrUmVzLmpzb25EYXRhLnBhZ2luYXRpb24uaGFzTmV4dFBhZ2UpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KG1vY2tSZXMuanNvbkRhdGEucGFnaW5hdGlvbi5oYXNQcmV2aW91c1BhZ2UpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdyZXF1ZXN0VGltZW91dCcsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgc2VuZCByZXF1ZXN0IHRpbWVvdXQgcmVzcG9uc2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gJ1RpbWVvdXQgZGEgcmVxdWlzacOnw6NvJztcbiAgICAgIFxuICAgICAgUmVzcG9uc2VIZWxwZXIucmVxdWVzdFRpbWVvdXQobW9ja1JlcywgbWVzc2FnZSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrUmVzLnN0YXR1cykudG9IYXZlQmVlbkNhbGxlZFdpdGgoSHR0cFN0YXR1c0NvZGVzLlJFUVVFU1RfVElNRU9VVCk7XG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBjb2RlOiAnUkVRVUVTVF9USU1FT1VUJyxcbiAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZylcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgndG9vTWFueVJlcXVlc3RzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBzZW5kIHRvbyBtYW55IHJlcXVlc3RzIHJlc3BvbnNlJywgKCkgPT4ge1xuICAgICAgY29uc3QgbWVzc2FnZSA9ICdNdWl0YXMgcmVxdWlzacOnw7Vlcyc7XG4gICAgICBcbiAgICAgIFJlc3BvbnNlSGVscGVyLnRvb01hbnlSZXF1ZXN0cyhtb2NrUmVzLCBtZXNzYWdlKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tSZXMuc3RhdHVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChIdHRwU3RhdHVzQ29kZXMuVE9PX01BTllfUkVRVUVTVFMpO1xuICAgICAgZXhwZWN0KG1vY2tSZXMuanNvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgY29kZTogJ1RPT19NQU5ZX1JFUVVFU1RTJyxcbiAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZylcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnYmFkR2F0ZXdheScsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgc2VuZCBiYWQgZ2F0ZXdheSByZXNwb25zZScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnQmFkIEdhdGV3YXknO1xuICAgICAgXG4gICAgICBSZXNwb25zZUhlbHBlci5iYWRHYXRld2F5KG1vY2tSZXMsIG1lc3NhZ2UpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja1Jlcy5zdGF0dXMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKEh0dHBTdGF0dXNDb2Rlcy5CQURfR0FURVdBWSk7XG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBjb2RlOiAnQkFEX0dBVEVXQVknLFxuICAgICAgICB0aW1lc3RhbXA6IGV4cGVjdC5hbnkoU3RyaW5nKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdzZXJ2aWNlVW5hdmFpbGFibGUnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHNlbmQgc2VydmljZSB1bmF2YWlsYWJsZSByZXNwb25zZScsICgpID0+IHtcbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnU2VydmnDp28gaW5kaXNwb27DrXZlbCc7XG4gICAgICBcbiAgICAgIFJlc3BvbnNlSGVscGVyLnNlcnZpY2VVbmF2YWlsYWJsZShtb2NrUmVzLCBtZXNzYWdlKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tSZXMuc3RhdHVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChIdHRwU3RhdHVzQ29kZXMuU0VSVklDRV9VTkFWQUlMQUJMRSk7XG4gICAgICBleHBlY3QobW9ja1Jlcy5qc29uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBjb2RlOiAnU0VSVklDRV9VTkFWQUlMQUJMRScsXG4gICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShTdHJpbmcpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3RpbWVzdGFtcCBmb3JtYXQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGluY2x1ZGUgdmFsaWQgSVNPIHRpbWVzdGFtcCBpbiBhbGwgcmVzcG9uc2VzJywgKCkgPT4ge1xuICAgICAgUmVzcG9uc2VIZWxwZXIuc3VjY2Vzcyhtb2NrUmVzLCB7fSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG1vY2tSZXMuanNvbkRhdGEudGltZXN0YW1wO1xuICAgICAgZXhwZWN0KHRpbWVzdGFtcCkudG9NYXRjaCgvXlxcZHs0fS1cXGR7Mn0tXFxkezJ9VFxcZHsyfTpcXGR7Mn06XFxkezJ9XFwuXFxkezN9WiQvKTtcbiAgICAgIGV4cGVjdChuZXcgRGF0ZSh0aW1lc3RhbXApLnRvSVNPU3RyaW5nKCkpLnRvQmUodGltZXN0YW1wKTtcbiAgICB9KTtcbiAgfSk7XG59KTsiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTTtFQUFFQTtBQUFlLENBQUMsR0FBR0MsT0FBTyxDQUFDLDRCQUE0QixDQUFDO0FBQ2hFLE1BQU07RUFBRUMsZUFBZTtFQUFFQyxVQUFVO0VBQUVDO0FBQWdCLENBQUMsR0FBR0gsT0FBTyxDQUFDLHVCQUF1QixDQUFDOztBQUV6RjtBQUNBLE1BQU1JLGtCQUFrQixHQUFHQSxDQUFBLEtBQU07RUFDL0IsTUFBTUMsR0FBRyxHQUFHO0lBQ1ZDLE1BQU0sRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxjQUFjLENBQUMsQ0FBQztJQUNsQ0MsSUFBSSxFQUFFSCxJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDLENBQUNDLGNBQWMsQ0FBQyxDQUFDO0lBQ2hDRSxVQUFVLEVBQUUsSUFBSTtJQUNoQkMsUUFBUSxFQUFFO0VBQ1osQ0FBQzs7RUFFRDtFQUNBUCxHQUFHLENBQUNDLE1BQU0sQ0FBQ08sa0JBQWtCLENBQUVDLElBQUksSUFBSztJQUN0Q1QsR0FBRyxDQUFDTSxVQUFVLEdBQUdHLElBQUk7SUFDckIsT0FBT1QsR0FBRztFQUNaLENBQUMsQ0FBQztFQUVGQSxHQUFHLENBQUNLLElBQUksQ0FBQ0csa0JBQWtCLENBQUVFLElBQUksSUFBSztJQUNwQ1Ys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