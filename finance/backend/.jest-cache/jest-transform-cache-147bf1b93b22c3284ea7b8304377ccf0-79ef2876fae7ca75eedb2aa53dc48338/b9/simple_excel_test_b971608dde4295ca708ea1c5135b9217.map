{"version":3,"names":["cov_1hlgqs0rl1","actualCoverage","XLSX","s","require","fs","console","log","filePath","workbook","readFile","SheetNames","firstSheet","Sheets","data","utils","sheet_to_json","length","b","Object","keys","JSON","stringify","result","sheets","firstSheetData","slice","totalRows","writeFileSync","error","message","stack"],"sources":["simple_excel_test.js"],"sourcesContent":["const XLSX = require('xlsx');\nconst fs = require('fs');\n\nconsole.log('Iniciando teste...');\n\ntry {\n    const filePath = '/Users/insitutoareluna/Documents/finance/MACRO_PAGAMENTOS INSTITUTO ARELUNA - EditÃ¡vel (1).xlsm';\n    console.log('Lendo arquivo:', filePath);\n    \n    const workbook = XLSX.readFile(filePath);\n    console.log('Abas:', workbook.SheetNames);\n    \n    const firstSheet = workbook.Sheets[workbook.SheetNames[0]];\n    const data = XLSX.utils.sheet_to_json(firstSheet);\n    \n    console.log('Linhas na primeira aba:', data.length);\n    if (data.length > 0) {\n        console.log('Colunas:', Object.keys(data[0]));\n        console.log('Primeira linha:', JSON.stringify(data[0], null, 2));\n    }\n    \n    // Salvar resultado em arquivo\n    const result = {\n        sheets: workbook.SheetNames,\n        firstSheetData: data.slice(0, 5), // Primeiras 5 linhas\n        totalRows: data.length\n    };\n    \n    fs.writeFileSync('/Users/insitutoareluna/Documents/finance/backend/excel_test_result.json', JSON.stringify(result, null, 2));\n    console.log('Resultado salvo em excel_test_result.json');\n    \n} catch (error) {\n    console.error('Erro:', error.message);\n    fs.writeFileSync('/Users/insitutoareluna/Documents/finance/backend/excel_test_error.txt', error.stack);\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAME,IAAI;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,EAAE;AAAA;AAAA,CAAAL,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,IAAI,CAAC;AAAC;AAAAJ,cAAA,GAAAG,CAAA;AAEzBG,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;AAAC;AAAAP,cAAA,GAAAG,CAAA;AAElC,IAAI;EACA,MAAMK,QAAQ;EAAA;EAAA,CAAAR,cAAA,GAAAG,CAAA,OAAG,iGAAiG;EAAC;EAAAH,cAAA,GAAAG,CAAA;EACnHG,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,QAAQ,CAAC;EAEvC,MAAMC,QAAQ;EAAA;EAAA,CAAAT,cAAA,GAAAG,CAAA,OAAGD,IAAI,CAACQ,QAAQ,CAACF,QAAQ,CAAC;EAAC;EAAAR,cAAA,GAAAG,CAAA;EACzCG,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEE,QAAQ,CAACE,UAAU,CAAC;EAEzC,MAAMC,UAAU;EAAA;EAAA,CAAAZ,cAAA,GAAAG,CAAA,OAAGM,QAAQ,CAACI,MAAM,CAACJ,QAAQ,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAMG,IAAI;EAAA;EAAA,CAAAd,cAAA,GAAAG,CAAA,OAAGD,IAAI,CAACa,KAAK,CAACC,aAAa,CAACJ,UAAU,CAAC;EAAC;EAAAZ,cAAA,GAAAG,CAAA;EAElDG,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEO,IAAI,CAACG,MAAM,CAAC;EAAC;EAAAjB,cAAA,GAAAG,CAAA;EACpD,IAAIW,IAAI,CAACG,MAAM,GAAG,CAAC,EAAE;IAAA;IAAAjB,cAAA,GAAAkB,CAAA;IAAAlB,cAAA,GAAAG,CAAA;IACjBG,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEY,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAAC;IAAAd,cAAA,GAAAG,CAAA;IAC9CG,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEc,IAAI,CAACC,SAAS,CAACR,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EACpE,CAAC;EAAA;EAAA;IAAAd,cAAA,GAAAkB,CAAA;EAAA;;EAED;EACA,MAAMK,MAAM;EAAA;EAAA,CAAAvB,cAAA,GAAAG,CAAA,QAAG;IACXqB,MAAM,EAAEf,QAAQ,CAACE,UAAU;IAC3Bc,cAAc,EAAEX,IAAI,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAAE;IAClCC,SAAS,EAAEb,IAAI,CAACG;EACpB,CAAC;EAAC;EAAAjB,cAAA,GAAAG,CAAA;EAEFE,EAAE,CAACuB,aAAa,CAAC,yEAAyE,EAAEP,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EAAC;EAAAvB,cAAA,GAAAG,CAAA;EAC7HG,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;AAE5D,CAAC,CAAC,OAAOsB,KAAK,EAAE;EAAA;EAAA7B,cAAA,GAAAG,CAAA;EACZG,OAAO,CAACuB,KAAK,CAAC,OAAO,EAAEA,KAAK,CAACC,OAAO,CAAC;EAAC;EAAA9B,cAAA,GAAAG,CAAA;EACtCE,EAAE,CAACuB,aAAa,CAAC,uEAAuE,EAAEC,KAAK,CAACE,KAAK,CAAC;AAC1G","ignoreList":[]}