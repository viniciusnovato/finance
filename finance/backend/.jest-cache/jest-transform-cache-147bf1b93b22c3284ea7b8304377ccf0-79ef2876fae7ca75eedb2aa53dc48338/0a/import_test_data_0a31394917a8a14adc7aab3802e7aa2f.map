{"version":3,"names":["cov_1ef7uzlsbw","actualCoverage","createClient","s","require","fs","csv","path","config","supabaseUrl","process","env","SUPABASE_URL","supabaseKey","SUPABASE_ANON_KEY","b","console","error","exit","supabase","cleanData","importTestCSV","filePath","tableName","f","Promise","resolve","reject","results","errors","imported","log","createReadStream","pipe","on","data","cleanedData","Object","keys","length","push","from","insert","select","message","err","mainTest","limit","testDir","join","__dirname","totalImported","totalErrors","testFiles","file","table","existsSync","result","main","module","exports"],"sources":["import_test_data.js"],"sourcesContent":["const { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst path = require('path');\nrequire('dotenv').config();\n\n// Configura√ß√£o do Supabase\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseKey) {\n  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_ANON_KEY s√£o obrigat√≥rias');\n  process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// Importar fun√ß√µes do script principal\nconst { cleanData } = require('./import_csv_data');\n\n// Fun√ß√£o para importar dados de um arquivo CSV (vers√£o para teste)\nasync function importTestCSV(filePath, tableName) {\n  return new Promise((resolve, reject) => {\n    const results = [];\n    const errors = [];\n    let imported = 0;\n    \n    console.log(`üìÇ Lendo arquivo de teste: ${filePath}`);\n    \n    fs.createReadStream(filePath)\n      .pipe(csv())\n      .on('data', (data) => {\n        const cleanedData = cleanData(data, tableName);\n        if (Object.keys(cleanedData).length > 0) {\n          results.push(cleanedData);\n        }\n      })\n      .on('end', async () => {\n        console.log(`üìä ${results.length} registros lidos do CSV de teste`);\n        \n        if (results.length === 0) {\n          console.log('‚ö†Ô∏è  Nenhum registro v√°lido encontrado');\n          resolve({ imported: 0, errors: 0 });\n          return;\n        }\n        \n        try {\n          const { data, error } = await supabase\n            .from(tableName)\n            .insert(results)\n            .select();\n          \n          if (error) {\n            console.log(`‚ùå Erro na importa√ß√£o: ${error.message}`);\n            errors.push({ error: error.message });\n          } else {\n            imported = data ? data.length : results.length;\n            console.log(`‚úÖ ${imported} registros de teste importados com sucesso`);\n          }\n        } catch (err) {\n          console.log(`‚ùå Erro na importa√ß√£o: ${err.message}`);\n          errors.push({ error: err.message });\n        }\n        \n        resolve({ imported, errors: errors.length });\n      })\n      .on('error', (error) => {\n        console.error(`‚ùå Erro ao ler arquivo ${filePath}:`, error);\n        reject(error);\n      });\n  });\n}\n\n// Fun√ß√£o principal para teste\nasync function mainTest() {\n  try {\n    console.log('üß™ Iniciando importa√ß√£o de DADOS DE TESTE...');\n    \n    // Testar conex√£o\n    console.log('üîó Testando conex√£o com Supabase...');\n    const { data, error } = await supabase.from('clients').select('count').limit(1);\n    if (error) {\n      console.error('‚ùå Erro de conex√£o:', error.message);\n      process.exit(1);\n    }\n    console.log('‚úÖ Conex√£o estabelecida com sucesso!');\n    \n    const testDir = path.join(__dirname, '../../../importBD/test');\n    let totalImported = 0;\n    let totalErrors = 0;\n    \n    // Arquivos CSV de teste para importar (ordem importante devido √†s depend√™ncias)\n    const testFiles = [\n      { file: 'test_clients.csv', table: 'clients' },\n      { file: 'test_contracts.csv', table: 'contracts' }\n      // payments ser√° importado apenas na vers√£o completa\n    ];\n    \n    for (const { file, table } of testFiles) {\n      const filePath = path.join(testDir, file);\n      \n      if (fs.existsSync(filePath)) {\n        console.log(`\\nüìã Importando ${table} (TESTE)...`);\n        const result = await importTestCSV(filePath, table);\n        console.log(`üìä ${table}: ${result.imported} importados, ${result.errors} erros`);\n        \n        totalImported += result.imported;\n        totalErrors += result.errors;\n      } else {\n        console.log(`‚ö†Ô∏è  Arquivo de teste n√£o encontrado: ${filePath}`);\n      }\n    }\n    \n    console.log('\\nüéâ IMPORTA√á√ÉO DE TESTE CONCLU√çDA!');\n    console.log('==================================================');\n    console.log(`üìä Total de registros de teste importados: ${totalImported}`);\n    console.log(`‚ùå Total de erros: ${totalErrors}`);\n    console.log('==================================================');\n    \n    if (totalErrors > 0) {\n      console.log('‚ö†Ô∏è  Alguns erros ocorreram durante a importa√ß√£o de teste.');\n      console.log('   Verifique os logs acima para mais detalhes.');\n    } else {\n      console.log('‚úÖ Teste bem-sucedido! Agora voc√™ pode executar a importa√ß√£o completa.');\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Erro fatal:', error);\n    process.exit(1);\n  }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n  mainTest();\n}\n\nmodule.exports = { importTestCSV, mainTest };"],"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","ignoreList":[]}