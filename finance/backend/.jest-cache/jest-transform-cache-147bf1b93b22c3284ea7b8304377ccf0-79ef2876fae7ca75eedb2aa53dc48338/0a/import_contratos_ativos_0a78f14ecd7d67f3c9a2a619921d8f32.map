{"version":3,"names":["cov_yoc7hwrti","actualCoverage","createClient","s","require","fs","csv","path","config","supabaseUrl","process","env","SUPABASE_URL","supabaseKey","SUPABASE_ANON_KEY","b","console","error","exit","supabase","parseEuroValue","value","f","cleanValue","String","replace","parsed","parseFloat","isNaN","parseDate","dateStr","match","parts","split","length","day","month","year","padStart","mapContractData","row","clientName","trim","contractNumber","startDate","endDate","totalValue","entryValue","installmentValue","installmentCount","parseInt","client_name","contract_number","start_date","end_date","total_value","entry_value","installment_value","installment_count","area","location","method","status","importContratosAtivos","filePath","limit","log","contracts","processedCount","Promise","resolve","reject","createReadStream","pipe","on","contractData","push","message","successCount","errorCount","contract","nameParts","firstName","lastName","slice","join","data","existingClient","from","select","eq","single","clientId","newClient","clientError","insert","first_name","last_name","email","toLowerCase","phone","country","notes","id","client_id","product_description","total_amount","down_payment","financed_amount","installments","installment_amount","first_due_date","payment_method","JSON","stringify","contractError","success","errors","main","csvPath","__dirname","existsSync","module","exports"],"sources":["import_contratos_ativos.js"],"sourcesContent":["const { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst path = require('path');\nrequire('dotenv').config();\n\n// Configura√ß√£o do Supabase\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseKey) {\n  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_ANON_KEY s√£o obrigat√≥rias');\n  process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// Fun√ß√£o para converter valor monet√°rio europeu para n√∫mero\nfunction parseEuroValue(value) {\n  if (!value || value === '' || value === '#NAME?') return 0;\n  // Remove espa√ßos, ‚Ç¨, e converte v√≠rgula para ponto\n  const cleanValue = String(value)\n    .replace(/[‚Ç¨\\s]/g, '')\n    .replace(/\\./g, '') // Remove pontos de milhares\n    .replace(',', '.'); // Converte v√≠rgula decimal para ponto\n  \n  const parsed = parseFloat(cleanValue);\n  return isNaN(parsed) ? 0 : parsed;\n}\n\n// Fun√ß√£o para converter data no formato DD-MM-YYYY\nfunction parseDate(dateStr) {\n  if (!dateStr || dateStr === '') return null;\n  \n  // Se j√° est√° no formato YYYY-MM-DD, retorna como est√°\n  if (dateStr.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n    return dateStr;\n  }\n  \n  // Se est√° no formato DD/MM/YYYY ou similar\n  const parts = dateStr.split(/[-\\/]/);\n  if (parts.length === 3) {\n    const [day, month, year] = parts;\n    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n  }\n  \n  return null;\n}\n\n// Fun√ß√£o para mapear dados do CSV para o formato do banco\nfunction mapContractData(row) {\n  const clientName = row['Nome']?.trim();\n  const contractNumber = row['N']?.trim();\n  const startDate = parseDate(row['In√≠cio']);\n  const endDate = parseDate(row['Fim']);\n  const totalValue = parseEuroValue(row['Total']);\n  const entryValue = parseEuroValue(row[' Entrada ']);\n  const installmentValue = parseEuroValue(row[' Valor de Parcela ']);\n  const installmentCount = parseInt(row['Parc. (x)']) || 0;\n  \n  return {\n    client_name: clientName,\n    contract_number: contractNumber,\n    start_date: startDate,\n    end_date: endDate,\n    total_value: totalValue,\n    entry_value: entryValue,\n    installment_value: installmentValue,\n    installment_count: installmentCount,\n    area: row['√Årea']?.trim() || 'ODONTOLOGIA',\n    location: row['Local']?.trim() || 'INSTITUTO',\n    method: row['M√©todo']?.trim() || 'DD',\n    status: 'active'\n  };\n}\n\n// Fun√ß√£o para importar contratos ativos\nasync function importContratosAtivos(filePath, limit = 5) {\n  console.log(`üöÄ Iniciando importa√ß√£o de contratos ativos (limite: ${limit})...`);\n  \n  const contracts = [];\n  let processedCount = 0;\n  \n  return new Promise((resolve, reject) => {\n    fs.createReadStream(filePath)\n      .pipe(csv())\n      .on('data', (row) => {\n        if (processedCount >= limit) return;\n        \n        try {\n          const contractData = mapContractData(row);\n          \n          // Validar dados essenciais\n          if (contractData.client_name && contractData.contract_number) {\n            contracts.push(contractData);\n            processedCount++;\n            console.log(`üìù Processado: ${contractData.client_name} - Contrato ${contractData.contract_number}`);\n          }\n        } catch (error) {\n          console.error(`‚ùå Erro ao processar linha:`, error.message);\n        }\n      })\n      .on('end', async () => {\n        console.log(`\\nüìä Total de contratos processados: ${contracts.length}`);\n        \n        // Inserir no banco de dados\n        let successCount = 0;\n        let errorCount = 0;\n        \n        for (const contract of contracts) {\n          try {\n            // Primeiro, verificar se o cliente existe (buscar por first_name e last_name)\n            const nameParts = contract.client_name.split(' ');\n            const firstName = nameParts[0] || '';\n            const lastName = nameParts.slice(1).join(' ') || '';\n            \n            let { data: existingClient } = await supabase\n              .from('clients')\n              .select('id')\n              .eq('first_name', firstName)\n              .eq('last_name', lastName)\n              .single();\n            \n            let clientId;\n            \n            if (!existingClient) {\n              // Separar nome em first_name e last_name\n              const nameParts = contract.client_name.split(' ');\n              const firstName = nameParts[0] || '';\n              const lastName = nameParts.slice(1).join(' ') || '';\n              \n              // Criar cliente se n√£o existir\n              const { data: newClient, error: clientError } = await supabase\n                .from('clients')\n                .insert({\n                  first_name: firstName,\n                  last_name: lastName,\n                  email: `${contract.client_name.toLowerCase().replace(/\\s+/g, '.')}@temp.com`,\n                  phone: '000000000',\n                  country: 'Portugal',\n                  status: 'active',\n                  notes: `√Årea: ${contract.area}, Local: ${contract.location}`\n                })\n                .select('id')\n                .single();\n              \n              if (clientError) {\n                console.error(`‚ùå Erro ao criar cliente ${contract.client_name}:`, clientError.message);\n                errorCount++;\n                continue;\n              }\n              \n              clientId = newClient.id;\n              console.log(`‚úÖ Cliente criado: ${contract.client_name}`);\n            } else {\n              clientId = existingClient.id;\n            }\n            \n            // Vamos criar um contrato simplificado sem company_id e branch_id por enquanto\n            // Primeiro, vamos verificar se a tabela contracts aceita inser√ß√£o sem esses campos\n            console.log(`üîÑ Tentando inserir contrato ${contract.contract_number}...`);\n            \n            // Criar dados b√°sicos do contrato\n            const contractData = {\n              client_id: clientId,\n              contract_number: contract.contract_number,\n              product_description: `${contract.area} - ${contract.location}`,\n              total_amount: contract.total_value,\n              down_payment: contract.entry_value || 0,\n              financed_amount: contract.total_value - (contract.entry_value || 0),\n              installments: contract.installment_count,\n              installment_amount: contract.installment_value,\n              start_date: contract.start_date,\n              first_due_date: contract.start_date,\n              status: 'active',\n              payment_method: contract.method === 'DD' ? 'boleto' : 'cartao',\n              notes: `√Årea: ${contract.area}, Local: ${contract.location}, M√©todo: ${contract.method}`\n            };\n            \n            console.log('üìã Dados do contrato:', JSON.stringify(contractData, null, 2));\n            \n            // Inserir contrato\n            const { error: contractError } = await supabase\n              .from('contracts')\n              .insert(contractData);\n            \n            if (contractError) {\n              console.error(`‚ùå Erro ao inserir contrato ${contract.contract_number}:`, contractError.message);\n              errorCount++;\n            } else {\n              console.log(`‚úÖ Contrato inserido: ${contract.contract_number}`);\n              successCount++;\n            }\n            \n          } catch (error) {\n            console.error(`‚ùå Erro geral no contrato ${contract.contract_number}:`, error.message);\n            errorCount++;\n          }\n        }\n        \n        console.log(`\\nüéâ IMPORTA√á√ÉO CONCLU√çDA!`);\n        console.log(`==================================================`);\n        console.log(`‚úÖ Contratos importados com sucesso: ${successCount}`);\n        console.log(`‚ùå Erros: ${errorCount}`);\n        console.log(`==================================================`);\n        \n        resolve({ success: successCount, errors: errorCount });\n      })\n      .on('error', (error) => {\n        console.error('‚ùå Erro ao ler arquivo CSV:', error);\n        reject(error);\n      });\n  });\n}\n\n// Fun√ß√£o principal\nasync function main() {\n  const csvPath = path.join(__dirname, '../../..', 'importBD', 'contratosAtivosFinal - Contratos Ativos.csv');\n  \n  if (!fs.existsSync(csvPath)) {\n    console.error('‚ùå Arquivo CSV n√£o encontrado:', csvPath);\n    process.exit(1);\n  }\n  \n  try {\n    // Come√ßar com apenas 3 registros para teste\n    await importContratosAtivos(csvPath, 3);\n  } catch (error) {\n    console.error('‚ùå Erro na importa√ß√£o:', error);\n    process.exit(1);\n  }\n}\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = { importContratosAtivos, mapContractData };"],"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","ignoreList":[]}