{"version":3,"names":["cov_3xyd9bwyr","actualCoverage","createClient","s","require","fs","path","config","supabaseUrl","process","env","SUPABASE_URL","supabaseServiceKey","SUPABASE_SERVICE_ROLE_KEY","b","console","error","exit","supabase","auth","autoRefreshToken","persistSession","runMigration","f","log","migrationPath","join","__dirname","migrationSQL","readFileSync","commands","split","map","cmd","trim","filter","length","startsWith","i","command","rpc","sql","directError","from","select","limit","message","includes","warn","cmdError","tables","table","data","runMigrationDirect","main","module","method","argv","exports"],"sources":["migrate.js"],"sourcesContent":["const { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst path = require('path');\nrequire('dotenv').config();\n\n// Configuração do Supabase Admin\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl || !supabaseServiceKey) {\n  console.error('❌ Variáveis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY são obrigatórias');\n  process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseServiceKey, {\n  auth: {\n    autoRefreshToken: false,\n    persistSession: false\n  }\n});\n\nasync function runMigration() {\n  try {\n    console.log('🚀 Iniciando migração do banco de dados...');\n    \n    // Ler o arquivo de migração\n    const migrationPath = path.join(__dirname, '../migrations/init.sql');\n    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');\n    \n    console.log('📄 Arquivo de migração carregado');\n    \n    // Dividir o SQL em comandos individuais\n    const commands = migrationSQL\n      .split(';')\n      .map(cmd => cmd.trim())\n      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));\n    \n    console.log(`📊 Executando ${commands.length} comandos SQL...`);\n    \n    // Executar cada comando\n    for (let i = 0; i < commands.length; i++) {\n      const command = commands[i];\n      \n      if (command.trim()) {\n        try {\n          const { error } = await supabase.rpc('exec_sql', {\n            sql: command + ';'\n          });\n          \n          if (error) {\n            // Tentar executar diretamente se RPC falhar\n            const { error: directError } = await supabase\n              .from('_temp')\n              .select('*')\n              .limit(0);\n            \n            if (directError && !directError.message.includes('does not exist')) {\n              console.warn(`⚠️  Aviso no comando ${i + 1}: ${error.message}`);\n            }\n          }\n          \n          if ((i + 1) % 10 === 0) {\n            console.log(`✅ Executados ${i + 1}/${commands.length} comandos`);\n          }\n        } catch (cmdError) {\n          console.warn(`⚠️  Erro no comando ${i + 1}: ${cmdError.message}`);\n        }\n      }\n    }\n    \n    console.log('✅ Migração concluída com sucesso!');\n    \n    // Verificar se as tabelas foram criadas\n    console.log('🔍 Verificando estrutura do banco...');\n    \n    const tables = [\n      'companies', 'branches', 'users', 'clients', \n      'contracts', 'payments', 'contract_documents', \n      'predefined_notes', 'audit_logs'\n    ];\n    \n    for (const table of tables) {\n      const { data, error } = await supabase\n        .from(table)\n        .select('*')\n        .limit(1);\n      \n      if (error) {\n        console.log(`❌ Tabela '${table}' não encontrada ou com erro: ${error.message}`);\n      } else {\n        console.log(`✅ Tabela '${table}' criada com sucesso`);\n      }\n    }\n    \n    console.log('🎉 Banco de dados configurado e pronto para uso!');\n    \n  } catch (error) {\n    console.error('❌ Erro durante a migração:', error.message);\n    process.exit(1);\n  }\n}\n\n// Função alternativa usando SQL direto\nasync function runMigrationDirect() {\n  try {\n    console.log('🚀 Executando migração direta...');\n    \n    const migrationPath = path.join(__dirname, '../migrations/init.sql');\n    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');\n    \n    // Executar SQL completo\n    const { error } = await supabase.rpc('exec_sql', {\n      sql: migrationSQL\n    });\n    \n    if (error) {\n      console.error('❌ Erro na migração:', error.message);\n      \n      // Tentar executar por partes\n      console.log('🔄 Tentando executar por partes...');\n      await runMigration();\n    } else {\n      console.log('✅ Migração executada com sucesso!');\n    }\n    \n  } catch (error) {\n    console.error('❌ Erro:', error.message);\n    console.log('🔄 Tentando método alternativo...');\n    await runMigration();\n  }\n}\n\n// Executar migração\nif (require.main === module) {\n  const method = process.argv[2] || 'direct';\n  \n  if (method === 'direct') {\n    runMigrationDirect();\n  } else {\n    runMigration();\n  }\n}\n\nmodule.exports = { runMigration, runMigrationDirect };"],"mappingseY;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAfZ,MAAM;EAAEE;AAAa,CAAC;AAAA;AAAA,CAAAF,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,uBAAuB,CAAC;AACzD,MAAMC,EAAE;AAAA;AAAA,CAAAL,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAME,IAAI;AAAA;AAAA,CAAAN,aAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,MAAM,CAAC;AAAC;AAAAJ,aAAA,GAAAG,CAAA;AAC7BC,OAAO,CAAC,QAAQ,CAAC,CAACG,MAAM,CAAC,CAAC;;AAE1B;AACA,MAAMC,WAAW;AAAA;AAAA,CAAAR,aAAA,GAAAG,CAAA,OAAGM,OAAO,CAACC,GAAG,CAACC,YAAY;AAC5C,MAAMC,kBAAkB;AAAA;AAAA,CAAAZ,aAAA,GAAAG,CAAA,OAAGM,OAAO,CAACC,GAAG,CAACG,yBAAyB;AAAC;AAAAb,aAAA,GAAAG,CAAA;AAEjE;AAAI;AAAA,CAAAH,aAAA,GAAAc,CAAA,WAACN,WAAW;AAAA;AAAA,CAAAR,aAAA,GAAAc,CAAA,UAAI,CAACF,kBAAkB,GAAE;EAAA;EAAAZ,aAAA,GAAAc,CAAA;EAAAd,aAAA,GAAAG,CAAA;EACvCY,OAAO,CAACC,KAAK,CAAC,mFAAmF,CAAC;EAAC;EAAAhB,aAAA,GAAAG,CAAA;EACnGM,OAAO,CAACQ,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC;AAAA;AAAA;EAAAjB,aAAA,GAAAc,CAAA;AAAA;AAED,MAAMI,QAAQ;AAAA;AAAA,CAAAlB,aAAA,GAAAG,CAAA,OAAGD,YAAY,CAACM,WAAW,EAAEI,kBAAkB,EAAE;EAC7DO,IAAI,EAAE;IACJC,gBAAgB,EAAE,KAAK;IACvBC,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAeC,YAAYA,CAAA,EAAG;EAAA;EAAAtB,aAAA,GAAAuB,CAAA;EAAAvB,aAAA,GAAAG,CAAA;EAC5B,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFY,OAAO,CAACS,GAAG,CAAC,4CAA4C,CAAC;;IAEzD;IACA,MAAMC,aAAa;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,QAAGG,IAAI,CAACoB,IAAI,CAACC,SAAS,EAAE,wBAAwB,CAAC;IACpE,MAAMC,YAAY;IAAA;IAAA,CAAA5B,aAAA,GAAAG,CAAA,QAAGE,EAAE,CAACwB,YAAY,CAACJ,aAAa,EAAE,MAAM,CAAC;IAAC;IAAAzB,aAAA,GAAAG,CAAA;IAE5DY,OAAO,CAACS,GAAG,CAAC,kCAAkC,CAAC;;IAE/C;IACA,MAAMM,QAAQ;IAAA;IAAA,CAAA9B,aAAA,GAAAG,CAAA,QAAGyB,YAAY,CAC1BG,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAACC,GAAG,IAAI;MAAA;MAAAjC,aAAA,GAAAuB,CAAA;MAAAvB,aAAA,GAAAG,CAAA;MAAA,OAAA8B,GAAG,CAACC,IAAI,CAAC,CAAC;IAAD,CAAC,CAAC,CACtBC,MAAM,CAACF,GAAG,IAAI;MAAA;MAAAjC,aAAA,GAAAuB,CAAA;MAAAvB,aAAA,GAAAG,CAAA;MAAA,kCAAAH,aAAA,GAAAc,CAAA,UAAAmB,GAAG,CAACG,MAAM,GAAG,CAAC;MAAA;MAAA,CAAApC,aAAA,GAAAc,CAAA,UAAI,CAACmB,GAAG,CAACI,UAAU,CAAC,IAAI,CAAC;IAAD,CAAC,CAAC;IAAC;IAAArC,aAAA,GAAAG,CAAA;IAE1DY,OAAO,CAACS,GAAG,CAAC,iBAAiBM,QAAQ,CAACM,MAAM,kBAAkB,CAAC;;IAE/D;IAAA;IAAApC,aAAA,GAAAG,CAAA;IACA,KAAK,IAAImC,CAAC;IAAA;IAAA,CAAAtC,aAAA,GAAAG,CAAA,QAAG,CAAC,GAAEmC,CAAC,GAAGR,QAAQ,CAACM,MAAM,EAAEE,CAAC,EAAE,EAAE;MACxC,MAAMC,OAAO;MAAA;MAAA,CAAAvC,aAAA,GAAAG,CAAA,QAAG2B,QAAQ,CAACQ,CAAC,CAAC;MAAC;MAAAtC,aAAA,GAAAG,CAAA;MAE5B,IAAIoC,OAAO,CAACL,IAAI,CAAC,CAAC,EAAE;QAAA;QAAAlC,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QAClB,IAAI;UACF,MAAM;YAAEa;UAAM,CAAC;UAAA;UAAA,CAAAhB,aAAA,GAAAG,CAAA,QAAG,MAAMe,QAAQ,CAACsB,GAAG,CAAC,UAAU,EAAE;YAC/CC,GAAG,EAAEF,OAAO,GAAG;UACjB,CAAC,CAAC;UAAC;UAAAvC,aAAA,GAAAG,CAAA;UAEH,IAAIa,KAAK,EAAE;YAAA;YAAAhB,aAAA,GAAAc,CAAA;YACT;YACA,MAAM;cAAEE,KAAK,EAAE0B;YAAY,CAAC;YAAA;YAAA,CAAA1C,aAAA,GAAAG,CAAA,QAAG,MAAMe,QAAQ,CAC1CyB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,CAAC,CAAC;YAAC;YAAA7C,aAAA,GAAAG,CAAA;YAEZ;YAAI;YAAA,CAAAH,aAAA,GAAAc,CAAA,UAAA4B,WAAW;YAAA;YAAA,CAAA1C,aAAA,GAAAc,CAAA,UAAI,CAAC4B,WAAW,CAACI,OAAO,CAACC,QAAQ,CAAC,gBAAgB,CAAC,GAAE;cAAA;cAAA/C,aAAA,GAAAc,CAAA;cAAAd,aAAA,GAAAG,CAAA;cAClEY,OAAO,CAACiC,IAAI,CAAC,wBAAwBV,CAAC,GAAG,CAAC,KAAKtB,KAAK,CAAC8B,OAAO,EAAE,CAAC;YACjE,CAAC;YAAA;YAAA;cAAA9C,aAAA,GAAAc,CAAA;YAAA;UACH,CAAC;UAAA;UAAA;YAAAd,aAAA,GAAAc,CAAA;UAAA;UAAAd,aAAA,GAAAG,CAAA;UAED,IAAI,CAACmC,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;YAAA;YAAAtC,aAAA,GAAAc,CAAA;YAAAd,aAAA,GAAAG,CAAA;YACtBY,OAAO,CAACS,GAAG,CAAC,gBAAgBc,CAAC,GAAG,CAAC,IAAIR,QAAQ,CAACM,MAAM,WAAW,CAAC;UAClE,CAAC;UAAA;UAAA;YAAApC,aAAA,GAAAc,CAAA;UAAA;QACH,CAAC,CAAC,OAAOmC,QAAQ,EAAE;UAAA;UAAAjD,aAAA,GAAAG,CAAA;UACjBY,OAAO,CAACiC,IAAI,CAAC,uBAAuBV,CAAC,GAAG,CAAC,KAAKW,QAAQ,CAACH,OAAO,EAAE,CAAC;QACnE;MACF,CAAC;MAAA;MAAA;QAAA9C,aAAA,GAAAc,CAAA;MAAA;IACH;IAAC;IAAAd,aAAA,GAAAG,CAAA;IAEDY,OAAO,CAACS,GAAG,CAAC,mCAAmC,CAAC;;IAEhD;IAAA;IAAAxB,aAAA,GAAAG,CAAA;IACAY,OAAO,CAACS,GAAG,CAAC,sCAAsC,CAAC;IAEnD,MAAM0B,MAAM;IAAA;IAAA,CAAAlD,aAAA,GAAAG,CAAA,QAAG,CACb,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAC3C,WAAW,EAAE,UAAU,EAAE,oBAAoB,EAC7C,kBAAkB,EAAE,YAAY,CACjC;IAAC;IAAAH,aAAA,GAAAG,CAAA;IAEF,KAAK,MAAMgD,KAAK,IAAID,MAAM,EAAE;MAC1B,MAAM;QAAEE,IAAI;QAAEpC;MAAM,CAAC;MAAA;MAAA,CAAAhB,aAAA,GAAAG,CAAA,QAAG,MAAMe,QAAQ,CACnCyB,IAAI,CAACQ,KAAK,CAAC,CACXP,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,CAAC,CAAC;MAAC;MAAA7C,aAAA,GAAAG,CAAA;MAEZ,IAAIa,KAAK,EAAE;QAAA;QAAAhB,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QACTY,OAAO,CAACS,GAAG,CAAC,aAAa2B,KAAK,iCAAiCnC,KAAK,CAAC8B,OAAO,EAAE,CAAC;MACjF,CAAC,MAAM;QAAA;QAAA9C,aAAA,GAAAc,CAAA;QAAAd,aAAA,GAAAG,CAAA;QACLY,OAAO,CAACS,GAAG,CAAC,aAAa2B,KAAK,sBAAsB,CAAC;MACvD;IACF;IAAC;IAAAnD,aAAA,GAAAG,CAAA;IAEDY,OAAO,CAACS,GAAG,CAAC,kDAAkD,CAAC;EAEjE,CAAC,CAAC,OAAOR,KAAK,EAAE;IAAA;IAAAhB,aAAA,GAAAG,CAAA;IACdY,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC8B,OAAO,CAAC;IAAC;IAAA9C,aAAA,GAAAG,CAAA;IAC3DM,OAAO,CAACQ,IAAI,CAAC,CAAC,CAAC;EACjB;AACF;;AAEA;AACA,eAAeoC,kBAAkBA,CAAA,EAAG;EAAA;EAAArD,aAAA,GAAAuB,CAAA;EAAAvB,aAAA,GAAAG,CAAA;EAClC,IAAI;IAAA;IAAAH,aAAA,GAAAG,CAAA;IACFY,OAAO,CAACS,GAAG,CAAC,kCAAkC,CAAC;IAE/C,MAAMC,aAAa;IAAA;IAAA,CAAAzB,aAAA,GAAAG,CAAA,QAAGG,IAAI,CAACoB,IAAI,CAACC,SAAS,EAAE,wBAAwB,CAAC;IACpE,MAAMC,YAAY;IAAA;IAAA,CAAA5B,aAAA,GAAAG,CAAA,QAAGE,EAAE,CAACwB,YAAY,CAACJ,aAAa,EAAE,MAAM,CAAC;;IAE3D;IACA,MAAM;MAAET;IAAM,CAAC;IAAA;IAAA,CAAAhB,aAAA,GAAAG,CAAA,QAAG,MAAMe,QAAQ,CAACsB,GAAG,CAAC,UAAU,EAAE;MAC/CC,GAAG,EAAEb;IACP,CAAC,CAAC;IAAC;IAAA5B,aAAA,GAAAG,CAAA;IAEH,IAAIa,KAAK,EAAE;MAAA;MAAAhB,aAAA,GAAAc,CAAA;MAAAd,aAAA,GAAAG,CAAA;MACTY,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC8B,OAAO,CAAC;;MAEnD;MAAA;MAAA9C,aAAA,GAAAG,CAAA;MACAY,OAAO,CAACS,GAAG,CAAC,oCAAoC,CAAC;MAAC;MAAAxB,aAAA,GAAAG,CAAA;MAClD,MAAMmB,YAAY,CAAC,CAAC;IACtB,CAAC,MAAM;MAAA;MAAAtB,aAAA,GAAAc,CAAA;MAAAd,aAAA,GAAAG,CAAA;MACLY,OAAO,CAACS,GAAG,CAAC,mCAAmC,CAAC;IAClD;EAEF,CAAC,CAAC,OAAOR,KAAK,EAAE;IAAA;IAAAhB,aAAA,GAAAG,CAAA;IACdY,OAAO,CAACC,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC8B,OAAO,CAAC;IAAC;IAAA9C,aAAA,GAAAG,CAAA;IACxCY,OAAO,CAACS,GAAG,CAAC,mCAAmC,CAAC;IAAC;IAAAxB,aAAA,GAAAG,CAAA;IACjD,MAAMmB,YAAY,CAAC,CAAC;EACtB;AACF;;AAEA;AAAA;AAAAtB,aAAA,GAAAG,CAAA;AACA,IAAIC,OAAO,CAACkD,IAAI,KAAKC,MAAM,EAAE;EAAA;EAAAvD,aAAA,GAAAc,CAAA;EAC3B,MAAM0C,MAAM;EAAA;EAAA,CAAAxD,aAAA,GAAAG,CAAA;EAAG;EAAA,CAAAH,aAAA,GAAAc,CAAA,WAAAL,OAAO,CAACgD,IAAI,CAAC,CAAC,CAAC;EAAA;EAAA,CAAAzD,aAAA,GAAAc,CAAA,WAAI,QAAQ;EAAC;EAAAd,aAAA,GAAAG,CAAA;EAE3C,IAAIqD,MAAM,KAAK,QAAQ,EAAE;IAAA;IAAAxD,aAAA,GAAAc,CAAA;IAAAd,aAAA,GAAAG,CAAA;IACvBkD,kBAAkB,CAAC,CAAC;EACtB,CAAC,MAAM;IAAA;IAAArD,aAAA,GAAAc,CAAA;IAAAd,aAAA,GAAAG,CAAA;IACLmB,YAAY,CAAC,CAAC;EAChB;AACF,CAAC;AAAA;AAAA;EAAAtB,aAAA,GAAAc,CAAA;AAAA;AAAAd,aAAA,GAAAG,CAAA;AAEDoD,MAAM,CAACG,OAAO,GAAG;EAAEpC,YAAY;EAAE+B;AAAmB,CAAC","ignoreList":[]}