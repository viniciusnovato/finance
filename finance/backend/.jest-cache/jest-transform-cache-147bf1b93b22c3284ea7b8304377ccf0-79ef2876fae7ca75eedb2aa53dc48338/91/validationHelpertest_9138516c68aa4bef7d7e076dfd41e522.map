{"version":3,"names":["ValidationHelper","require","describe","test","validEmails","forEach","email","expect","isValidEmail","toBe","invalidEmails","undefined","validPhones","phone","isValidPhone","invalidPhones","validCPFs","cpf","isValidCPF","invalidCPFs","validCNPJs","cnpj","isValidCNPJ","invalidCNPJs","validDates","date","isValidDate","invalidDates","validValues","value","isValidMonetaryValue","invalidValues","NaN","Infinity","validStrings","repeat","str","isValidString","invalidStrings","validUUIDs","uuid","isValidUUID","invalidUUIDs","sanitizeString","normalizePhone","normalizeTaxId","data","name","requiredFields","errors","validateRequiredFields","toEqual","toHaveLength","toContainEqual","field","message"],"sources":["validationHelper.test.js"],"sourcesContent":["/**\n * Testes unitários para ValidationHelper\n * Testa todas as validações e sanitizações implementadas\n */\n\nconst { ValidationHelper } = require('../../utils/validationHelper');\n\ndescribe('ValidationHelper', () => {\n  describe('isValidEmail', () => {\n    test('should return true for valid emails', () => {\n      const validEmails = [\n        'test@example.com',\n        'user.name@domain.co.uk',\n        'user+tag@example.org',\n        'user123@test-domain.com'\n      ];\n\n      validEmails.forEach(email => {\n        expect(ValidationHelper.isValidEmail(email)).toBe(true);\n      });\n    });\n\n    test('should return false for invalid emails', () => {\n      const invalidEmails = [\n        'invalid-email',\n        '@domain.com',\n        'user@',\n        'user..name@domain.com',\n        'user@domain',\n        '',\n        null,\n        undefined\n      ];\n\n      invalidEmails.forEach(email => {\n        expect(ValidationHelper.isValidEmail(email)).toBe(false);\n      });\n    });\n  });\n\n  describe('isValidPhone', () => {\n    test('should return true for valid Brazilian phone numbers', () => {\n      const validPhones = [\n        '11999999999',\n        '(11) 99999-9999',\n        '+55 11 99999-9999',\n        '11 99999-9999',\n        '1133334444'\n      ];\n\n      validPhones.forEach(phone => {\n        expect(ValidationHelper.isValidPhone(phone)).toBe(true);\n      });\n    });\n\n    test('should return false for invalid phone numbers', () => {\n      const invalidPhones = [\n        '123',\n        '11999999',\n        'abc123456789',\n        '',\n        null,\n        undefined\n      ];\n\n      invalidPhones.forEach(phone => {\n        expect(ValidationHelper.isValidPhone(phone)).toBe(false);\n      });\n    });\n  });\n\n  describe('isValidCPF', () => {\n    test('should return true for valid CPF', () => {\n      const validCPFs = [\n        '11144477735',\n        '111.444.777-35',\n        '12345678909'\n      ];\n\n      validCPFs.forEach(cpf => {\n        expect(ValidationHelper.isValidCPF(cpf)).toBe(true);\n      });\n    });\n\n    test('should return false for invalid CPF', () => {\n      const invalidCPFs = [\n        '11111111111', // Sequência repetida\n        '123.456.789-00', // Dígitos verificadores incorretos\n        '123456789', // Muito curto\n        '12345678901234', // Muito longo\n        'abc.def.ghi-jk', // Não numérico\n        '',\n        null,\n        undefined\n      ];\n\n      invalidCPFs.forEach(cpf => {\n        expect(ValidationHelper.isValidCPF(cpf)).toBe(false);\n      });\n    });\n  });\n\n  describe('isValidCNPJ', () => {\n    test('should return true for valid CNPJ', () => {\n      const validCNPJs = [\n        '11222333000181',\n        '11.222.333/0001-81'\n      ];\n\n      validCNPJs.forEach(cnpj => {\n        expect(ValidationHelper.isValidCNPJ(cnpj)).toBe(true);\n      });\n    });\n\n    test('should return false for invalid CNPJ', () => {\n      const invalidCNPJs = [\n        '11111111111111', // Sequência repetida\n        '11.222.333/0001-00', // Dígitos verificadores incorretos\n        '1122233300018', // Muito curto\n        '112223330001811', // Muito longo\n        'ab.cde.fgh/ijkl-mn', // Não numérico\n        '',\n        null,\n        undefined\n      ];\n\n      invalidCNPJs.forEach(cnpj => {\n        expect(ValidationHelper.isValidCNPJ(cnpj)).toBe(false);\n      });\n    });\n  });\n\n  describe('isValidDate', () => {\n    test('should return true for valid dates', () => {\n      const validDates = [\n        '2023-12-25',\n        '1990-01-01',\n        '2000-02-29' // Ano bissexto\n      ];\n\n      validDates.forEach(date => {\n        expect(ValidationHelper.isValidDate(date)).toBe(true);\n      });\n    });\n\n    test('should return false for invalid dates', () => {\n      const invalidDates = [\n        '2023-13-01', // Mês inválido\n        '2023-02-30', // Dia inválido\n        '2021-02-29', // Não é ano bissexto\n        '25/12/2023', // Formato incorreto\n        'invalid-date',\n        '',\n        null,\n        undefined\n      ];\n\n      invalidDates.forEach(date => {\n        expect(ValidationHelper.isValidDate(date)).toBe(false);\n      });\n    });\n  });\n\n  describe('isValidMonetaryValue', () => {\n    test('should return true for valid monetary values', () => {\n      const validValues = [\n        100.50,\n        0,\n        1000000,\n        0.01,\n        999999.99\n      ];\n\n      validValues.forEach(value => {\n        expect(ValidationHelper.isValidMonetaryValue(value)).toBe(true);\n      });\n    });\n\n    test('should return false for invalid monetary values', () => {\n      const invalidValues = [\n        -100, // Negativo\n        'abc', // Não numérico\n        null,\n        undefined,\n        NaN,\n        Infinity\n      ];\n\n      invalidValues.forEach(value => {\n        expect(ValidationHelper.isValidMonetaryValue(value)).toBe(false);\n      });\n    });\n  });\n\n  describe('isValidString', () => {\n    test('should return true for valid strings', () => {\n      const validStrings = [\n        'João Silva',\n        'Test',\n        'A', // Mínimo 1 caractere\n        'A'.repeat(255) // Máximo 255 caracteres\n      ];\n\n      validStrings.forEach(str => {\n        expect(ValidationHelper.isValidString(str)).toBe(true);\n      });\n    });\n\n    test('should return false for invalid strings', () => {\n      const invalidStrings = [\n        '', // Vazio\n        '   ', // Apenas espaços\n        'A'.repeat(256), // Muito longo\n        null,\n        undefined,\n        123 // Não é string\n      ];\n\n      invalidStrings.forEach(str => {\n        expect(ValidationHelper.isValidString(str)).toBe(false);\n      });\n    });\n\n    test('should respect custom min and max length', () => {\n      expect(ValidationHelper.isValidString('AB', 3, 10)).toBe(false); // Muito curto\n      expect(ValidationHelper.isValidString('ABC', 3, 10)).toBe(true); // Válido\n      expect(ValidationHelper.isValidString('A'.repeat(11), 3, 10)).toBe(false); // Muito longo\n    });\n  });\n\n  describe('isValidUUID', () => {\n    test('should return true for valid UUIDs', () => {\n      const validUUIDs = [\n        '123e4567-e89b-12d3-a456-426614174000',\n        'f47ac10b-58cc-4372-a567-0e02b2c3d479',\n        '6ba7b810-9dad-11d1-80b4-00c04fd430c8'\n      ];\n\n      validUUIDs.forEach(uuid => {\n        expect(ValidationHelper.isValidUUID(uuid)).toBe(true);\n      });\n    });\n\n    test('should return false for invalid UUIDs', () => {\n      const invalidUUIDs = [\n        '123e4567-e89b-12d3-a456', // Muito curto\n        '123e4567-e89b-12d3-a456-426614174000-extra', // Muito longo\n        'not-a-uuid',\n        '',\n        null,\n        undefined\n      ];\n\n      invalidUUIDs.forEach(uuid => {\n        expect(ValidationHelper.isValidUUID(uuid)).toBe(false);\n      });\n    });\n  });\n\n  describe('sanitizeString', () => {\n    test('should trim whitespace and normalize', () => {\n      expect(ValidationHelper.sanitizeString('  João Silva  ')).toBe('João Silva');\n      expect(ValidationHelper.sanitizeString('\\tTest\\n')).toBe('Test');\n    });\n\n    test('should handle empty and null values', () => {\n      expect(ValidationHelper.sanitizeString('')).toBe('');\n      expect(ValidationHelper.sanitizeString(null)).toBe('');\n      expect(ValidationHelper.sanitizeString(undefined)).toBe('');\n    });\n\n    test('should convert to string if needed', () => {\n      expect(ValidationHelper.sanitizeString(123)).toBe('123');\n    });\n  });\n\n  describe('normalizePhone', () => {\n    test('should remove all non-numeric characters', () => {\n      expect(ValidationHelper.normalizePhone('(11) 99999-9999')).toBe('11999999999');\n      expect(ValidationHelper.normalizePhone('+55 11 99999-9999')).toBe('5511999999999');\n      expect(ValidationHelper.normalizePhone('11 99999-9999')).toBe('11999999999');\n    });\n\n    test('should handle empty and null values', () => {\n      expect(ValidationHelper.normalizePhone('')).toBe('');\n      expect(ValidationHelper.normalizePhone(null)).toBe('');\n      expect(ValidationHelper.normalizePhone(undefined)).toBe('');\n    });\n  });\n\n  describe('normalizeTaxId', () => {\n    test('should remove all non-numeric characters', () => {\n      expect(ValidationHelper.normalizeTaxId('123.456.789-01')).toBe('12345678901');\n      expect(ValidationHelper.normalizeTaxId('11.222.333/0001-81')).toBe('11222333000181');\n    });\n\n    test('should handle empty and null values', () => {\n      expect(ValidationHelper.normalizeTaxId('')).toBe('');\n      expect(ValidationHelper.normalizeTaxId(null)).toBe('');\n      expect(ValidationHelper.normalizeTaxId(undefined)).toBe('');\n    });\n  });\n\n  describe('validateRequiredFields', () => {\n    test('should return empty array for valid object', () => {\n      const data = {\n        name: 'João Silva',\n        email: 'joao@email.com',\n        phone: '11999999999'\n      };\n      const requiredFields = ['name', 'email', 'phone'];\n      \n      const errors = ValidationHelper.validateRequiredFields(data, requiredFields);\n      expect(errors).toEqual([]);\n    });\n\n    test('should return errors for missing fields', () => {\n      const data = {\n        name: 'João Silva',\n        email: '' // Campo vazio\n        // phone ausente\n      };\n      const requiredFields = ['name', 'email', 'phone'];\n      \n      const errors = ValidationHelper.validateRequiredFields(data, requiredFields);\n      expect(errors).toHaveLength(2);\n      expect(errors).toContainEqual({ field: 'email', message: 'Campo obrigatório' });\n      expect(errors).toContainEqual({ field: 'phone', message: 'Campo obrigatório' });\n    });\n\n    test('should handle null and undefined data', () => {\n      const requiredFields = ['name', 'email'];\n      \n      expect(ValidationHelper.validateRequiredFields(null, requiredFields)).toHaveLength(2);\n      expect(ValidationHelper.validateRequiredFields(undefined, requiredFields)).toHaveLength(2);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}