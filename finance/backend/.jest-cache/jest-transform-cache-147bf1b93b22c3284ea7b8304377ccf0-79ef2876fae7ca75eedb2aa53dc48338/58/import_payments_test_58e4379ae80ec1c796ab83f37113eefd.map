{"version":3,"names":["cov_1u0f6kjzlj","actualCoverage","s","require","config","createClient","fs","path","supabase","process","env","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","parseCSV","csvContent","f","lines","split","filter","line","trim","headers","slice","map","values","current","inQuotes","i","length","char","b","push","obj","forEach","header","index","importPaymentsTest","console","log","csvPath","join","__dirname","readFileSync","payments","testPayments","successCount","errorCount","payment","data","contractExists","from","select","eq","contract_id","single","id","uniqueExternalId","substring","paymentData","amount","parseFloat","due_date","paid_date","status","payment_method","notes","external_id","created_at","Date","toISOString","updated_at","error","insert","message","err","count","head","catch"],"sources":["import_payments_test.js"],"sourcesContent":["require('dotenv').config();\nconst { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst path = require('path');\n\n// Usar service_role key para ter permiss√µes administrativas\nconst supabase = createClient(\n  process.env.SUPABASE_URL, \n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nfunction parseCSV(csvContent) {\n  const lines = csvContent.split('\\n').filter(line => line.trim());\n  const headers = lines[0].split(',');\n  \n  return lines.slice(1).map(line => {\n    const values = [];\n    let current = '';\n    let inQuotes = false;\n    \n    for (let i = 0; i < line.length; i++) {\n      const char = line[i];\n      \n      if (char === '\"') {\n        inQuotes = !inQuotes;\n      } else if (char === ',' && !inQuotes) {\n        values.push(current.trim());\n        current = '';\n      } else {\n        current += char;\n      }\n    }\n    values.push(current.trim());\n    \n    const obj = {};\n    headers.forEach((header, index) => {\n      obj[header.trim()] = values[index] || null;\n    });\n    \n    return obj;\n  });\n}\n\nasync function importPaymentsTest() {\n  console.log('üì• IMPORTA√á√ÉO DE PAGAMENTOS (TESTE - 5 LINHAS)');\n  console.log('==================================================');\n  \n  try {\n    // Ler arquivo CSV\n    const csvPath = path.join(__dirname, '../../../importBD/payments.csv');\n    const csvContent = fs.readFileSync(csvPath, 'utf8');\n    \n    // Parse CSV\n    const payments = parseCSV(csvContent);\n    console.log(`üìä Total de pagamentos no CSV: ${payments.length}`);\n    \n    // Processar apenas os primeiros 5 para teste\n    const testPayments = payments.slice(0, 5);\n    console.log(`üß™ Processando ${testPayments.length} pagamentos para teste`);\n    \n    let successCount = 0;\n    let errorCount = 0;\n    \n    for (const payment of testPayments) {\n      try {\n        // Verificar se o contract_id existe\n        const { data: contractExists } = await supabase\n          .from('contracts')\n          .select('id')\n          .eq('id', payment.contract_id)\n          .single();\n        \n        if (!contractExists) {\n          console.log(`‚ö†Ô∏è  Contrato ${payment.contract_id} n√£o encontrado para pagamento ${payment.id}`);\n          errorCount++;\n          continue;\n        }\n        \n        // Preparar dados do pagamento (criar external_id √∫nico e truncado)\n        const uniqueExternalId = `PAY_${payment.id.substring(0, 8)}`;\n        \n        const paymentData = {\n          id: payment.id,\n          contract_id: payment.contract_id,\n          amount: payment.amount ? parseFloat(payment.amount) : null,\n          due_date: payment.due_date || null,\n          paid_date: payment.paid_date || null,\n          status: payment.status || 'pending',\n          payment_method: (payment.payment_method || '').substring(0, 20),\n          notes: payment.notes || null,\n          external_id: uniqueExternalId.substring(0, 50),\n          created_at: payment.created_at || new Date().toISOString(),\n          updated_at: payment.updated_at || new Date().toISOString()\n        };\n        \n        // Inserir no Supabase\n        const { error } = await supabase\n          .from('payments')\n          .insert(paymentData);\n        \n        if (error) {\n          console.log(`‚ùå Erro ao inserir pagamento ${payment.id}: ${error.message}`);\n          errorCount++;\n        } else {\n          console.log(`‚úÖ Pagamento inserido: ${payment.amount} (Contrato: ${payment.contract_id})`);\n          successCount++;\n        }\n        \n      } catch (err) {\n        console.log(`‚ùå Erro ao processar pagamento: ${err.message}`);\n        errorCount++;\n      }\n    }\n    \n    console.log('\\nüìä RESUMO DA IMPORTA√á√ÉO:');\n    console.log(`‚úÖ Sucessos: ${successCount}`);\n    console.log(`‚ùå Erros: ${errorCount}`);\n    \n    // Verificar total na tabela\n    const { count } = await supabase\n      .from('payments')\n      .select('*', { count: 'exact', head: true });\n    \n    console.log(`üìã Total de pagamentos na tabela: ${count}`);\n    \n  } catch (error) {\n    console.error('‚ùå Erro geral:', error.message);\n  }\n}\n\nimportPaymentsTest().catch(console.error);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}