{"version":3,"names":["cov_1qvk5qwa37","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","createClient","require","fs","config","supabaseUrl","process","env","SUPABASE_URL","supabaseServiceKey","SUPABASE_SERVICE_ROLE_KEY","console","error","log","exit","supabase","executeSQLCommand","sql","description","data","rpc","sql_query","altData","altError","from","select","limit","message","includes","err","checkTablesExist","tables","existingTables","table","count","head","push","createTables","createClientsSQL","createContractsSQL","createPaymentsSQL","success1","success2","success3","createIndexes","indexes","allSuccess","index","success","setupRLS","rlsCommands","command","main","length","insert","first_name","last_name","email","delete","eq","testError","module","catch","exports"],"sources":["setup_supabase_database.js"],"sourcesContent":["#!/usr/bin/env node\n\n/**\n * Script para criar tabelas e pol√≠ticas no Supabase\n * Este script executa o SQL necess√°rio para configurar o banco de dados\n */\n\nconst { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst path = require('path');\nrequire('dotenv').config();\n\n// Configura√ß√£o do Supabase\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // Usar service role para opera√ß√µes administrativas\n\nif (!supabaseUrl || !supabaseServiceKey) {\n    console.error('‚ùå Erro: Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');\n    console.log('\\nüìù Configure o arquivo .env com:');\n    console.log('SUPABASE_URL=sua_url_do_supabase');\n    console.log('SUPABASE_SERVICE_ROLE_KEY=sua_chave_service_role_do_supabase');\n    process.exit(1);\n}\n\n// Inicializar cliente Supabase com service role\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\n\n/**\n * Executa comandos SQL individuais\n */\nasync function executeSQLCommand(sql, description) {\n    try {\n        console.log(`üîÑ Executando: ${description}`);\n        \n        const { data, error } = await supabase.rpc('exec_sql', { sql_query: sql });\n        \n        if (error) {\n            // Tentar m√©todo alternativo se rpc n√£o funcionar\n            const { data: altData, error: altError } = await supabase\n                .from('_temp_table_that_does_not_exist')\n                .select('*')\n                .limit(0);\n            \n            if (altError && altError.message.includes('relation \"_temp_table_that_does_not_exist\" does not exist')) {\n                console.log('‚ö†Ô∏è  M√©todo RPC n√£o dispon√≠vel. Use o SQL Editor do Supabase Dashboard.');\n                return false;\n            }\n            \n            console.error(`‚ùå Erro ao executar: ${description}`);\n            console.error('Detalhes:', error.message);\n            return false;\n        }\n        \n        console.log(`‚úÖ Conclu√≠do: ${description}`);\n        return true;\n        \n    } catch (err) {\n        console.error(`‚ùå Erro cr√≠tico ao executar: ${description}`);\n        console.error('Detalhes:', err.message);\n        return false;\n    }\n}\n\n/**\n * Verifica se as tabelas j√° existem\n */\nasync function checkTablesExist() {\n    try {\n        console.log('üîç Verificando se as tabelas j√° existem...');\n        \n        const tables = ['clients', 'contracts', 'payments'];\n        const existingTables = [];\n        \n        for (const table of tables) {\n            const { data, error } = await supabase\n                .from(table)\n                .select('count', { count: 'exact', head: true });\n            \n            if (!error) {\n                existingTables.push(table);\n                console.log(`‚úÖ Tabela '${table}' j√° existe`);\n            }\n        }\n        \n        return existingTables;\n        \n    } catch (error) {\n        console.log('‚ÑπÔ∏è  N√£o foi poss√≠vel verificar tabelas existentes');\n        return [];\n    }\n}\n\n/**\n * Cria as tabelas usando comandos SQL individuais\n */\nasync function createTables() {\n    console.log('\\nüìã === Criando Tabelas ===');\n    \n    // SQL para criar tabela clients\n    const createClientsSQL = `\n        CREATE TABLE IF NOT EXISTS public.clients (\n            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n            first_name VARCHAR(100) NOT NULL,\n            last_name VARCHAR(100),\n            email VARCHAR(255) UNIQUE,\n            phone VARCHAR(20),\n            mobile VARCHAR(20),\n            tax_id VARCHAR(50),\n            birth_date DATE,\n            address TEXT,\n            city VARCHAR(100),\n            postal_code VARCHAR(20),\n            country VARCHAR(100) DEFAULT 'Portugal',\n            attention_level VARCHAR(20) DEFAULT 'normal',\n            notes TEXT,\n            is_active BOOLEAN DEFAULT true,\n            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );\n    `;\n    \n    // SQL para criar tabela contracts\n    const createContractsSQL = `\n        CREATE TABLE IF NOT EXISTS public.contracts (\n            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n            client_id UUID NOT NULL REFERENCES public.clients(id) ON DELETE CASCADE,\n            contract_number VARCHAR(100) UNIQUE NOT NULL,\n            description TEXT,\n            total_amount DECIMAL(12,2) NOT NULL DEFAULT 0,\n            start_date DATE NOT NULL,\n            end_date DATE,\n            status VARCHAR(20) DEFAULT 'active',\n            payment_frequency VARCHAR(20) DEFAULT 'monthly',\n            notes TEXT,\n            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );\n    `;\n    \n    // SQL para criar tabela payments\n    const createPaymentsSQL = `\n        CREATE TABLE IF NOT EXISTS public.payments (\n            id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n            contract_id UUID NOT NULL REFERENCES public.contracts(id) ON DELETE CASCADE,\n            amount DECIMAL(12,2) NOT NULL,\n            due_date DATE NOT NULL,\n            paid_date DATE,\n            status VARCHAR(20) DEFAULT 'pending',\n            payment_method VARCHAR(50) DEFAULT 'bank_transfer',\n            transaction_id VARCHAR(255),\n            notes TEXT,\n            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n        );\n    `;\n    \n    // Executar cria√ß√£o das tabelas\n    const success1 = await executeSQLCommand(createClientsSQL, 'Criando tabela clients');\n    const success2 = await executeSQLCommand(createContractsSQL, 'Criando tabela contracts');\n    const success3 = await executeSQLCommand(createPaymentsSQL, 'Criando tabela payments');\n    \n    return success1 && success2 && success3;\n}\n\n/**\n * Cria √≠ndices para otimiza√ß√£o\n */\nasync function createIndexes() {\n    console.log('\\nüìä === Criando √çndices ===');\n    \n    const indexes = [\n        {\n            sql: 'CREATE INDEX IF NOT EXISTS idx_clients_email ON public.clients(email);',\n            description: '√çndice para email de clientes'\n        },\n        {\n            sql: 'CREATE INDEX IF NOT EXISTS idx_clients_name ON public.clients(first_name, last_name);',\n            description: '√çndice para nome de clientes'\n        },\n        {\n            sql: 'CREATE INDEX IF NOT EXISTS idx_contracts_client_id ON public.contracts(client_id);',\n            description: '√çndice para client_id em contratos'\n        },\n        {\n            sql: 'CREATE INDEX IF NOT EXISTS idx_payments_contract_id ON public.payments(contract_id);',\n            description: '√çndice para contract_id em pagamentos'\n        },\n        {\n            sql: 'CREATE INDEX IF NOT EXISTS idx_payments_status ON public.payments(status);',\n            description: '√çndice para status de pagamentos'\n        }\n    ];\n    \n    let allSuccess = true;\n    for (const index of indexes) {\n        const success = await executeSQLCommand(index.sql, index.description);\n        if (!success) allSuccess = false;\n    }\n    \n    return allSuccess;\n}\n\n/**\n * Habilita RLS e cria pol√≠ticas b√°sicas\n */\nasync function setupRLS() {\n    console.log('\\nüîí === Configurando Row Level Security ===');\n    \n    const rlsCommands = [\n        {\n            sql: 'ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;',\n            description: 'Habilitando RLS para clients'\n        },\n        {\n            sql: 'ALTER TABLE public.contracts ENABLE ROW LEVEL SECURITY;',\n            description: 'Habilitando RLS para contracts'\n        },\n        {\n            sql: 'ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;',\n            description: 'Habilitando RLS para payments'\n        },\n        {\n            sql: `CREATE POLICY IF NOT EXISTS \"clients_policy\" ON public.clients FOR ALL USING (true);`,\n            description: 'Criando pol√≠tica para clients'\n        },\n        {\n            sql: `CREATE POLICY IF NOT EXISTS \"contracts_policy\" ON public.contracts FOR ALL USING (true);`,\n            description: 'Criando pol√≠tica para contracts'\n        },\n        {\n            sql: `CREATE POLICY IF NOT EXISTS \"payments_policy\" ON public.payments FOR ALL USING (true);`,\n            description: 'Criando pol√≠tica para payments'\n        }\n    ];\n    \n    let allSuccess = true;\n    for (const command of rlsCommands) {\n        const success = await executeSQLCommand(command.sql, command.description);\n        if (!success) allSuccess = false;\n    }\n    \n    return allSuccess;\n}\n\n/**\n * Fun√ß√£o principal\n */\nasync function main() {\n    console.log('üöÄ === Configura√ß√£o do Banco de Dados Supabase ===');\n    console.log(`üìÅ URL: ${supabaseUrl}`);\n    \n    try {\n        // Verificar tabelas existentes\n        const existingTables = await checkTablesExist();\n        \n        if (existingTables.length === 3) {\n            console.log('\\n‚úÖ Todas as tabelas j√° existem!');\n            console.log('Voc√™ pode prosseguir com a importa√ß√£o dos dados.');\n            return;\n        }\n        \n        // Tentar criar as tabelas usando m√©todo direto\n        console.log('\\n‚ö†Ô∏è  Algumas tabelas n√£o existem. Tentando criar...');\n        \n        // M√©todo alternativo: usar inser√ß√£o direta para testar permiss√µes\n        try {\n            const { data, error } = await supabase\n                .from('clients')\n                .insert({\n                    first_name: 'Teste',\n                    last_name: 'Sistema',\n                    email: 'teste@sistema.com'\n                })\n                .select();\n            \n            if (!error) {\n                console.log('‚úÖ Tabela clients j√° existe e est√° acess√≠vel');\n                \n                // Remover registro de teste\n                await supabase\n                    .from('clients')\n                    .delete()\n                    .eq('email', 'teste@sistema.com');\n            }\n        } catch (testError) {\n            console.log('‚ÑπÔ∏è  Tabelas precisam ser criadas');\n        }\n        \n        console.log('\\nüìã === INSTRU√á√ïES MANUAIS ===');\n        console.log('Como o Supabase n√£o permite execu√ß√£o direta de DDL via API,');\n        console.log('voc√™ precisa executar o SQL manualmente:');\n        console.log('');\n        console.log('1. Acesse o Supabase Dashboard: https://app.supabase.com');\n        console.log('2. V√° para seu projeto');\n        console.log('3. Clique em \"SQL Editor\" no menu lateral');\n        console.log('4. Cole e execute o conte√∫do do arquivo:');\n        console.log('   /Users/insitutoareluna/Documents/finance/backend/src/scripts/create_supabase_tables.sql');\n        console.log('');\n        console.log('Ap√≥s executar o SQL, rode novamente este script para verificar.');\n        \n    } catch (error) {\n        console.error('‚ùå Erro durante a configura√ß√£o:', error.message);\n    }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n    main().catch(console.error);\n}\n\nmodule.exports = { main };"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AAHA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;IAAA;IAAAE,KAAA;MAAA;QAAAC,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAI,IAAA;QAAAC,IAAA;UAAAN,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAK,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;IAAA;IAAAO,SAAA;MAAA;QAAAD,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAD,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;MAAA;QAAAM,GAAA;UAAAP,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;QAAAO,IAAA;QAAAC,SAAA;UAAAV,KAAA;YAAAC,IAAA;YAAAC,MAAA;UAAA;UAAAC,GAAA;YAAAF,IAAA;YAAAC,MAAA;UAAA;QAAA;UAAAF,KAAA;YAAAC,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;UAAAR,GAAA;YAAAF,IAAA,EAAAU,SAAA;YAAAT,MAAA,EAAAS;UAAA;QAAA;QAAAV,IAAA;MAAA;IAAA;IAAAW,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,CAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;MAAA;IAAA;IAAAC,eAAA;IAAArB,IAAA;EAAA;EAAA,IAAAsB,QAAA,GAAArB,MAAA,CAAAE,GAAA,MAAAF,MAAA,CAAAE,GAAA;EAAA,KAAAmB,QAAA,CAAAvB,IAAA,KAAAuB,QAAA,CAAAvB,IAAA,EAAAC,IAAA,KAAAA,IAAA;IAAAsB,QAAA,CAAAvB,IAAA,IAAAK,YAAA;EAAA;EAAA,IAAAmB,cAAA,GAAAD,QAAA,CAAAvB,IAAA;EAAA;IAaY;IAAAD,cAAA,YAAAA,CAAA;MAAA,OAAAyB,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAzB,cAAA;AARZ,MAAM;EAAE0B;AAAa,CAAC;AAAA;AAAA,CAAA1B,cAAA,GAAAoB,CAAA,OAAGO,OAAO,CAAC,uBAAuB,CAAC;AACzD,MAAMC,EAAE;AAAA;AAAA,CAAA5B,cAAA,GAAAoB,CAAA,OAAGO,OAAO,CAAC,IAAI,CAAC;AACxB,MAAM1B,IAAI;AAAA;AAAA,CAAAD,cAAA,GAAAoB,CAAA,OAAGO,OAAO,CAAC,MAAM,CAAC;AAAC;AAAA3B,cAAA,GAAAoB,CAAA;AAC7BO,OAAO,CAAC,QAAQ,CAAC,CAACE,MAAM,CAAC,CAAC;;AAE1B;AACA,MAAMC,WAAW;AAAA;AAAA,CAAA9B,cAAA,GAAAoB,CAAA,OAAGW,OAAO,CAACC,GAAG,CAACC,YAAY;AAC5C,MAAMC,kBAAkB;AAAA;AAAA,CAAAlC,cAAA,GAAAoB,CAAA,OAAGW,OAAO,CAACC,GAAG,CAACG,yBAAyB,EAAC,CAAC;AAAA;AAAAnC,cAAA,GAAAoB,CAAA;AAElE;AAAI;AAAA,CAAApB,cAAA,GAAAsB,CAAA,WAACQ,WAAW;AAAA;AAAA,CAAA9B,cAAA,GAAAsB,CAAA,UAAI,CAACY,kBAAkB,GAAE;EAAA;EAAAlC,cAAA,GAAAsB,CAAA;EAAAtB,cAAA,GAAAoB,CAAA;EACrCgB,OAAO,CAACC,KAAK,CAAC,yFAAyF,CAAC;EAAC;EAAArC,cAAA,GAAAoB,CAAA;EACzGgB,OAAO,CAACE,GAAG,CAAC,oCAAoC,CAAC;EAAC;EAAAtC,cAAA,GAAAoB,CAAA;EAClDgB,OAAO,CAACE,GAAG,CAAC,kCAAkC,CAAC;EAAC;EAAAtC,cAAA,GAAAoB,CAAA;EAChDgB,OAAO,CAACE,GAAG,CAAC,8DAA8D,CAAC;EAAC;EAAAtC,cAAA,GAAAoB,CAAA;EAC5EW,OAAO,CAACQ,IAAI,CAAC,CAAC,CAAC;AACnB,CAAC;AAAA;AAAA;EAAAvC,cAAA,GAAAsB,CAAA;AAAA;;AAED;AACA,MAAMkB,QAAQ;AAAA;AAAA,CAAAxC,cAAA,GAAAoB,CAAA,QAAGM,YAAY,CAACI,WAAW,EAAEI,kBAAkB,CAAC;;AAE9D;AACA;AACA;AACA,eAAeO,iBAAiBA,CAACC,GAAG,EAAEC,WAAW,EAAE;EAAA;EAAA3C,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAoB,CAAA;EAC/C,IAAI;IAAA;IAAApB,cAAA,GAAAoB,CAAA;IACAgB,OAAO,CAACE,GAAG,CAAC,kBAAkBK,WAAW,EAAE,CAAC;IAE5C,MAAM;MAAEC,IAAI;MAAEP;IAAM,CAAC;IAAA;IAAA,CAAArC,cAAA,GAAAoB,CAAA,QAAG,MAAMoB,QAAQ,CAACK,GAAG,CAAC,UAAU,EAAE;MAAEC,SAAS,EAAEJ;IAAI,CAAC,CAAC;IAAC;IAAA1C,cAAA,GAAAoB,CAAA;IAE3E,IAAIiB,KAAK,EAAE;MAAA;MAAArC,cAAA,GAAAsB,CAAA;MACP;MACA,MAAM;QAAEsB,IAAI,EAAEG,OAAO;QAAEV,KAAK,EAAEW;MAAS,CAAC;MAAA;MAAA,CAAAhD,cAAA,GAAAoB,CAAA,QAAG,MAAMoB,QAAQ,CACpDS,IAAI,CAAC,iCAAiC,CAAC,CACvCC,MAAM,CAAC,GAAG,CAAC,CACXC,KAAK,CAAC,CAAC,CAAC;MAAC;MAAAnD,cAAA,GAAAoB,CAAA;MAEd;MAAI;MAAA,CAAApB,cAAA,GAAAsB,CAAA,UAAA0B,QAAQ;MAAA;MAAA,CAAAhD,cAAA,GAAAsB,CAAA,UAAI0B,QAAQ,CAACI,OAAO,CAACC,QAAQ,CAAC,2DAA2D,CAAC,GAAE;QAAA;QAAArD,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACpGgB,OAAO,CAACE,GAAG,CAAC,wEAAwE,CAAC;QAAC;QAAAtC,cAAA,GAAAoB,CAAA;QACtF,OAAO,KAAK;MAChB,CAAC;MAAA;MAAA;QAAApB,cAAA,GAAAsB,CAAA;MAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAEDgB,OAAO,CAACC,KAAK,CAAC,uBAAuBM,WAAW,EAAE,CAAC;MAAC;MAAA3C,cAAA,GAAAoB,CAAA;MACpDgB,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACe,OAAO,CAAC;MAAC;MAAApD,cAAA,GAAAoB,CAAA;MAC1C,OAAO,KAAK;IAChB,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;IAAAtB,cAAA,GAAAoB,CAAA;IAEDgB,OAAO,CAACE,GAAG,CAAC,gBAAgBK,WAAW,EAAE,CAAC;IAAC;IAAA3C,cAAA,GAAAoB,CAAA;IAC3C,OAAO,IAAI;EAEf,CAAC,CAAC,OAAOkC,GAAG,EAAE;IAAA;IAAAtD,cAAA,GAAAoB,CAAA;IACVgB,OAAO,CAACC,KAAK,CAAC,+BAA+BM,WAAW,EAAE,CAAC;IAAC;IAAA3C,cAAA,GAAAoB,CAAA;IAC5DgB,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEiB,GAAG,CAACF,OAAO,CAAC;IAAC;IAAApD,cAAA,GAAAoB,CAAA;IACxC,OAAO,KAAK;EAChB;AACJ;;AAEA;AACA;AACA;AACA,eAAemC,gBAAgBA,CAAA,EAAG;EAAA;EAAAvD,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAoB,CAAA;EAC9B,IAAI;IAAA;IAAApB,cAAA,GAAAoB,CAAA;IACAgB,OAAO,CAACE,GAAG,CAAC,4CAA4C,CAAC;IAEzD,MAAMkB,MAAM;IAAA;IAAA,CAAAxD,cAAA,GAAAoB,CAAA,QAAG,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,CAAC;IACnD,MAAMqC,cAAc;IAAA;IAAA,CAAAzD,cAAA,GAAAoB,CAAA,QAAG,EAAE;IAAC;IAAApB,cAAA,GAAAoB,CAAA;IAE1B,KAAK,MAAMsC,KAAK,IAAIF,MAAM,EAAE;MACxB,MAAM;QAAEZ,IAAI;QAAEP;MAAM,CAAC;MAAA;MAAA,CAAArC,cAAA,GAAAoB,CAAA,QAAG,MAAMoB,QAAQ,CACjCS,IAAI,CAACS,KAAK,CAAC,CACXR,MAAM,CAAC,OAAO,EAAE;QAAES,KAAK,EAAE,OAAO;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;MAAC;MAAA5D,cAAA,GAAAoB,CAAA;MAErD,IAAI,CAACiB,KAAK,EAAE;QAAA;QAAArC,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACRqC,cAAc,CAACI,IAAI,CAACH,KAAK,CAAC;QAAC;QAAA1D,cAAA,GAAAoB,CAAA;QAC3BgB,OAAO,CAACE,GAAG,CAAC,aAAaoB,KAAK,aAAa,CAAC;MAChD,CAAC;MAAA;MAAA;QAAA1D,cAAA,GAAAsB,CAAA;MAAA;IACL;IAAC;IAAAtB,cAAA,GAAAoB,CAAA;IAED,OAAOqC,cAAc;EAEzB,CAAC,CAAC,OAAOpB,KAAK,EAAE;IAAA;IAAArC,cAAA,GAAAoB,CAAA;IACZgB,OAAO,CAACE,GAAG,CAAC,mDAAmD,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IACjE,OAAO,EAAE;EACb;AACJ;;AAEA;AACA;AACA;AACA,eAAe0C,YAAYA,CAAA,EAAG;EAAA;EAAA9D,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAoB,CAAA;EAC1BgB,OAAO,CAACE,GAAG,CAAC,8BAA8B,CAAC;;EAE3C;EACA,MAAMyB,gBAAgB;EAAA;EAAA,CAAA/D,cAAA,GAAAoB,CAAA,QAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;EAED;EACA,MAAM4C,kBAAkB;EAAA;EAAA,CAAAhE,cAAA,GAAAoB,CAAA,QAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;EAED;EACA,MAAM6C,iBAAiB;EAAA;EAAA,CAAAjE,cAAA,GAAAoB,CAAA,QAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;EAED;EACA,MAAM8C,QAAQ;EAAA;EAAA,CAAAlE,cAAA,GAAAoB,CAAA,QAAG,MAAMqB,iBAAiB,CAACsB,gBAAgB,EAAE,wBAAwB,CAAC;EACpF,MAAMI,QAAQ;EAAA;EAAA,CAAAnE,cAAA,GAAAoB,CAAA,QAAG,MAAMqB,iBAAiB,CAACuB,kBAAkB,EAAE,0BAA0B,CAAC;EACxF,MAAMI,QAAQ;EAAA;EAAA,CAAApE,cAAA,GAAAoB,CAAA,QAAG,MAAMqB,iBAAiB,CAACwB,iBAAiB,EAAE,yBAAyB,CAAC;EAAC;EAAAjE,cAAA,GAAAoB,CAAA;EAEvF,OAAO,2BAAApB,cAAA,GAAAsB,CAAA,UAAA4C,QAAQ;EAAA;EAAA,CAAAlE,cAAA,GAAAsB,CAAA,UAAI6C,QAAQ;EAAA;EAAA,CAAAnE,cAAA,GAAAsB,CAAA,UAAI8C,QAAQ;AAC3C;;AAEA;AACA;AACA;AACA,eAAeC,aAAaA,CAAA,EAAG;EAAA;EAAArE,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAoB,CAAA;EAC3BgB,OAAO,CAACE,GAAG,CAAC,8BAA8B,CAAC;EAE3C,MAAMgC,OAAO;EAAA;EAAA,CAAAtE,cAAA,GAAAoB,CAAA,QAAG,CACZ;IACIsB,GAAG,EAAE,wEAAwE;IAC7EC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,GAAG,EAAE,uFAAuF;IAC5FC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,GAAG,EAAE,oFAAoF;IACzFC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,GAAG,EAAE,sFAAsF;IAC3FC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,GAAG,EAAE,4EAA4E;IACjFC,WAAW,EAAE;EACjB,CAAC,CACJ;EAED,IAAI4B,UAAU;EAAA;EAAA,CAAAvE,cAAA,GAAAoB,CAAA,QAAG,IAAI;EAAC;EAAApB,cAAA,GAAAoB,CAAA;EACtB,KAAK,MAAMoD,KAAK,IAAIF,OAAO,EAAE;IACzB,MAAMG,OAAO;IAAA;IAAA,CAAAzE,cAAA,GAAAoB,CAAA,QAAG,MAAMqB,iBAAiB,CAAC+B,KAAK,CAAC9B,GAAG,EAAE8B,KAAK,CAAC7B,WAAW,CAAC;IAAC;IAAA3C,cAAA,GAAAoB,CAAA;IACtE,IAAI,CAACqD,OAAO,EAAE;MAAA;MAAAzE,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAAAmD,UAAU,GAAG,KAAK;IAAA,CAAC;IAAA;IAAA;MAAAvE,cAAA,GAAAsB,CAAA;IAAA;EACrC;EAAC;EAAAtB,cAAA,GAAAoB,CAAA;EAED,OAAOmD,UAAU;AACrB;;AAEA;AACA;AACA;AACA,eAAeG,QAAQA,CAAA,EAAG;EAAA;EAAA1E,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAoB,CAAA;EACtBgB,OAAO,CAACE,GAAG,CAAC,8CAA8C,CAAC;EAE3D,MAAMqC,WAAW;EAAA;EAAA,CAAA3E,cAAA,GAAAoB,CAAA,QAAG,CAChB;IACIsB,GAAG,EAAE,uDAAuD;IAC5DC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,GAAG,EAAE,yDAAyD;IAC9DC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,GAAG,EAAE,wDAAwD;IAC7DC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,GAAG,EAAE,sFAAsF;IAC3FC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,GAAG,EAAE,0FAA0F;IAC/FC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,GAAG,EAAE,wFAAwF;IAC7FC,WAAW,EAAE;EACjB,CAAC,CACJ;EAED,IAAI4B,UAAU;EAAA;EAAA,CAAAvE,cAAA,GAAAoB,CAAA,QAAG,IAAI;EAAC;EAAApB,cAAA,GAAAoB,CAAA;EACtB,KAAK,MAAMwD,OAAO,IAAID,WAAW,EAAE;IAC/B,MAAMF,OAAO;IAAA;IAAA,CAAAzE,cAAA,GAAAoB,CAAA,QAAG,MAAMqB,iBAAiB,CAACmC,OAAO,CAAClC,GAAG,EAAEkC,OAAO,CAACjC,WAAW,CAAC;IAAC;IAAA3C,cAAA,GAAAoB,CAAA;IAC1E,IAAI,CAACqD,OAAO,EAAE;MAAA;MAAAzE,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAAAmD,UAAU,GAAG,KAAK;IAAA,CAAC;IAAA;IAAA;MAAAvE,cAAA,GAAAsB,CAAA;IAAA;EACrC;EAAC;EAAAtB,cAAA,GAAAoB,CAAA;EAED,OAAOmD,UAAU;AACrB;;AAEA;AACA;AACA;AACA,eAAeM,IAAIA,CAAA,EAAG;EAAA;EAAA7E,cAAA,GAAAqB,CAAA;EAAArB,cAAA,GAAAoB,CAAA;EAClBgB,OAAO,CAACE,GAAG,CAAC,oDAAoD,CAAC;EAAC;EAAAtC,cAAA,GAAAoB,CAAA;EAClEgB,OAAO,CAACE,GAAG,CAAC,WAAWR,WAAW,EAAE,CAAC;EAAC;EAAA9B,cAAA,GAAAoB,CAAA;EAEtC,IAAI;IACA;IACA,MAAMqC,cAAc;IAAA;IAAA,CAAAzD,cAAA,GAAAoB,CAAA,QAAG,MAAMmC,gBAAgB,CAAC,CAAC;IAAC;IAAAvD,cAAA,GAAAoB,CAAA;IAEhD,IAAIqC,cAAc,CAACqB,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA9E,cAAA,GAAAsB,CAAA;MAAAtB,cAAA,GAAAoB,CAAA;MAC7BgB,OAAO,CAACE,GAAG,CAAC,kCAAkC,CAAC;MAAC;MAAAtC,cAAA,GAAAoB,CAAA;MAChDgB,OAAO,CAACE,GAAG,CAAC,kDAAkD,CAAC;MAAC;MAAAtC,cAAA,GAAAoB,CAAA;MAChE;IACJ,CAAC;IAAA;IAAA;MAAApB,cAAA,GAAAsB,CAAA;IAAA;;IAED;IAAAtB,cAAA,GAAAoB,CAAA;IACAgB,OAAO,CAACE,GAAG,CAAC,sDAAsD,CAAC;;IAEnE;IAAA;IAAAtC,cAAA,GAAAoB,CAAA;IACA,IAAI;MACA,MAAM;QAAEwB,IAAI;QAAEP;MAAM,CAAC;MAAA;MAAA,CAAArC,cAAA,GAAAoB,CAAA,QAAG,MAAMoB,QAAQ,CACjCS,IAAI,CAAC,SAAS,CAAC,CACf8B,MAAM,CAAC;QACJC,UAAU,EAAE,OAAO;QACnBC,SAAS,EAAE,SAAS;QACpBC,KAAK,EAAE;MACX,CAAC,CAAC,CACDhC,MAAM,CAAC,CAAC;MAAC;MAAAlD,cAAA,GAAAoB,CAAA;MAEd,IAAI,CAACiB,KAAK,EAAE;QAAA;QAAArC,cAAA,GAAAsB,CAAA;QAAAtB,cAAA,GAAAoB,CAAA;QACRgB,OAAO,CAACE,GAAG,CAAC,6CAA6C,CAAC;;QAE1D;QAAA;QAAAtC,cAAA,GAAAoB,CAAA;QACA,MAAMoB,QAAQ,CACTS,IAAI,CAAC,SAAS,CAAC,CACfkC,MAAM,CAAC,CAAC,CACRC,EAAE,CAAC,OAAO,EAAE,mBAAmB,CAAC;MACzC,CAAC;MAAA;MAAA;QAAApF,cAAA,GAAAsB,CAAA;MAAA;IACL,CAAC,CAAC,OAAO+D,SAAS,EAAE;MAAA;MAAArF,cAAA,GAAAoB,CAAA;MAChBgB,OAAO,CAACE,GAAG,CAAC,kCAAkC,CAAC;IACnD;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IAEDgB,OAAO,CAACE,GAAG,CAAC,iCAAiC,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IAC/CgB,OAAO,CAACE,GAAG,CAAC,6DAA6D,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IAC3EgB,OAAO,CAACE,GAAG,CAAC,0CAA0C,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IACxDgB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IAChBgB,OAAO,CAACE,GAAG,CAAC,0DAA0D,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IACxEgB,OAAO,CAACE,GAAG,CAAC,wBAAwB,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IACtCgB,OAAO,CAACE,GAAG,CAAC,2CAA2C,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IACzDgB,OAAO,CAACE,GAAG,CAAC,0CAA0C,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IACxDgB,OAAO,CAACE,GAAG,CAAC,4FAA4F,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IAC1GgB,OAAO,CAACE,GAAG,CAAC,EAAE,CAAC;IAAC;IAAAtC,cAAA,GAAAoB,CAAA;IAChBgB,OAAO,CAACE,GAAG,CAAC,iEAAiE,CAAC;EAElF,CAAC,CAAC,OAAOD,KAAK,EAAE;IAAA;IAAArC,cAAA,GAAAoB,CAAA;IACZgB,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAACe,OAAO,CAAC;EAClE;AACJ;;AAEA;AAAA;AAAApD,cAAA,GAAAoB,CAAA;AACA,IAAIO,OAAO,CAACkD,IAAI,KAAKS,MAAM,EAAE;EAAA;EAAAtF,cAAA,GAAAsB,CAAA;EAAAtB,cAAA,GAAAoB,CAAA;EACzByD,IAAI,CAAC,CAAC,CAACU,KAAK,CAACnD,OAAO,CAACC,KAAK,CAAC;AAC/B,CAAC;AAAA;AAAA;EAAArC,cAAA,GAAAsB,CAAA;AAAA;AAAAtB,cAAA,GAAAoB,CAAA;AAEDkE,MAAM,CAACE,OAAO,GAAG;EAAEX;AAAK,CAAC","ignoreList":[]}