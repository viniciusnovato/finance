{"version":3,"names":["cov_1qpzhqrld","actualCoverage","createClient","s","require","fs","path","csv","config","join","__dirname","supabaseUrl","process","env","SUPABASE_URL","supabaseKey","SUPABASE_SERVICE_ROLE_KEY","b","console","error","exit","supabase","BATCH_SIZE","CSV_BASE_PATH","readCSV","filePath","f","Promise","resolve","reject","results","existsSync","Error","createReadStream","pipe","on","data","push","log","length","basename","mapClientData","csvRow","id","first_name","last_name","email","phone","mobile","tax_id","birth_date","address","city","state","postal_code","country","status","notes","external_id","created_at","Date","toISOString","updated_at","mapContractData","client_id","contract_number","description","value","parseFloat","start_date","end_date","payment_frequency","mapPaymentData","contract_id","amount","due_date","paid_date","payment_method","importInBatches","tableName","mapFunction","imported","errors","i","batch","slice","mappedBatch","map","result","from","insert","Math","floor","ceil","setTimeout","total","importClients","testMode","csvPath","clientsData","dataToImport","importContracts","contractsData","importPayments","paymentsData","verifyDataIntegrity","count","clientsCount","select","head","contractsCount","paymentsCount","orphanContracts","not","orphanPayments","runTest","clientsPath","contractsPath","paymentsPath","allClients","allContracts","allPayments","testClients","availableClientIds","c","testContracts","filter","contract","includes","testContractIds","testPayments","payment","clientsResult","contractsResult","paymentsResult","totalImported","totalErrors","runFullImport","main","module","args","argv","catch","exports"],"sources":["import_csv_final.js"],"sourcesContent":["const { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst path = require('path');\nconst csv = require('csv-parser');\nrequire('dotenv').config({ path: path.join(__dirname, '../../.env') });\n\n// Configura√ß√£o do Supabase\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl || !supabaseKey) {\n    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');\n    process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// Configura√ß√µes\nconst BATCH_SIZE = 50; // Tamanho do lote para importa√ß√£o\nconst CSV_BASE_PATH = path.join(__dirname, '../../../importBD');\n\n/**\n * L√™ um arquivo CSV e retorna os dados\n */\nfunction readCSV(filePath) {\n    return new Promise((resolve, reject) => {\n        const results = [];\n        \n        if (!fs.existsSync(filePath)) {\n            reject(new Error(`Arquivo n√£o encontrado: ${filePath}`));\n            return;\n        }\n        \n        fs.createReadStream(filePath)\n            .pipe(csv())\n            .on('data', (data) => results.push(data))\n            .on('end', () => {\n                console.log(`üìÑ Lidos ${results.length} registros de ${path.basename(filePath)}`);\n                resolve(results);\n            })\n            .on('error', reject);\n    });\n}\n\n/**\n * Mapeia dados do CSV de clientes para o formato do banco\n */\nfunction mapClientData(csvRow) {\n    return {\n        id: csvRow.id,\n        first_name: csvRow.first_name || '',\n        last_name: csvRow.last_name || '',\n        email: csvRow.email || null,\n        phone: csvRow.phone || null,\n        mobile: csvRow.mobile || null,\n        tax_id: csvRow.tax_id || null,\n        birth_date: csvRow.birth_date || null,\n        address: csvRow.address || null,\n        city: csvRow.city || null,\n        state: csvRow.state || null,\n        postal_code: csvRow.postal_code || null,\n        country: csvRow.country || 'Portugal',\n        status: csvRow.status || 'active',\n        notes: csvRow.notes || null,\n        external_id: csvRow.external_id || null,\n        created_at: csvRow.created_at || new Date().toISOString(),\n        updated_at: csvRow.updated_at || new Date().toISOString()\n    };\n}\n\n/**\n * Mapeia dados do CSV de contratos para o formato do banco\n */\nfunction mapContractData(csvRow) {\n    return {\n        id: csvRow.id,\n        client_id: csvRow.client_id,\n        contract_number: csvRow.contract_number,\n        description: csvRow.description || '',\n        value: parseFloat(csvRow.value) || 0,\n        start_date: csvRow.start_date || null,\n        end_date: csvRow.end_date || null,\n        status: csvRow.status || 'Ativo',\n        payment_frequency: csvRow.payment_frequency || 'monthly',\n        notes: csvRow.notes || null,\n        created_at: csvRow.created_at || new Date().toISOString(),\n        updated_at: csvRow.updated_at || new Date().toISOString()\n    };\n}\n\n/**\n * Mapeia dados do CSV de pagamentos para o formato do banco\n */\nfunction mapPaymentData(csvRow) {\n    return {\n        id: csvRow.id,\n        contract_id: csvRow.contract_id,\n        amount: parseFloat(csvRow.amount) || 0,\n        due_date: csvRow.due_date || null,\n        paid_date: csvRow.paid_date || null,\n        status: csvRow.status || 'pending',\n        payment_method: csvRow.payment_method || null,\n        notes: csvRow.notes || null,\n        external_id: csvRow.external_id || null,\n        created_at: csvRow.created_at || new Date().toISOString(),\n        updated_at: csvRow.updated_at || new Date().toISOString()\n    };\n}\n\n/**\n * Importa dados em lotes\n */\nasync function importInBatches(data, tableName, mapFunction) {\n    console.log(`üì• Importando ${data.length} registros para ${tableName}...`);\n    \n    let imported = 0;\n    let errors = 0;\n    \n    for (let i = 0; i < data.length; i += BATCH_SIZE) {\n        const batch = data.slice(i, i + BATCH_SIZE);\n        const mappedBatch = batch.map(mapFunction);\n        \n        try {\n            const { data: result, error } = await supabase\n                .from(tableName)\n                .insert(mappedBatch);\n            \n            if (error) {\n                console.error(`‚ùå Erro no lote ${Math.floor(i/BATCH_SIZE) + 1}:`, error);\n                errors += batch.length;\n            } else {\n                imported += batch.length;\n                console.log(`‚úÖ Lote ${Math.floor(i/BATCH_SIZE) + 1}/${Math.ceil(data.length/BATCH_SIZE)} importado: ${imported}/${data.length}`);\n            }\n        } catch (error) {\n            console.error(`üí• Erro fatal no lote ${Math.floor(i/BATCH_SIZE) + 1}:`, error);\n            errors += batch.length;\n        }\n        \n        // Pequena pausa entre lotes para n√£o sobrecarregar o banco\n        await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    \n    return { imported, errors, total: data.length };\n}\n\n/**\n * Importa clientes\n */\nasync function importClients(testMode = false) {\n    console.log('\\nüë• === IMPORTA√á√ÉO DE CLIENTES ===');\n    \n    try {\n        const csvPath = path.join(CSV_BASE_PATH, 'clients.csv');\n        const clientsData = await readCSV(csvPath);\n        \n        // Se modo teste, usar apenas os primeiros 10 registros\n        const dataToImport = testMode ? clientsData.slice(0, 10) : clientsData;\n        \n        console.log(`üìä Total de clientes a importar: ${dataToImport.length}`);\n        \n        const result = await importInBatches(dataToImport, 'clients', mapClientData);\n        \n        console.log(`\\nüìà Resultado da importa√ß√£o de clientes:`);\n        console.log(`   ‚úÖ Importados: ${result.imported}`);\n        console.log(`   ‚ùå Erros: ${result.errors}`);\n        console.log(`   üìä Total: ${result.total}`);\n        \n        return result;\n        \n    } catch (error) {\n        console.error('üí• Erro ao importar clientes:', error);\n        throw error;\n    }\n}\n\n/**\n * Importa contratos\n */\nasync function importContracts(testMode = false) {\n    console.log('\\nüìÑ === IMPORTA√á√ÉO DE CONTRATOS ===');\n    \n    try {\n        const csvPath = path.join(CSV_BASE_PATH, 'contracts.csv');\n        const contractsData = await readCSV(csvPath);\n        \n        // Se modo teste, usar apenas os primeiros 10 registros\n        const dataToImport = testMode ? contractsData.slice(0, 10) : contractsData;\n        \n        console.log(`üìä Total de contratos a importar: ${dataToImport.length}`);\n        \n        const result = await importInBatches(dataToImport, 'contracts', mapContractData);\n        \n        console.log(`\\nüìà Resultado da importa√ß√£o de contratos:`);\n        console.log(`   ‚úÖ Importados: ${result.imported}`);\n        console.log(`   ‚ùå Erros: ${result.errors}`);\n        console.log(`   üìä Total: ${result.total}`);\n        \n        return result;\n        \n    } catch (error) {\n        console.error('üí• Erro ao importar contratos:', error);\n        throw error;\n    }\n}\n\n/**\n * Importa pagamentos\n */\nasync function importPayments(testMode = false) {\n    console.log('\\nüí∞ === IMPORTA√á√ÉO DE PAGAMENTOS ===');\n    \n    try {\n        const csvPath = path.join(CSV_BASE_PATH, 'payments.csv');\n        const paymentsData = await readCSV(csvPath);\n        \n        // Se modo teste, usar apenas os primeiros 20 registros\n        const dataToImport = testMode ? paymentsData.slice(0, 20) : paymentsData;\n        \n        console.log(`üìä Total de pagamentos a importar: ${dataToImport.length}`);\n        \n        const result = await importInBatches(dataToImport, 'payments', mapPaymentData);\n        \n        console.log(`\\nüìà Resultado da importa√ß√£o de pagamentos:`);\n        console.log(`   ‚úÖ Importados: ${result.imported}`);\n        console.log(`   ‚ùå Erros: ${result.errors}`);\n        console.log(`   üìä Total: ${result.total}`);\n        \n        return result;\n        \n    } catch (error) {\n        console.error('üí• Erro ao importar pagamentos:', error);\n        throw error;\n    }\n}\n\n/**\n * Verifica integridade dos dados ap√≥s importa√ß√£o\n */\nasync function verifyDataIntegrity() {\n    console.log('\\nüîç === VERIFICA√á√ÉO DE INTEGRIDADE ===');\n    \n    try {\n        // Contar registros em cada tabela\n        const { count: clientsCount } = await supabase\n            .from('clients')\n            .select('*', { count: 'exact', head: true });\n        \n        const { count: contractsCount } = await supabase\n            .from('contracts')\n            .select('*', { count: 'exact', head: true });\n        \n        const { count: paymentsCount } = await supabase\n            .from('payments')\n            .select('*', { count: 'exact', head: true });\n        \n        console.log(`üìä Registros no banco de dados:`);\n        console.log(`   üë• Clientes: ${clientsCount || 0}`);\n        console.log(`   üìÑ Contratos: ${contractsCount || 0}`);\n        console.log(`   üí∞ Pagamentos: ${paymentsCount || 0}`);\n        \n        // Verificar integridade referencial\n        const { data: orphanContracts } = await supabase\n            .from('contracts')\n            .select('id, client_id')\n            .not('client_id', 'in', `(SELECT id FROM clients)`);\n        \n        const { data: orphanPayments } = await supabase\n            .from('payments')\n            .select('id, contract_id')\n            .not('contract_id', 'in', `(SELECT id FROM contracts)`);\n        \n        if (orphanContracts && orphanContracts.length > 0) {\n            console.log(`‚ö†Ô∏è  Contratos √≥rf√£os (sem cliente): ${orphanContracts.length}`);\n        }\n        \n        if (orphanPayments && orphanPayments.length > 0) {\n            console.log(`‚ö†Ô∏è  Pagamentos √≥rf√£os (sem contrato): ${orphanPayments.length}`);\n        }\n        \n        if ((!orphanContracts || orphanContracts.length === 0) && \n            (!orphanPayments || orphanPayments.length === 0)) {\n            console.log('‚úÖ Integridade referencial verificada - todos os dados est√£o consistentes!');\n        }\n        \n    } catch (error) {\n        console.error('‚ùå Erro ao verificar integridade:', error);\n    }\n}\n\n/**\n * Fun√ß√£o principal - Teste com dados relacionados\n */\nasync function runTest() {\n    console.log('üß™ === MODO TESTE - IMPORTA√á√ÉO PARCIAL ===\\n');\n    \n    try {\n        // Primeiro, vamos ler todos os dados para identificar as rela√ß√µes\n        const clientsPath = path.join(CSV_BASE_PATH, 'clients.csv');\n        const contractsPath = path.join(CSV_BASE_PATH, 'contracts.csv');\n        const paymentsPath = path.join(CSV_BASE_PATH, 'payments.csv');\n        \n        const allClients = await readCSV(clientsPath);\n        const allContracts = await readCSV(contractsPath);\n        const allPayments = await readCSV(paymentsPath);\n        \n        // PROBLEMA IDENTIFICADO: Os IDs dos clientes e client_ids dos contratos s√£o conjuntos diferentes\n        // SOLU√á√ÉO: Importar subset de clientes primeiro, depois contratos que tenham clientes correspondentes\n        \n        // Pegar os primeiros 10 clientes\n        const testClients = allClients.slice(0, 10);\n        const availableClientIds = testClients.map(c => c.id);\n        \n        console.log(`üîç Clientes selecionados:`, availableClientIds.slice(0, 3), '...');\n        \n        // Filtrar contratos que tenham client_ids correspondentes aos clientes importados\n        const testContracts = allContracts.filter(contract => availableClientIds.includes(contract.client_id)).slice(0, 10);\n        \n        console.log(`üîç Contratos encontrados:`, testContracts.length);\n        \n        // Pegar pagamentos relacionados aos contratos de teste\n        const testContractIds = testContracts.map(c => c.id);\n        const testPayments = allPayments.filter(payment => testContractIds.includes(payment.contract_id)).slice(0, 20);\n        \n        console.log(`üìä Dados de teste selecionados:`);\n        console.log(`   üë• Clientes: ${testClients.length}`);\n        console.log(`   üìÑ Contratos: ${testContracts.length}`);\n        console.log(`   üí∞ Pagamentos: ${testPayments.length}\\n`);\n        \n        // Importar dados de teste com rela√ß√µes corretas\n        const clientsResult = await importInBatches(testClients, 'clients', mapClientData);\n        const contractsResult = await importInBatches(testContracts, 'contracts', mapContractData);\n        const paymentsResult = await importInBatches(testPayments, 'payments', mapPaymentData);\n        \n        await verifyDataIntegrity();\n        \n        console.log('\\nüéØ === RESUMO DO TESTE ===');\n        console.log(`üë• Clientes: ${clientsResult.imported}/${clientsResult.total}`);\n        console.log(`üìÑ Contratos: ${contractsResult.imported}/${contractsResult.total}`);\n        console.log(`üí∞ Pagamentos: ${paymentsResult.imported}/${paymentsResult.total}`);\n        \n        const totalImported = clientsResult.imported + contractsResult.imported + paymentsResult.imported;\n        const totalErrors = clientsResult.errors + contractsResult.errors + paymentsResult.errors;\n        \n        if (totalErrors === 0) {\n            console.log('‚úÖ Teste conclu√≠do com sucesso! Pronto para importa√ß√£o completa.');\n        } else {\n            console.log(`‚ö†Ô∏è  Teste conclu√≠do com ${totalErrors} erros. Verifique os logs acima.`);\n        }\n        \n    } catch (error) {\n        console.error('üí• Erro durante o teste:', error);\n        throw error;\n    }\n}\n\n/**\n * Fun√ß√£o principal - Importa√ß√£o completa\n */\nasync function runFullImport() {\n    console.log('üöÄ === IMPORTA√á√ÉO COMPLETA ===\\n');\n    \n    try {\n        const clientsResult = await importClients(false);\n        const contractsResult = await importContracts(false);\n        const paymentsResult = await importPayments(false);\n        \n        await verifyDataIntegrity();\n        \n        console.log('\\nüéØ === RESUMO DA IMPORTA√á√ÉO COMPLETA ===');\n        console.log(`üë• Clientes: ${clientsResult.imported}/${clientsResult.total}`);\n        console.log(`üìÑ Contratos: ${contractsResult.imported}/${contractsResult.total}`);\n        console.log(`üí∞ Pagamentos: ${paymentsResult.imported}/${paymentsResult.total}`);\n        \n        const totalImported = clientsResult.imported + contractsResult.imported + paymentsResult.imported;\n        const totalErrors = clientsResult.errors + contractsResult.errors + paymentsResult.errors;\n        \n        console.log(`\\nüìä Total geral:`);\n        console.log(`   ‚úÖ Importados: ${totalImported}`);\n        console.log(`   ‚ùå Erros: ${totalErrors}`);\n        \n        if (totalErrors === 0) {\n            console.log('\\nüéâ Importa√ß√£o completa realizada com sucesso!');\n        } else {\n            console.log(`\\n‚ö†Ô∏è  Importa√ß√£o conclu√≠da com ${totalErrors} erros. Verifique os logs acima.`);\n        }\n        \n    } catch (error) {\n        console.error('üí• Erro durante a importa√ß√£o completa:', error);\n        throw error;\n    }\n}\n\n// Executar baseado nos argumentos da linha de comando\nif (require.main === module) {\n    const args = process.argv.slice(2);\n    \n    if (args.includes('--test')) {\n        runTest().catch(console.error);\n    } else if (args.includes('--full')) {\n        runFullImport().catch(console.error);\n    } else {\n        console.log('üìã Uso:');\n        console.log('  node import_csv_final.js --test    # Importa√ß√£o de teste (poucos registros)');\n        console.log('  node import_csv_final.js --full    # Importa√ß√£o completa');\n    }\n}\n\nmodule.exports = {\n    importClients,\n    importContracts,\n    importPayments,\n    verifyDataIntegrity,\n    runTest,\n    runFullImport\n};"],"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","ignoreList":[]}