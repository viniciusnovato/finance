{"version":3,"names":["cov_231v276fpk","actualCoverage","ClientService","s","require","asyncHandler","ClientController","getClients","req","res","f","page","b","limit","search","status","sort_by","sort_order","query","result","parseInt","sortBy","sortOrder","json","error","console","code","getClientById","id","params","client","createClient","clientData","body","newClient","message","includes","updateClient","updateData","updatedClient","deleteClient","deleted","getClientContracts","getClientPayments","searchClients","q","trim","length","clients","module","exports"],"sources":["ClientController.js"],"sourcesContent":["const { ClientService } = require('../services/ClientService');\nconst { asyncHandler } = require('../middleware/errorMiddleware');\n\nclass ClientController {\n  /**\n   * Listar todos os clientes com paginação e filtros\n   * @route GET /api/clients\n   * @access Private\n   */\n  static getClients = asyncHandler(async (req, res) => {\n    const {\n      page = 1,\n      limit = 10,\n      search = '',\n      status = '',\n      sort_by = 'created_at',\n      sort_order = 'desc'\n    } = req.query;\n\n    try {\n      const result = await ClientService.getClients({\n        page: parseInt(page),\n        limit: parseInt(limit),\n        search,\n        status,\n        sortBy: sort_by,\n        sortOrder: sort_order\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('Erro ao buscar clientes:', error);\n      res.status(500).json({\n        error: 'Erro interno do servidor',\n        code: 'CLIENTS_FETCH_ERROR'\n      });\n    }\n  });\n\n  /**\n   * Obter cliente por ID\n   * @route GET /api/clients/:id\n   * @access Private\n   */\n  static getClientById = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n\n    try {\n      const client = await ClientService.getClientById(id);\n      \n      if (!client) {\n        return res.status(404).json({\n          error: 'Cliente não encontrado',\n          code: 'CLIENT_NOT_FOUND'\n        });\n      }\n\n      res.json({ client });\n    } catch (error) {\n      console.error('Erro ao buscar cliente:', error);\n      res.status(500).json({\n        error: 'Erro interno do servidor',\n        code: 'CLIENT_FETCH_ERROR'\n      });\n    }\n  });\n\n  /**\n   * Criar novo cliente\n   * @route POST /api/clients\n   * @access Private\n   */\n  static createClient = asyncHandler(async (req, res) => {\n    try {\n      const clientData = req.body;\n      const newClient = await ClientService.createClient(clientData);\n\n      res.status(201).json({\n        message: 'Cliente criado com sucesso',\n        client: newClient\n      });\n    } catch (error) {\n      console.error('Erro ao criar cliente:', error);\n      \n      if (error.message.includes('já existe')) {\n        return res.status(409).json({\n          error: error.message,\n          code: 'CLIENT_ALREADY_EXISTS'\n        });\n      }\n      \n      res.status(500).json({\n        error: 'Erro interno do servidor',\n        code: 'CLIENT_CREATE_ERROR'\n      });\n    }\n  });\n\n  /**\n   * Atualizar cliente\n   * @route PUT /api/clients/:id\n   * @access Private\n   */\n  static updateClient = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    const updateData = req.body;\n\n    try {\n      const updatedClient = await ClientService.updateClient(id, updateData);\n      \n      if (!updatedClient) {\n        return res.status(404).json({\n          error: 'Cliente não encontrado',\n          code: 'CLIENT_NOT_FOUND'\n        });\n      }\n\n      res.json({\n        message: 'Cliente atualizado com sucesso',\n        client: updatedClient\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar cliente:', error);\n      \n      if (error.message.includes('já existe')) {\n        return res.status(409).json({\n          error: error.message,\n          code: 'CLIENT_ALREADY_EXISTS'\n        });\n      }\n      \n      res.status(500).json({\n        error: 'Erro interno do servidor',\n        code: 'CLIENT_UPDATE_ERROR'\n      });\n    }\n  });\n\n  /**\n   * Deletar cliente\n   * @route DELETE /api/clients/:id\n   * @access Private\n   */\n  static deleteClient = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n\n    try {\n      const deleted = await ClientService.deleteClient(id);\n      \n      if (!deleted) {\n        return res.status(404).json({\n          error: 'Cliente não encontrado',\n          code: 'CLIENT_NOT_FOUND'\n        });\n      }\n\n      res.json({\n        message: 'Cliente deletado com sucesso'\n      });\n    } catch (error) {\n      console.error('Erro ao deletar cliente:', error);\n      \n      if (error.message.includes('possui contratos')) {\n        return res.status(409).json({\n          error: error.message,\n          code: 'CLIENT_HAS_CONTRACTS'\n        });\n      }\n      \n      res.status(500).json({\n        error: 'Erro interno do servidor',\n        code: 'CLIENT_DELETE_ERROR'\n      });\n    }\n  });\n\n  /**\n   * Obter contratos do cliente\n   * @route GET /api/clients/:id/contracts\n   * @access Private\n   */\n  static getClientContracts = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    const { page = 1, limit = 10, status = '' } = req.query;\n\n    try {\n      const result = await ClientService.getClientContracts(id, {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        status\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('Erro ao buscar contratos do cliente:', error);\n      res.status(500).json({\n        error: 'Erro interno do servidor',\n        code: 'CLIENT_CONTRACTS_FETCH_ERROR'\n      });\n    }\n  });\n\n  /**\n   * Obter pagamentos do cliente\n   * @route GET /api/clients/:id/payments\n   * @access Private\n   */\n  static getClientPayments = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    const { page = 1, limit = 10, status = '' } = req.query;\n\n    try {\n      const result = await ClientService.getClientPayments(id, {\n        page: parseInt(page),\n        limit: parseInt(limit),\n        status\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('Erro ao buscar pagamentos do cliente:', error);\n      res.status(500).json({\n        error: 'Erro interno do servidor',\n        code: 'CLIENT_PAYMENTS_FETCH_ERROR'\n      });\n    }\n  });\n\n  /**\n   * Buscar clientes por termo\n   * @route GET /api/clients/search\n   * @access Private\n   */\n  static searchClients = asyncHandler(async (req, res) => {\n    const { q: query, limit = 10 } = req.query;\n\n    if (!query || query.trim().length < 2) {\n      return res.status(400).json({\n        error: 'Termo de busca deve ter pelo menos 2 caracteres',\n        code: 'INVALID_SEARCH_TERM'\n      });\n    }\n\n    try {\n      const clients = await ClientService.searchClients(query.trim(), parseInt(limit));\n      res.json({ clients });\n    } catch (error) {\n      console.error('Erro ao buscar clientes:', error);\n      res.status(500).json({\n        error: 'Erro interno do servidor',\n        code: 'CLIENT_SEARCH_ERROR'\n      });\n    }\n  });\n}\n\nmodule.exports = { ClientController };"],"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","ignoreList":[]}