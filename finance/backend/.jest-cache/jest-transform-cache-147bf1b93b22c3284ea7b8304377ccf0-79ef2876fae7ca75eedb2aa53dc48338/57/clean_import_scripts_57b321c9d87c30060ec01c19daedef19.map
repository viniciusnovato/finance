{"version":3,"names":["cov_pksanh39b","actualCoverage","createClient","s","require","path","config","join","__dirname","supabaseUrl","process","env","SUPABASE_URL","supabaseKey","SUPABASE_SERVICE_ROLE_KEY","b","console","error","exit","supabase","cleanImportedData","f","log","paymentsError","from","delete","neq","contractsError","clientsError","verifyCleanup","data","clientsCount","select","count","head","contractsCount","paymentsCount","length","totalRecords","main","module","exports"],"sources":["clean_import_scripts.js"],"sourcesContent":["const { createClient } = require('@supabase/supabase-js');\nconst path = require('path');\nrequire('dotenv').config({ path: path.join(__dirname, '../../.env') });\n\n// Configura√ß√£o do Supabase\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\nif (!supabaseUrl || !supabaseKey) {\n    console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias');\n    process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n/**\n * Limpa todas as tabelas de dados importados\n */\nasync function cleanImportedData() {\n    console.log('üßπ Iniciando limpeza de dados importados...');\n    \n    try {\n        // 1. Limpar pagamentos primeiro (devido √†s foreign keys)\n        console.log('üóëÔ∏è  Limpando tabela payments...');\n        const { error: paymentsError } = await supabase\n            .from('payments')\n            .delete()\n            .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all\n        \n        if (paymentsError) {\n            console.error('‚ùå Erro ao limpar payments:', paymentsError);\n        } else {\n            console.log('‚úÖ Tabela payments limpa');\n        }\n\n        // 2. Limpar contratos\n        console.log('üóëÔ∏è  Limpando tabela contracts...');\n        const { error: contractsError } = await supabase\n            .from('contracts')\n            .delete()\n            .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all\n        \n        if (contractsError) {\n            console.error('‚ùå Erro ao limpar contracts:', contractsError);\n        } else {\n            console.log('‚úÖ Tabela contracts limpa');\n        }\n\n        // 3. Limpar clientes\n        console.log('üóëÔ∏è  Limpando tabela clients...');\n        const { error: clientsError } = await supabase\n            .from('clients')\n            .delete()\n            .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all\n        \n        if (clientsError) {\n            console.error('‚ùå Erro ao limpar clients:', clientsError);\n        } else {\n            console.log('‚úÖ Tabela clients limpa');\n        }\n\n        console.log('üéâ Limpeza conclu√≠da com sucesso!');\n        \n        // Verificar se as tabelas est√£o vazias\n        await verifyCleanup();\n        \n    } catch (error) {\n        console.error('‚ùå Erro durante a limpeza:', error);\n        throw error;\n    }\n}\n\n/**\n * Verifica se a limpeza foi bem-sucedida\n */\nasync function verifyCleanup() {\n    console.log('\\nüîç Verificando limpeza...');\n    \n    try {\n        // Contar registros em cada tabela\n        const { data: clientsCount, error: clientsError } = await supabase\n            .from('clients')\n            .select('id', { count: 'exact', head: true });\n        \n        const { data: contractsCount, error: contractsError } = await supabase\n            .from('contracts')\n            .select('id', { count: 'exact', head: true });\n        \n        const { data: paymentsCount, error: paymentsError } = await supabase\n            .from('payments')\n            .select('id', { count: 'exact', head: true });\n\n        if (clientsError || contractsError || paymentsError) {\n            console.error('‚ùå Erro ao verificar limpeza');\n            return;\n        }\n\n        console.log(`üìä Registros restantes:`);\n        console.log(`   üë• Clientes: ${clientsCount?.length || 0}`);\n        console.log(`   üìÑ Contratos: ${contractsCount?.length || 0}`);\n        console.log(`   üí∞ Pagamentos: ${paymentsCount?.length || 0}`);\n        \n        const totalRecords = (clientsCount?.length || 0) + (contractsCount?.length || 0) + (paymentsCount?.length || 0);\n        \n        if (totalRecords === 0) {\n            console.log('‚úÖ Todas as tabelas est√£o vazias - pronto para nova importa√ß√£o!');\n        } else {\n            console.log('‚ö†Ô∏è  Ainda existem registros nas tabelas');\n        }\n        \n    } catch (error) {\n        console.error('‚ùå Erro ao verificar limpeza:', error);\n    }\n}\n\n/**\n * Fun√ß√£o principal\n */\nasync function main() {\n    try {\n        console.log('üöÄ Iniciando limpeza para nova importa√ß√£o...\\n');\n        \n        // Confirmar se o usu√°rio quer continuar\n        console.log('‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° DELETAR TODOS os dados das tabelas:');\n        console.log('   - clients');\n        console.log('   - contracts'); \n        console.log('   - payments');\n        console.log('\\n   Esta a√ß√£o √© IRREVERS√çVEL!\\n');\n        \n        // Em ambiente de produ√ß√£o, voc√™ pode querer adicionar uma confirma√ß√£o interativa\n        // Por agora, vamos prosseguir automaticamente\n        \n        await cleanImportedData();\n        \n        console.log('\\nüéØ Sistema pronto para nova importa√ß√£o!');\n        \n    } catch (error) {\n        console.error('üí• Erro fatal:', error);\n        process.exit(1);\n    }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n    main();\n}\n\nmodule.exports = { cleanImportedData, verifyCleanup, main };"],"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","ignoreList":[]}