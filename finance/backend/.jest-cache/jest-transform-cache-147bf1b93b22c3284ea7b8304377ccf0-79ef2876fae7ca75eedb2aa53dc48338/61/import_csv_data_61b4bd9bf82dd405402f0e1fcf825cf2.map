{"version":3,"names":["cov_1pv5mx8tv6","actualCoverage","createClient","s","require","fs","csv","path","config","supabaseUrl","process","env","SUPABASE_URL","supabaseKey","SUPABASE_ANON_KEY","b","console","error","exit","supabase","cleanData","data","tableName","f","cleaned","limitString","str","maxLength","String","substring","toNumber","value","num","parseFloat","replace","isNaN","toDate","date","Date","getTime","toISOString","split","first_name","nome","name","last_name","sobrenome","tax_id","document","documento","cpf","cnpj","email","phone","telefone","mobile","celular","birth_date","data_nascimento","address","endereco","city","cidade","postal_code","zip_code","cep","country","pais","notes","observacoes","client_id","branch_id","contract_number","numero_contrato","treatment_description","description","product_description","descricao_produto","total_amount","valor_total","financed_amount","down_payment","entrada","installments","parseInt","parcelas","installment_amount","valor_parcela","start_date","data_inicio","end_date","data_fim","status","created_by","contract_id","installment_number","numero_parcela","amount","valor","due_date","data_vencimento","paid_date","data_pagamento","payment_method","metodo_pagamento","reference_number","numero_referencia","Object","keys","forEach","key","undefined","importCSV","filePath","Promise","resolve","reject","results","errors","imported","log","createReadStream","pipe","on","cleanedData","length","push","batchSize","i","batch","slice","batchNumber","Math","floor","from","insert","select","message","err","main","limit","csvDir","join","__dirname","totalImported","totalErrors","csvFiles","file","table","existsSync","result","module","exports"],"sources":["import_csv_data.js"],"sourcesContent":["const { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst path = require('path');\nrequire('dotenv').config();\n\n// Configura√ß√£o do Supabase\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_ANON_KEY;\n\nif (!supabaseUrl || !supabaseKey) {\n  console.error('‚ùå Vari√°veis de ambiente SUPABASE_URL e SUPABASE_ANON_KEY s√£o obrigat√≥rias');\n  process.exit(1);\n}\n\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// Fun√ß√£o para limpar e mapear dados\nfunction cleanData(data, tableName) {\n  const cleaned = {};\n  \n  // Fun√ß√£o auxiliar para limitar string\n  const limitString = (str, maxLength) => {\n    if (!str) return null;\n    return String(str).substring(0, maxLength);\n  };\n  \n  // Fun√ß√£o auxiliar para converter para n√∫mero\n  const toNumber = (value) => {\n    if (!value || value === '') return null;\n    const num = parseFloat(String(value).replace(',', '.'));\n    return isNaN(num) ? null : num;\n  };\n  \n  // Fun√ß√£o auxiliar para converter data\n  const toDate = (value) => {\n    if (!value || value === '') return null;\n    const date = new Date(value);\n    return isNaN(date.getTime()) ? null : date.toISOString().split('T')[0];\n  };\n  \n  switch (tableName) {\n    case 'clients':\n      // Mapear campos do CSV para o schema da tabela clients\n      cleaned.first_name = limitString(data.first_name || data.nome || data.name, 255);\n      cleaned.last_name = limitString(data.last_name || data.sobrenome, 255);\n      cleaned.tax_id = limitString(data.document || data.documento || data.tax_id || data.cpf || data.cnpj, 50);\n      cleaned.email = limitString(data.email, 255);\n      cleaned.phone = limitString(data.phone || data.telefone, 50);\n      cleaned.mobile = limitString(data.mobile || data.celular, 50);\n      cleaned.birth_date = toDate(data.birth_date || data.data_nascimento);\n      cleaned.address = data.address || data.endereco;\n      cleaned.city = limitString(data.city || data.cidade, 100);\n      cleaned.postal_code = limitString(data.zip_code || data.postal_code || data.cep, 20);\n      cleaned.country = limitString(data.country || data.pais, 100) || 'Portugal';\n      cleaned.notes = data.notes || data.observacoes;\n      break;\n      \n    case 'contracts':\n        // Mapear campos do CSV para o schema da tabela contracts\n        cleaned.client_id = data.client_id;\n        cleaned.branch_id = data.branch_id || '00000000-0000-0000-0000-000000000001'; // Usar filial padr√£o\n        cleaned.contract_number = limitString(data.contract_number || data.numero_contrato, 50);\n        cleaned.treatment_description = data.description || data.product_description || data.descricao_produto || data.treatment_description || 'Tratamento n√£o especificado';\n        cleaned.total_amount = toNumber(data.value || data.total_amount || data.valor_total || data.financed_amount) || 0;\n        cleaned.down_payment = toNumber(data.down_payment || data.entrada) || 0;\n        cleaned.installments = parseInt(data.installments || data.parcelas) || 1;\n        cleaned.installment_amount = toNumber(data.installment_amount || data.valor_parcela) || 0;\n        cleaned.start_date = toDate(data.start_date || data.data_inicio);\n        cleaned.end_date = toDate(data.end_date || data.data_fim);\n        cleaned.status = data.status === 'inactive' ? 'closed' : (data.status || 'active');\n        cleaned.created_by = data.created_by || '00000000-0000-0000-0000-000000000001'; // Usar usu√°rio padr√£o\n        cleaned.notes = data.notes || data.observacoes;\n        // Garantir que down_payment seja pelo menos 30% do total_amount\n        if (cleaned.total_amount > 0 && cleaned.down_payment < cleaned.total_amount * 0.30) {\n          cleaned.down_payment = cleaned.total_amount * 0.30;\n        }\n        break;\n      \n    case 'payments':\n       // Mapear campos do CSV para o schema da tabela payments\n       cleaned.contract_id = data.contract_id;\n       cleaned.installment_number = parseInt(data.installment_number || data.numero_parcela) || 1;\n       cleaned.amount = toNumber(data.amount || data.valor) || 0;\n       cleaned.due_date = toDate(data.due_date || data.data_vencimento);\n       cleaned.paid_date = toDate(data.paid_date || data.data_pagamento);\n       cleaned.status = data.status || 'pending';\n       cleaned.payment_method = data.payment_method || data.metodo_pagamento || 'transfer';\n       cleaned.reference_number = limitString(data.reference_number || data.numero_referencia, 100);\n       cleaned.created_by = data.created_by || '00000000-0000-0000-0000-000000000001'; // Usar usu√°rio padr√£o\n       cleaned.notes = data.notes || data.observacoes;\n       break;\n  }\n  \n  // Remover campos undefined ou null vazios\n  Object.keys(cleaned).forEach(key => {\n    if (cleaned[key] === undefined || cleaned[key] === '') {\n      delete cleaned[key];\n    }\n  });\n  \n  return cleaned;\n}\n\n// Fun√ß√£o para importar dados de um arquivo CSV\nasync function importCSV(filePath, tableName) {\n  return new Promise((resolve, reject) => {\n    const results = [];\n    const errors = [];\n    let imported = 0;\n    \n    console.log(`üìÇ Lendo arquivo: ${filePath}`);\n    \n    fs.createReadStream(filePath)\n      .pipe(csv())\n      .on('data', (data) => {\n        const cleanedData = cleanData(data, tableName);\n        if (Object.keys(cleanedData).length > 0) {\n          results.push(cleanedData);\n        }\n      })\n      .on('end', async () => {\n        console.log(`üìä ${results.length} registros lidos do CSV`);\n        \n        if (results.length === 0) {\n          console.log('‚ö†Ô∏è  Nenhum registro v√°lido encontrado');\n          resolve({ imported: 0, errors: 0 });\n          return;\n        }\n        \n        // Determinar tamanho do lote baseado na tabela\n        const batchSize = tableName === 'payments' ? 10 : 50;\n        \n        // Processar em lotes\n        for (let i = 0; i < results.length; i += batchSize) {\n          const batch = results.slice(i, i + batchSize);\n          const batchNumber = Math.floor(i / batchSize) + 1;\n          \n          try {\n            const { data, error } = await supabase\n              .from(tableName)\n              .insert(batch)\n              .select();\n            \n            if (error) {\n              console.log(`‚ùå Erro no lote ${batchNumber}: ${error.message}`);\n              errors.push({ batch: batchNumber, error: error.message });\n            } else {\n              imported += data ? data.length : batch.length;\n              console.log(`‚úÖ Lote ${batchNumber}: ${batch.length} registros importados`);\n            }\n          } catch (err) {\n            console.log(`‚ùå Erro no lote ${batchNumber}: ${err.message}`);\n            errors.push({ batch: batchNumber, error: err.message });\n          }\n        }\n        \n        resolve({ imported, errors: errors.length });\n      })\n      .on('error', (error) => {\n        console.error(`‚ùå Erro ao ler arquivo ${filePath}:`, error);\n        reject(error);\n      });\n  });\n}\n\n// Fun√ß√£o principal\nasync function main() {\n  try {\n    console.log('üöÄ Iniciando importa√ß√£o dos dados CSV...');\n    \n    // Testar conex√£o\n    console.log('üîó Testando conex√£o com Supabase...');\n    const { data, error } = await supabase.from('clients').select('count').limit(1);\n    if (error) {\n      console.error('‚ùå Erro de conex√£o:', error.message);\n      process.exit(1);\n    }\n    console.log('‚úÖ Conex√£o estabelecida com sucesso!');\n    \n    const csvDir = path.join(__dirname, '../../../importBD');\n    let totalImported = 0;\n    let totalErrors = 0;\n    \n    // Arquivos CSV para importar (ordem importante devido √†s depend√™ncias)\n    const csvFiles = [\n      { file: 'clients.csv', table: 'clients' },\n      { file: 'contracts.csv', table: 'contracts' },\n      { file: 'payments.csv', table: 'payments' }\n    ];\n    \n    for (const { file, table } of csvFiles) {\n      const filePath = path.join(csvDir, file);\n      \n      if (fs.existsSync(filePath)) {\n        console.log(`\\nüìã Importando ${table}...`);\n        const result = await importCSV(filePath, table);\n        console.log(`üìä ${table}: ${result.imported} importados, ${result.errors} erros`);\n        \n        totalImported += result.imported;\n        totalErrors += result.errors;\n      } else {\n        console.log(`‚ö†Ô∏è  Arquivo n√£o encontrado: ${filePath}`);\n      }\n    }\n    \n    console.log('\\nüéâ IMPORTA√á√ÉO CONCLU√çDA!');\n    console.log('==================================================');\n    console.log(`üìä Total de registros importados: ${totalImported}`);\n    console.log(`‚ùå Total de erros: ${totalErrors}`);\n    console.log('==================================================');\n    \n    if (totalErrors > 0) {\n      console.log('‚ö†Ô∏è  Alguns erros ocorreram durante a importa√ß√£o.');\n      console.log('   Verifique os logs acima para mais detalhes.');\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Erro fatal:', error);\n    process.exit(1);\n  }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = { importCSV, cleanData };"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}