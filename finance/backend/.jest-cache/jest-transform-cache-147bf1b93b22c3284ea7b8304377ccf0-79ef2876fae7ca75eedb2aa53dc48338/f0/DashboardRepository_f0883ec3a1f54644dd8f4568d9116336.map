{"version":3,"names":["cov_1p27t16i41","actualCoverage","supabaseAdmin","s","require","getAllRecords","getAllPayments","getAllContracts","getAllClients","DashboardRepository","f","getPaymentsForChart","period","type","startDate","today","Date","b","getFullYear","getMonth","getTime","startDateStr","toISOString","split","data","error","from","select","eq","gte","order","ascending","console","Error","getPaymentsByPeriod","getRecentActivities","limit","recentPayments","paymentsError","Math","floor","recentContracts","contractsError","activities","forEach","payment","push","id","title","status","description","parseFloat","amount","toFixed","contracts","clients","name","date","paid_date","created_at","contract","value","sort","a","slice","getClientsByPeriod","getContractsByPeriod","getRevenueStatsByPeriod","endDate","lte","totalRevenue","reduce","sum","total_revenue","payment_count","length","average_payment","module","exports"],"sources":["DashboardRepository.js"],"sourcesContent":["const { supabaseAdmin } = require('../config/supabase');\nconst { getAllRecords, getAllPayments, getAllContracts, getAllClients } = require('../utils/supabaseHelpers');\n\nclass DashboardRepository {\n  /**\n   * Obter todos os clientes\n   * @returns {Array} Lista de clientes\n   */\n  static async getAllClients() {\n    return await getAllClients();\n  }\n\n  /**\n   * Obter todos os contratos\n   * @returns {Array} Lista de contratos\n   */\n  static async getAllContracts() {\n    return await getAllContracts();\n  }\n\n  /**\n   * Obter todos os pagamentos\n   * @returns {Array} Lista de pagamentos\n   */\n  static async getAllPayments() {\n    return await getAllPayments();\n  }\n\n  /**\n   * Obter pagamentos para gráfico de receita\n   * @param {number} period - Período em meses ou semanas\n   * @param {string} type - Tipo do período (monthly, weekly)\n   * @returns {Array} Lista de pagamentos\n   */\n  static async getPaymentsForChart(period, type) {\n    try {\n      let startDate;\n      const today = new Date();\n      \n      if (type === 'monthly') {\n        startDate = new Date(today.getFullYear(), today.getMonth() - period, 1);\n      } else {\n        startDate = new Date(today.getTime() - (period * 7 * 24 * 60 * 60 * 1000));\n      }\n      \n      const startDateStr = startDate.toISOString().split('T')[0];\n      \n      const { data, error } = await supabaseAdmin\n        .from('payments')\n        .select('*')\n        .eq('status', 'paid')\n        .gte('paid_date', startDateStr)\n        .order('paid_date', { ascending: true });\n\n      if (error) {\n        console.error('Erro ao buscar pagamentos para gráfico:', error);\n        throw new Error('Erro ao buscar dados do gráfico');\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Erro no DashboardRepository.getPaymentsForChart:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter pagamentos por período\n   * @param {string} startDate - Data de início\n   * @returns {Array} Lista de pagamentos\n   */\n  static async getPaymentsByPeriod(startDate) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('payments')\n        .select('*')\n        .gte('created_at', startDate)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Erro ao buscar pagamentos por período:', error);\n        throw new Error('Erro ao buscar pagamentos');\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Erro no DashboardRepository.getPaymentsByPeriod:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter atividades recentes\n   * @param {number} limit - Limite de registros\n   * @returns {Array} Lista de atividades\n   */\n  static async getRecentActivities(limit) {\n    try {\n      // Buscar pagamentos recentes\n      const { data: recentPayments, error: paymentsError } = await supabaseAdmin\n        .from('payments')\n        .select(`\n          id,\n          amount,\n          status,\n          paid_date,\n          created_at,\n          contracts (\n            id,\n            clients (\n              name\n            )\n          )\n        `)\n        .order('created_at', { ascending: false })\n        .limit(Math.floor(limit / 2));\n\n      if (paymentsError) {\n        console.error('Erro ao buscar pagamentos recentes:', paymentsError);\n      }\n\n      // Buscar contratos recentes\n      const { data: recentContracts, error: contractsError } = await supabaseAdmin\n        .from('contracts')\n        .select(`\n          id,\n          value,\n          status,\n          created_at,\n          clients (\n            name\n          )\n        `)\n        .order('created_at', { ascending: false })\n        .limit(Math.floor(limit / 2));\n\n      if (contractsError) {\n        console.error('Erro ao buscar contratos recentes:', contractsError);\n      }\n\n      // Combinar e formatar atividades\n      const activities = [];\n\n      // Adicionar pagamentos como atividades\n      if (recentPayments) {\n        recentPayments.forEach(payment => {\n          activities.push({\n            id: `payment_${payment.id}`,\n            type: 'payment',\n            title: `Pagamento ${payment.status === 'paid' ? 'realizado' : 'criado'}`,\n            description: `R$ ${parseFloat(payment.amount || 0).toFixed(2)} - ${payment.contracts?.clients?.name || 'Cliente não identificado'}`,\n            date: payment.paid_date || payment.created_at,\n            status: payment.status,\n            amount: payment.amount\n          });\n        });\n      }\n\n      // Adicionar contratos como atividades\n      if (recentContracts) {\n        recentContracts.forEach(contract => {\n          activities.push({\n            id: `contract_${contract.id}`,\n            type: 'contract',\n            title: 'Novo contrato criado',\n            description: `R$ ${parseFloat(contract.value || 0).toFixed(2)} - ${contract.clients?.name || 'Cliente não identificado'}`,\n            date: contract.created_at,\n            status: contract.status,\n            amount: contract.value\n          });\n        });\n      }\n\n      // Ordenar por data e limitar\n      return activities\n        .sort((a, b) => new Date(b.date) - new Date(a.date))\n        .slice(0, limit);\n\n    } catch (error) {\n      console.error('Erro no DashboardRepository.getRecentActivities:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Obter clientes por período\n   * @param {string} startDate - Data de início\n   * @returns {Array} Lista de clientes\n   */\n  static async getClientsByPeriod(startDate) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('clients')\n        .select('*')\n        .gte('created_at', startDate)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Erro ao buscar clientes por período:', error);\n        throw new Error('Erro ao buscar clientes');\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Erro no DashboardRepository.getClientsByPeriod:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter contratos por período\n   * @param {string} startDate - Data de início\n   * @returns {Array} Lista de contratos\n   */\n  static async getContractsByPeriod(startDate) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('contracts')\n        .select('*')\n        .gte('created_at', startDate)\n        .order('created_at', { ascending: false });\n\n      if (error) {\n        console.error('Erro ao buscar contratos por período:', error);\n        throw new Error('Erro ao buscar contratos');\n      }\n\n      return data || [];\n    } catch (error) {\n      console.error('Erro no DashboardRepository.getContractsByPeriod:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter estatísticas de receita por período\n   * @param {string} startDate - Data de início\n   * @param {string} endDate - Data de fim\n   * @returns {Object} Estatísticas de receita\n   */\n  static async getRevenueStatsByPeriod(startDate, endDate) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('payments')\n        .select('amount, paid_date')\n        .eq('status', 'paid')\n        .gte('paid_date', startDate)\n        .lte('paid_date', endDate);\n\n      if (error) {\n        console.error('Erro ao buscar estatísticas de receita:', error);\n        throw new Error('Erro ao buscar estatísticas de receita');\n      }\n\n      const totalRevenue = (data || []).reduce((sum, payment) => {\n        return sum + parseFloat(payment.amount || 0);\n      }, 0);\n\n      return {\n        total_revenue: totalRevenue,\n        payment_count: (data || []).length,\n        average_payment: (data || []).length > 0 ? totalRevenue / (data || []).length : 0\n      };\n    } catch (error) {\n      console.error('Erro no DashboardRepository.getRevenueStatsByPeriod:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = { DashboardRepository };"],"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","ignoreList":[]}