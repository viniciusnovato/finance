57ebbc320e32e3517e1419d90364c0aa
/* istanbul ignore next */
function cov_1upt9g6ux5() {
  var path = "/Users/insitutoareluna/Documents/repFinance/finance/backend/src/scripts/batch_import.js";
  var hash = "407a185c0d2071cd70a94d3506c4b11a9b2d2771";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/insitutoareluna/Documents/repFinance/finance/backend/src/scripts/batch_import.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 18
        },
        end: {
          line: 1,
          column: 42
        }
      },
      "1": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 41,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 11,
          column: 9
        }
      },
      "3": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 54
        }
      },
      "4": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 63
        }
      },
      "5": {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "6": {
        start: {
          line: 18,
          column: 21
        },
        end: {
          line: 18,
          column: 23
        }
      },
      "7": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 22,
          column: 11
        }
      },
      "8": {
        start: {
          line: 21,
          column: 12
        },
        end: {
          line: 21,
          column: 38
        }
      },
      "9": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 26,
          column: 11
        }
      },
      "10": {
        start: {
          line: 25,
          column: 12
        },
        end: {
          line: 25,
          column: 38
        }
      },
      "11": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "12": {
        start: {
          line: 29,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "13": {
        start: {
          line: 30,
          column: 16
        },
        end: {
          line: 36,
          column: 17
        }
      },
      "14": {
        start: {
          line: 31,
          column: 35
        },
        end: {
          line: 31,
          column: 60
        }
      },
      "15": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 36
        }
      },
      "16": {
        start: {
          line: 34,
          column: 20
        },
        end: {
          line: 34,
          column: 55
        }
      },
      "17": {
        start: {
          line: 35,
          column: 20
        },
        end: {
          line: 35,
          column: 88
        }
      },
      "18": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 78
        }
      },
      "19": {
        start: {
          line: 43,
          column: 11
        },
        end: {
          line: 43,
          column: 24
        }
      },
      "20": {
        start: {
          line: 44,
          column: 13
        },
        end: {
          line: 44,
          column: 28
        }
      },
      "21": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 67
        }
      },
      "22": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 73
        }
      },
      "23": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 55
        }
      },
      "24": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 54,
          column: 71
        }
      },
      "25": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 20
        }
      },
      "26": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 72
        }
      },
      "27": {
        start: {
          line: 61,
          column: 24
        },
        end: {
          line: 61,
          column: 25
        }
      },
      "28": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "29": {
        start: {
          line: 63,
          column: 17
        },
        end: {
          line: 63,
          column: 18
        }
      },
      "30": {
        start: {
          line: 64,
          column: 28
        },
        end: {
          line: 64,
          column: 33
        }
      },
      "31": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 65,
          column: 37
        }
      },
      "32": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 45
        }
      },
      "33": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "34": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 84
        }
      },
      "35": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 87,
          column: 13
        }
      },
      "36": {
        start: {
          line: 74,
          column: 31
        },
        end: {
          line: 77,
          column: 18
        }
      },
      "37": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 75
        }
      },
      "38": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 36
        }
      },
      "39": {
        start: {
          line: 83,
          column: 16
        },
        end: {
          line: 83,
          column: 71
        }
      },
      "40": {
        start: {
          line: 83,
          column: 45
        },
        end: {
          line: 83,
          column: 69
        }
      },
      "41": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 79
        }
      },
      "42": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 95
        }
      },
      "43": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      "44": {
        start: {
          line: 95,
          column: 28
        },
        end: {
          line: 101,
          column: 10
        }
      },
      "45": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 51
        }
      },
      "46": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 58
        }
      },
      "47": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 74
        }
      },
      "48": {
        start: {
          line: 112,
          column: 0
        },
        end: {
          line: 114,
          column: 1
        }
      },
      "49": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 113,
          column: 44
        }
      },
      "50": {
        start: {
          line: 116,
          column: 0
        },
        end: {
          line: 116,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "executeMCP",
        decl: {
          start: {
            line: 4,
            column: 9
          },
          end: {
            line: 4,
            column: 19
          }
        },
        loc: {
          start: {
            line: 4,
            column: 36
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 5,
            column: 23
          },
          end: {
            line: 5,
            column: 24
          }
        },
        loc: {
          start: {
            line: 5,
            column: 44
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 5
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 32
          },
          end: {
            line: 20,
            column: 33
          }
        },
        loc: {
          start: {
            line: 20,
            column: 42
          },
          end: {
            line: 22,
            column: 9
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 32
          },
          end: {
            line: 24,
            column: 33
          }
        },
        loc: {
          start: {
            line: 24,
            column: 42
          },
          end: {
            line: 26,
            column: 9
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 28,
            column: 26
          },
          end: {
            line: 28,
            column: 27
          }
        },
        loc: {
          start: {
            line: 28,
            column: 36
          },
          end: {
            line: 40,
            column: 9
          }
        },
        line: 28
      },
      "5": {
        name: "importAllClients",
        decl: {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 46,
            column: 31
          }
        },
        loc: {
          start: {
            line: 46,
            column: 34
          },
          end: {
            line: 109,
            column: 1
          }
        },
        line: 46
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 83,
            column: 34
          },
          end: {
            line: 83,
            column: 35
          }
        },
        loc: {
          start: {
            line: 83,
            column: 45
          },
          end: {
            line: 83,
            column: 69
          }
        },
        line: 83
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 12
          },
          end: {
            line: 39,
            column: 13
          }
        }, {
          start: {
            line: 37,
            column: 19
          },
          end: {
            line: 39,
            column: 13
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "2": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 70,
            column: 17
          }
        }, {
          start: {
            line: 70,
            column: 21
          },
          end: {
            line: 70,
            column: 58
          }
        }],
        line: 70
      },
      "3": {
        loc: {
          start: {
            line: 112,
            column: 0
          },
          end: {
            line: 114,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 0
          },
          end: {
            line: 114,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "407a185c0d2071cd70a94d3506c4b11a9b2d2771"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1upt9g6ux5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1upt9g6ux5();
const {
  spawn
} =
/* istanbul ignore next */
(cov_1upt9g6ux5().s[0]++, require('child_process'));

// Função para executar comando MCP
function executeMCP(toolName, args) {
  /* istanbul ignore next */
  cov_1upt9g6ux5().f[0]++;
  cov_1upt9g6ux5().s[1]++;
  return new Promise((resolve, reject) => {
    /* istanbul ignore next */
    cov_1upt9g6ux5().f[1]++;
    const mcpArgs =
    /* istanbul ignore next */
    (cov_1upt9g6ux5().s[2]++, ['run_mcp', '--server-name', 'mcp.config.usrlocalmcp.supabase-mcp-finance', '--tool-name', toolName, '--args', JSON.stringify(args)]);
    /* istanbul ignore next */
    cov_1upt9g6ux5().s[3]++;
    console.log(`🔄 Executando MCP: ${toolName}`);
    const child =
    /* istanbul ignore next */
    (cov_1upt9g6ux5().s[4]++, spawn('trae', mcpArgs, {
      stdio: 'pipe'
    }));
    let stdout =
    /* istanbul ignore next */
    (cov_1upt9g6ux5().s[5]++, '');
    let stderr =
    /* istanbul ignore next */
    (cov_1upt9g6ux5().s[6]++, '');
    /* istanbul ignore next */
    cov_1upt9g6ux5().s[7]++;
    child.stdout.on('data', data => {
      /* istanbul ignore next */
      cov_1upt9g6ux5().f[2]++;
      cov_1upt9g6ux5().s[8]++;
      stdout += data.toString();
    });
    /* istanbul ignore next */
    cov_1upt9g6ux5().s[9]++;
    child.stderr.on('data', data => {
      /* istanbul ignore next */
      cov_1upt9g6ux5().f[3]++;
      cov_1upt9g6ux5().s[10]++;
      stderr += data.toString();
    });
    /* istanbul ignore next */
    cov_1upt9g6ux5().s[11]++;
    child.on('close', code => {
      /* istanbul ignore next */
      cov_1upt9g6ux5().f[4]++;
      cov_1upt9g6ux5().s[12]++;
      if (code === 0) {
        /* istanbul ignore next */
        cov_1upt9g6ux5().b[0][0]++;
        cov_1upt9g6ux5().s[13]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_1upt9g6ux5().s[14]++, JSON.parse(stdout.trim()));
          /* istanbul ignore next */
          cov_1upt9g6ux5().s[15]++;
          resolve(result);
        } catch (error) {
          /* istanbul ignore next */
          cov_1upt9g6ux5().s[16]++;
          console.log('Raw stdout:', stdout);
          /* istanbul ignore next */
          cov_1upt9g6ux5().s[17]++;
          reject(new Error(`Erro ao parsear resposta MCP: ${error.message}`));
        }
      } else {
        /* istanbul ignore next */
        cov_1upt9g6ux5().b[0][1]++;
        cov_1upt9g6ux5().s[18]++;
        reject(new Error(`MCP falhou com código ${code}: ${stderr}`));
      }
    });
  });
}
const fs =
/* istanbul ignore next */
(cov_1upt9g6ux5().s[19]++, require('fs'));
const path =
/* istanbul ignore next */
(cov_1upt9g6ux5().s[20]++, require('path'));
async function importAllClients() {
  /* istanbul ignore next */
  cov_1upt9g6ux5().f[5]++;
  cov_1upt9g6ux5().s[21]++;
  console.log('🚀 Iniciando importação completa de clientes...');

  // Ler o arquivo SQL completo
  const sqlFile =
  /* istanbul ignore next */
  (cov_1upt9g6ux5().s[22]++, path.join(__dirname, '../../clients_import_full.sql'));
  const sqlContent =
  /* istanbul ignore next */
  (cov_1upt9g6ux5().s[23]++, fs.readFileSync(sqlFile, 'utf8'));

  // Dividir em lotes (cada lote começa com "-- Lote")
  const batches =
  /* istanbul ignore next */
  (cov_1upt9g6ux5().s[24]++, sqlContent.split(/-- Lote \d+\/\d+ - \d+ clientes/));

  // Remover o primeiro elemento vazio
  /* istanbul ignore next */
  cov_1upt9g6ux5().s[25]++;
  batches.shift();
  /* istanbul ignore next */
  cov_1upt9g6ux5().s[26]++;
  console.log(`📦 Encontrados ${batches.length} lotes para importar`);
  let totalImported =
  /* istanbul ignore next */
  (cov_1upt9g6ux5().s[27]++, 0);
  /* istanbul ignore next */
  cov_1upt9g6ux5().s[28]++;
  for (let i =
  /* istanbul ignore next */
  (cov_1upt9g6ux5().s[29]++, 0); i < batches.length; i++) {
    const batchNumber =
    /* istanbul ignore next */
    (cov_1upt9g6ux5().s[30]++, i + 1);
    let batch =
    /* istanbul ignore next */
    (cov_1upt9g6ux5().s[31]++, batches[i].trim());

    // Remover o último ponto e vírgula duplo se existir
    /* istanbul ignore next */
    cov_1upt9g6ux5().s[32]++;
    batch = batch.replace(/;;\s*$/, ';');
    /* istanbul ignore next */
    cov_1upt9g6ux5().s[33]++;
    if (
    /* istanbul ignore next */
    (cov_1upt9g6ux5().b[2][0]++, batch) &&
    /* istanbul ignore next */
    (cov_1upt9g6ux5().b[2][1]++, batch.includes('INSERT INTO clients'))) {
      /* istanbul ignore next */
      cov_1upt9g6ux5().b[1][0]++;
      cov_1upt9g6ux5().s[34]++;
      console.log(`\n📥 Importando lote ${batchNumber}/${batches.length}...`);
      /* istanbul ignore next */
      cov_1upt9g6ux5().s[35]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_1upt9g6ux5().s[36]++, await executeMCP('execute_sql', {
          project_id: 'sxbslulfitfsijqrzljd',
          query: batch
        }));
        /* istanbul ignore next */
        cov_1upt9g6ux5().s[37]++;
        console.log(`✅ Lote ${batchNumber} importado com sucesso`);
        /* istanbul ignore next */
        cov_1upt9g6ux5().s[38]++;
        totalImported += 50; // Cada lote tem 50 clientes (exceto possivelmente o último)

        // Pausa entre lotes para não sobrecarregar
        /* istanbul ignore next */
        cov_1upt9g6ux5().s[39]++;
        await new Promise(resolve => {
          /* istanbul ignore next */
          cov_1upt9g6ux5().f[6]++;
          cov_1upt9g6ux5().s[40]++;
          return setTimeout(resolve, 200);
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_1upt9g6ux5().s[41]++;
        console.error(`❌ Erro no lote ${batchNumber}:`, error.message);
      }
    } else
    /* istanbul ignore next */
    {
      cov_1upt9g6ux5().b[1][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1upt9g6ux5().s[42]++;
  console.log(`\n🎉 Importação concluída! Tentativa de importar ~${totalImported} clientes`);

  // Verificar quantos foram realmente importados
  /* istanbul ignore next */
  cov_1upt9g6ux5().s[43]++;
  try {
    const countResult =
    /* istanbul ignore next */
    (cov_1upt9g6ux5().s[44]++, await executeMCP('execute_sql', {
      project_id: 'sxbslulfitfsijqrzljd',
      query: `SELECT 
                COUNT(*) as total_clients,
                COUNT(CASE WHEN external_id LIKE 'bd_%' THEN 1 END) as imported_clients
            FROM clients;`
    }));
    /* istanbul ignore next */
    cov_1upt9g6ux5().s[45]++;
    console.log('\n📊 Status final do banco:');
    /* istanbul ignore next */
    cov_1upt9g6ux5().s[46]++;
    console.log(JSON.stringify(countResult, null, 2));
  } catch (error) {
    /* istanbul ignore next */
    cov_1upt9g6ux5().s[47]++;
    console.error('❌ Erro ao verificar status final:', error.message);
  }
}

// Executar se chamado diretamente
/* istanbul ignore next */
cov_1upt9g6ux5().s[48]++;
if (require.main === module) {
  /* istanbul ignore next */
  cov_1upt9g6ux5().b[3][0]++;
  cov_1upt9g6ux5().s[49]++;
  importAllClients().catch(console.error);
} else
/* istanbul ignore next */
{
  cov_1upt9g6ux5().b[3][1]++;
}
cov_1upt9g6ux5().s[50]++;
module.exports = {
  importAllClients
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,