{"version":3,"names":["cov_1upt9g6ux5","actualCoverage","spawn","s","require","executeMCP","toolName","args","f","Promise","resolve","reject","mcpArgs","JSON","stringify","console","log","child","stdio","stdout","stderr","on","data","toString","code","b","result","parse","trim","error","Error","message","fs","path","importAllClients","sqlFile","join","__dirname","sqlContent","readFileSync","batches","split","shift","length","totalImported","i","batchNumber","batch","replace","includes","project_id","query","setTimeout","countResult","main","module","catch","exports"],"sources":["batch_import.js"],"sourcesContent":["const { spawn } = require('child_process');\n\n// Fun√ß√£o para executar comando MCP\nfunction executeMCP(toolName, args) {\n    return new Promise((resolve, reject) => {\n        const mcpArgs = [\n            'run_mcp',\n            '--server-name', 'mcp.config.usrlocalmcp.supabase-mcp-finance',\n            '--tool-name', toolName,\n            '--args', JSON.stringify(args)\n        ];\n        \n        console.log(`üîÑ Executando MCP: ${toolName}`);\n        \n        const child = spawn('trae', mcpArgs, { stdio: 'pipe' });\n        \n        let stdout = '';\n        let stderr = '';\n        \n        child.stdout.on('data', (data) => {\n            stdout += data.toString();\n        });\n        \n        child.stderr.on('data', (data) => {\n            stderr += data.toString();\n        });\n        \n        child.on('close', (code) => {\n            if (code === 0) {\n                try {\n                    const result = JSON.parse(stdout.trim());\n                    resolve(result);\n                } catch (error) {\n                    console.log('Raw stdout:', stdout);\n                    reject(new Error(`Erro ao parsear resposta MCP: ${error.message}`));\n                }\n            } else {\n                reject(new Error(`MCP falhou com c√≥digo ${code}: ${stderr}`));\n            }\n        });\n    });\n}\nconst fs = require('fs');\nconst path = require('path');\n\nasync function importAllClients() {\n    console.log('üöÄ Iniciando importa√ß√£o completa de clientes...');\n    \n    // Ler o arquivo SQL completo\n    const sqlFile = path.join(__dirname, '../../clients_import_full.sql');\n    const sqlContent = fs.readFileSync(sqlFile, 'utf8');\n    \n    // Dividir em lotes (cada lote come√ßa com \"-- Lote\")\n    const batches = sqlContent.split(/-- Lote \\d+\\/\\d+ - \\d+ clientes/);\n    \n    // Remover o primeiro elemento vazio\n    batches.shift();\n    \n    console.log(`üì¶ Encontrados ${batches.length} lotes para importar`);\n    \n    let totalImported = 0;\n    \n    for (let i = 0; i < batches.length; i++) {\n        const batchNumber = i + 1;\n        let batch = batches[i].trim();\n        \n        // Remover o √∫ltimo ponto e v√≠rgula duplo se existir\n        batch = batch.replace(/;;\\s*$/, ';');\n        \n        if (batch && batch.includes('INSERT INTO clients')) {\n            console.log(`\\nüì• Importando lote ${batchNumber}/${batches.length}...`);\n            \n            try {\n                const result = await executeMCP('execute_sql', {\n                    project_id: 'sxbslulfitfsijqrzljd',\n                    query: batch\n                });\n                \n                console.log(`‚úÖ Lote ${batchNumber} importado com sucesso`);\n                totalImported += 50; // Cada lote tem 50 clientes (exceto possivelmente o √∫ltimo)\n                \n                // Pausa entre lotes para n√£o sobrecarregar\n                await new Promise(resolve => setTimeout(resolve, 200));\n                \n            } catch (error) {\n                console.error(`‚ùå Erro no lote ${batchNumber}:`, error.message);\n            }\n        }\n    }\n    \n    console.log(`\\nüéâ Importa√ß√£o conclu√≠da! Tentativa de importar ~${totalImported} clientes`);\n    \n    // Verificar quantos foram realmente importados\n    try {\n        const countResult = await executeMCP('execute_sql', {\n            project_id: 'sxbslulfitfsijqrzljd',\n            query: `SELECT \n                COUNT(*) as total_clients,\n                COUNT(CASE WHEN external_id LIKE 'bd_%' THEN 1 END) as imported_clients\n            FROM clients;`\n        });\n        \n        console.log('\\nüìä Status final do banco:');\n        console.log(JSON.stringify(countResult, null, 2));\n        \n    } catch (error) {\n        console.error('‚ùå Erro ao verificar status final:', error.message);\n    }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n    importAllClients().catch(console.error);\n}\n\nmodule.exports = { importAllClients };"],"mappingseY;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAfZ,MAAM;EAAEE;AAAM,CAAC;AAAA;AAAA,CAAAF,cAAA,GAAAG,CAAA,OAAGC,OAAO,CAAC,eAAe,CAAC;;AAE1C;AACA,SAASC,UAAUA,CAACC,QAAQ,EAAEC,IAAI,EAAE;EAAA;EAAAP,cAAA,GAAAQ,CAAA;EAAAR,cAAA,GAAAG,CAAA;EAChC,OAAO,IAAIM,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAAA;IAAAX,cAAA,GAAAQ,CAAA;IACpC,MAAMI,OAAO;IAAA;IAAA,CAAAZ,cAAA,GAAAG,CAAA,OAAG,CACZ,SAAS,EACT,eAAe,EAAE,6CAA6C,EAC9D,aAAa,EAAEG,QAAQ,EACvB,QAAQ,EAAEO,IAAI,CAACC,SAAS,CAACP,IAAI,CAAC,CACjC;IAAC;IAAAP,cAAA,GAAAG,CAAA;IAEFY,OAAO,CAACC,GAAG,CAAC,sBAAsBV,QAAQ,EAAE,CAAC;IAE7C,MAAMW,KAAK;IAAA;IAAA,CAAAjB,cAAA,GAAAG,CAAA,OAAGD,KAAK,CAAC,MAAM,EAAEU,OAAO,EAAE;MAAEM,KAAK,EAAE;IAAO,CAAC,CAAC;IAEvD,IAAIC,MAAM;IAAA;IAAA,CAAAnB,cAAA,GAAAG,CAAA,OAAG,EAAE;IACf,IAAIiB,MAAM;IAAA;IAAA,CAAApB,cAAA,GAAAG,CAAA,OAAG,EAAE;IAAC;IAAAH,cAAA,GAAAG,CAAA;IAEhBc,KAAK,CAACE,MAAM,CAACE,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAK;MAAA;MAAAtB,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAG,CAAA;MAC9BgB,MAAM,IAAIG,IAAI,CAACC,QAAQ,CAAC,CAAC;IAC7B,CAAC,CAAC;IAAC;IAAAvB,cAAA,GAAAG,CAAA;IAEHc,KAAK,CAACG,MAAM,CAACC,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAK;MAAA;MAAAtB,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAG,CAAA;MAC9BiB,MAAM,IAAIE,IAAI,CAACC,QAAQ,CAAC,CAAC;IAC7B,CAAC,CAAC;IAAC;IAAAvB,cAAA,GAAAG,CAAA;IAEHc,KAAK,CAACI,EAAE,CAAC,OAAO,EAAGG,IAAI,IAAK;MAAA;MAAAxB,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAG,CAAA;MACxB,IAAIqB,IAAI,KAAK,CAAC,EAAE;QAAA;QAAAxB,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QACZ,IAAI;UACA,MAAMuB,MAAM;UAAA;UAAA,CAAA1B,cAAA,GAAAG,CAAA,QAAGU,IAAI,CAACc,KAAK,CAACR,MAAM,CAACS,IAAI,CAAC,CAAC,CAAC;UAAC;UAAA5B,cAAA,GAAAG,CAAA;UACzCO,OAAO,CAACgB,MAAM,CAAC;QACnB,CAAC,CAAC,OAAOG,KAAK,EAAE;UAAA;UAAA7B,cAAA,GAAAG,CAAA;UACZY,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEG,MAAM,CAAC;UAAC;UAAAnB,cAAA,GAAAG,CAAA;UACnCQ,MAAM,CAAC,IAAImB,KAAK,CAAC,iCAAiCD,KAAK,CAACE,OAAO,EAAE,CAAC,CAAC;QACvE;MACJ,CAAC,MAAM;QAAA;QAAA/B,cAAA,GAAAyB,CAAA;QAAAzB,cAAA,GAAAG,CAAA;QACHQ,MAAM,CAAC,IAAImB,KAAK,CAAC,yBAAyBN,IAAI,KAAKJ,MAAM,EAAE,CAAC,CAAC;MACjE;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AACA,MAAMY,EAAE;AAAA;AAAA,CAAAhC,cAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAM6B,IAAI;AAAA;AAAA,CAAAjC,cAAA,GAAAG,CAAA,QAAGC,OAAO,CAAC,MAAM,CAAC;AAE5B,eAAe8B,gBAAgBA,CAAA,EAAG;EAAA;EAAAlC,cAAA,GAAAQ,CAAA;EAAAR,cAAA,GAAAG,CAAA;EAC9BY,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;;EAE9D;EACA,MAAMmB,OAAO;EAAA;EAAA,CAAAnC,cAAA,GAAAG,CAAA,QAAG8B,IAAI,CAACG,IAAI,CAACC,SAAS,EAAE,+BAA+B,CAAC;EACrE,MAAMC,UAAU;EAAA;EAAA,CAAAtC,cAAA,GAAAG,CAAA,QAAG6B,EAAE,CAACO,YAAY,CAACJ,OAAO,EAAE,MAAM,CAAC;;EAEnD;EACA,MAAMK,OAAO;EAAA;EAAA,CAAAxC,cAAA,GAAAG,CAAA,QAAGmC,UAAU,CAACG,KAAK,CAAC,iCAAiC,CAAC;;EAEnE;EAAA;EAAAzC,cAAA,GAAAG,CAAA;EACAqC,OAAO,CAACE,KAAK,CAAC,CAAC;EAAC;EAAA1C,cAAA,GAAAG,CAAA;EAEhBY,OAAO,CAACC,GAAG,CAAC,kBAAkBwB,OAAO,CAACG,MAAM,sBAAsB,CAAC;EAEnE,IAAIC,aAAa;EAAA;EAAA,CAAA5C,cAAA,GAAAG,CAAA,QAAG,CAAC;EAAC;EAAAH,cAAA,GAAAG,CAAA;EAEtB,KAAK,IAAI0C,CAAC;EAAA;EAAA,CAAA7C,cAAA,GAAAG,CAAA,QAAG,CAAC,GAAE0C,CAAC,GAAGL,OAAO,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAE;IACrC,MAAMC,WAAW;IAAA;IAAA,CAAA9C,cAAA,GAAAG,CAAA,QAAG0C,CAAC,GAAG,CAAC;IACzB,IAAIE,KAAK;IAAA;IAAA,CAAA/C,cAAA,GAAAG,CAAA,QAAGqC,OAAO,CAACK,CAAC,CAAC,CAACjB,IAAI,CAAC,CAAC;;IAE7B;IAAA;IAAA5B,cAAA,GAAAG,CAAA;IACA4C,KAAK,GAAGA,KAAK,CAACC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC;IAAC;IAAAhD,cAAA,GAAAG,CAAA;IAErC;IAAI;IAAA,CAAAH,cAAA,GAAAyB,CAAA,UAAAsB,KAAK;IAAA;IAAA,CAAA/C,cAAA,GAAAyB,CAAA,UAAIsB,KAAK,CAACE,QAAQ,CAAC,qBAAqB,CAAC,GAAE;MAAA;MAAAjD,cAAA,GAAAyB,CAAA;MAAAzB,cAAA,GAAAG,CAAA;MAChDY,OAAO,CAACC,GAAG,CAAC,wBAAwB8B,WAAW,IAAIN,OAAO,CAACG,MAAM,KAAK,CAAC;MAAC;MAAA3C,cAAA,GAAAG,CAAA;MAExE,IAAI;QACA,MAAMuB,MAAM;QAAA;QAAA,CAAA1B,cAAA,GAAAG,CAAA,QAAG,MAAME,UAAU,CAAC,aAAa,EAAE;UAC3C6C,UAAU,EAAE,sBAAsB;UAClCC,KAAK,EAAEJ;QACX,CAAC,CAAC;QAAC;QAAA/C,cAAA,GAAAG,CAAA;QAEHY,OAAO,CAACC,GAAG,CAAC,UAAU8B,WAAW,wBAAwB,CAAC;QAAC;QAAA9C,cAAA,GAAAG,CAAA;QAC3DyC,aAAa,IAAI,EAAE,CAAC,CAAC;;QAErB;QAAA;QAAA5C,cAAA,GAAAG,CAAA;QACA,MAAM,IAAIM,OAAO,CAACC,OAAO,IAAI;UAAA;UAAAV,cAAA,GAAAQ,CAAA;UAAAR,cAAA,GAAAG,CAAA;UAAA,OAAAiD,UAAU,CAAC1C,OAAO,EAAE,GAAG,CAAC;QAAD,CAAC,CAAC;MAE1D,CAAC,CAAC,OAAOmB,KAAK,EAAE;QAAA;QAAA7B,cAAA,GAAAG,CAAA;QACZY,OAAO,CAACc,KAAK,CAAC,kBAAkBiB,WAAW,GAAG,EAAEjB,KAAK,CAACE,OAAO,CAAC;MAClE;IACJ,CAAC;IAAA;IAAA;MAAA/B,cAAA,GAAAyB,CAAA;IAAA;EACL;EAAC;EAAAzB,cAAA,GAAAG,CAAA;EAEDY,OAAO,CAACC,GAAG,CAAC,qDAAqD4B,aAAa,WAAW,CAAC;;EAE1F;EAAA;EAAA5C,cAAA,GAAAG,CAAA;EACA,IAAI;IACA,MAAMkD,WAAW;IAAA;IAAA,CAAArD,cAAA,GAAAG,CAAA,QAAG,MAAME,UAAU,CAAC,aAAa,EAAE;MAChD6C,UAAU,EAAE,sBAAsB;MAClCC,KAAK,EAAE;AACnB;AACA;AACA;IACQ,CAAC,CAAC;IAAC;IAAAnD,cAAA,GAAAG,CAAA;IAEHY,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAAC;IAAAhB,cAAA,GAAAG,CAAA;IAC3CY,OAAO,CAACC,GAAG,CAACH,IAAI,CAACC,SAAS,CAACuC,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;EAErD,CAAC,CAAC,OAAOxB,KAAK,EAAE;IAAA;IAAA7B,cAAA,GAAAG,CAAA;IACZY,OAAO,CAACc,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAACE,OAAO,CAAC;EACrE;AACJ;;AAEA;AAAA;AAAA/B,cAAA,GAAAG,CAAA;AACA,IAAIC,OAAO,CAACkD,IAAI,KAAKC,MAAM,EAAE;EAAA;EAAAvD,cAAA,GAAAyB,CAAA;EAAAzB,cAAA,GAAAG,CAAA;EACzB+B,gBAAgB,CAAC,CAAC,CAACsB,KAAK,CAACzC,OAAO,CAACc,KAAK,CAAC;AAC3C,CAAC;AAAA;AAAA;EAAA7B,cAAA,GAAAyB,CAAA;AAAA;AAAAzB,cAAA,GAAAG,CAAA;AAEDoD,MAAM,CAACE,OAAO,GAAG;EAAEvB;AAAiB,CAAC","ignoreList":[]}