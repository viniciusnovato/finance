{"version":3,"names":["cov_2e9f256gqr","actualCoverage","ClientRepository","s","require","ValidationHelper","PaginationDefaults","SearchDefaults","ValidSortFields","ValidSortOrders","ClientServiceRefactored","findClientsWithPagination","searchOptions","f","validatedOptions","_validateSearchOptions","getClients","findClientById","clientId","_validateClientId","getClientById","createNewClient","clientData","processedData","_processClientDataForCreation","_validateClientUniqueness","createClient","updateExistingClient","updateData","_processClientDataForUpdate","_hasUniqueFieldsToUpdate","b","_validateClientUniquenessForUpdate","updateClient","removeClientById","_validateClientCanBeDeleted","deleteClient","findClientContracts","paginationOptions","_validatePaginationOptions","getClientContracts","findClientPayments","getClientPayments","searchClientsByTerm","searchTerm","resultLimit","DEFAULT_SEARCH_LIMIT","_validateSearchTerm","_validateSearchLimit","sanitizedTerm","trim","searchClients","getClientStatistics","getClientStats","length","Error","options","page","limit","search","status","sortBy","sortOrder","MIN_LIMIT","MAX_LIMIT","CLIENTS","includes","join","trimmedTerm","MIN_SEARCH_LENGTH","MAX_SEARCH_LENGTH","Number","isInteger","requiredFields","field","_sanitizeClientData","isUpdate","sanitized","textFields","undefined","trimmed","email","isValidEmail","phone","isValidPhone","directFields","existingClient","findByEmail","document_number","findByDocument","id","hasActiveContracts","module","exports"],"sources":["ClientServiceRefactored.js"],"sourcesContent":["const { ClientRepository } = require('../repositories/ClientRepository');\nconst { ValidationHelper } = require('../utils/validationHelper');\nconst { PaginationDefaults, SearchDefaults, ValidSortFields, ValidSortOrders } = require('../utils/constants');\n\n/**\n * Service refatorado para gerenciamento de clientes\n * Aplica princípios de Clean Code: funções pequenas, responsabilidade única, nomes descritivos\n */\nclass ClientServiceRefactored {\n  /**\n   * Busca lista paginada de clientes com filtros\n   * @param {Object} searchOptions - Opções de busca e paginação\n   * @returns {Promise<Object>} Lista paginada de clientes\n   */\n  static async findClientsWithPagination(searchOptions) {\n    const validatedOptions = ClientServiceRefactored._validateSearchOptions(searchOptions);\n    \n    return await ClientRepository.getClients(validatedOptions);\n  }\n\n  /**\n   * Busca cliente específico por ID\n   * @param {string} clientId - ID do cliente\n   * @returns {Promise<Object|null>} Dados do cliente ou null se não encontrado\n   */\n  static async findClientById(clientId) {\n    ClientServiceRefactored._validateClientId(clientId);\n    \n    return await ClientRepository.getClientById(clientId);\n  }\n\n  /**\n   * Cria novo cliente no sistema\n   * @param {Object} clientData - Dados do cliente\n   * @returns {Promise<Object>} Cliente criado\n   */\n  static async createNewClient(clientData) {\n    const processedData = ClientServiceRefactored._processClientDataForCreation(clientData);\n    \n    await ClientServiceRefactored._validateClientUniqueness(processedData);\n    \n    return await ClientRepository.createClient(processedData);\n  }\n\n  /**\n   * Atualiza dados de cliente existente\n   * @param {string} clientId - ID do cliente\n   * @param {Object} updateData - Dados para atualização\n   * @returns {Promise<Object|null>} Cliente atualizado ou null se não encontrado\n   */\n  static async updateExistingClient(clientId, updateData) {\n    ClientServiceRefactored._validateClientId(clientId);\n    \n    const processedData = ClientServiceRefactored._processClientDataForUpdate(updateData);\n    \n    if (ClientServiceRefactored._hasUniqueFieldsToUpdate(processedData)) {\n      await ClientServiceRefactored._validateClientUniquenessForUpdate(clientId, processedData);\n    }\n    \n    return await ClientRepository.updateClient(clientId, processedData);\n  }\n\n  /**\n   * Remove cliente do sistema\n   * @param {string} clientId - ID do cliente\n   * @returns {Promise<boolean>} True se removido com sucesso\n   */\n  static async removeClientById(clientId) {\n    ClientServiceRefactored._validateClientId(clientId);\n    \n    await ClientServiceRefactored._validateClientCanBeDeleted(clientId);\n    \n    return await ClientRepository.deleteClient(clientId);\n  }\n\n  /**\n   * Busca contratos associados ao cliente\n   * @param {string} clientId - ID do cliente\n   * @param {Object} paginationOptions - Opções de paginação\n   * @returns {Promise<Object>} Lista paginada de contratos\n   */\n  static async findClientContracts(clientId, paginationOptions) {\n    ClientServiceRefactored._validateClientId(clientId);\n    \n    const validatedOptions = ClientServiceRefactored._validatePaginationOptions(paginationOptions);\n    \n    return await ClientRepository.getClientContracts(clientId, validatedOptions);\n  }\n\n  /**\n   * Busca pagamentos associados ao cliente\n   * @param {string} clientId - ID do cliente\n   * @param {Object} paginationOptions - Opções de paginação\n   * @returns {Promise<Object>} Lista paginada de pagamentos\n   */\n  static async findClientPayments(clientId, paginationOptions) {\n    ClientServiceRefactored._validateClientId(clientId);\n    \n    const validatedOptions = ClientServiceRefactored._validatePaginationOptions(paginationOptions);\n    \n    return await ClientRepository.getClientPayments(clientId, validatedOptions);\n  }\n\n  /**\n   * Busca clientes por termo de pesquisa\n   * @param {string} searchTerm - Termo de busca\n   * @param {number} resultLimit - Limite de resultados\n   * @returns {Promise<Array>} Lista de clientes encontrados\n   */\n  static async searchClientsByTerm(searchTerm, resultLimit = SearchDefaults.DEFAULT_SEARCH_LIMIT) {\n    ClientServiceRefactored._validateSearchTerm(searchTerm);\n    ClientServiceRefactored._validateSearchLimit(resultLimit);\n    \n    const sanitizedTerm = searchTerm.trim();\n    \n    return await ClientRepository.searchClients(sanitizedTerm, resultLimit);\n  }\n\n  /**\n   * Busca estatísticas do cliente\n   * @param {string} clientId - ID do cliente\n   * @returns {Promise<Object>} Estatísticas do cliente\n   */\n  static async getClientStatistics(clientId) {\n    ClientServiceRefactored._validateClientId(clientId);\n    \n    return await ClientRepository.getClientStats(clientId);\n  }\n\n  // Métodos privados de validação\n  static _validateClientId(clientId) {\n    if (!clientId || typeof clientId !== 'string' || clientId.trim().length === 0) {\n      throw new Error('ID do cliente é obrigatório e deve ser uma string válida');\n    }\n  }\n\n  static _validateSearchOptions(options) {\n    const { page, limit, search, status, sortBy, sortOrder } = options;\n    \n    // Validar paginação\n    if (page < 1 || limit < PaginationDefaults.MIN_LIMIT || limit > PaginationDefaults.MAX_LIMIT) {\n      throw new Error('Parâmetros de paginação inválidos');\n    }\n\n    // Validar campo de ordenação\n    if (!ValidSortFields.CLIENTS.includes(sortBy)) {\n      throw new Error(`Campo de ordenação inválido. Campos válidos: ${ValidSortFields.CLIENTS.join(', ')}`);\n    }\n\n    // Validar ordem de classificação\n    if (!ValidSortOrders.includes(sortOrder)) {\n      throw new Error(`Ordem de classificação inválida. Ordens válidas: ${ValidSortOrders.join(', ')}`);\n    }\n\n    return {\n      page,\n      limit,\n      search: search ? search.trim() : '',\n      status,\n      sortBy,\n      sortOrder\n    };\n  }\n\n  static _validatePaginationOptions(options) {\n    const { page, limit, status } = options;\n    \n    if (page < 1 || limit < PaginationDefaults.MIN_LIMIT || limit > PaginationDefaults.MAX_LIMIT) {\n      throw new Error('Parâmetros de paginação inválidos');\n    }\n\n    return { page, limit, status };\n  }\n\n  static _validateSearchTerm(searchTerm) {\n    if (!searchTerm || typeof searchTerm !== 'string') {\n      throw new Error('Termo de busca é obrigatório');\n    }\n\n    const trimmedTerm = searchTerm.trim();\n    if (trimmedTerm.length < SearchDefaults.MIN_SEARCH_LENGTH) {\n      throw new Error(`Termo de busca deve ter pelo menos ${SearchDefaults.MIN_SEARCH_LENGTH} caracteres`);\n    }\n\n    if (trimmedTerm.length > SearchDefaults.MAX_SEARCH_LENGTH) {\n      throw new Error(`Termo de busca deve ter no máximo ${SearchDefaults.MAX_SEARCH_LENGTH} caracteres`);\n    }\n  }\n\n  static _validateSearchLimit(limit) {\n    if (!Number.isInteger(limit) || limit < 1 || limit > PaginationDefaults.MAX_LIMIT) {\n      throw new Error('Limite de busca inválido');\n    }\n  }\n\n  // Métodos privados de processamento de dados\n  static _processClientDataForCreation(clientData) {\n    if (!clientData || typeof clientData !== 'object') {\n      throw new Error('Dados do cliente são obrigatórios');\n    }\n\n    // Validar campos obrigatórios\n    const requiredFields = ['name', 'email'];\n    for (const field of requiredFields) {\n      if (!clientData[field] || clientData[field].trim().length === 0) {\n        throw new Error(`Campo '${field}' é obrigatório`);\n      }\n    }\n\n    return ClientServiceRefactored._sanitizeClientData(clientData);\n  }\n\n  static _processClientDataForUpdate(updateData) {\n    if (!updateData || typeof updateData !== 'object') {\n      throw new Error('Dados de atualização são obrigatórios');\n    }\n\n    return ClientServiceRefactored._sanitizeClientData(updateData, true);\n  }\n\n  static _sanitizeClientData(clientData, isUpdate = false) {\n    const sanitized = {};\n\n    // Campos de texto que devem ser sanitizados\n    const textFields = ['name', 'email', 'phone', 'address', 'notes'];\n    \n    for (const field of textFields) {\n      if (clientData[field] !== undefined) {\n        if (typeof clientData[field] === 'string') {\n          const trimmed = clientData[field].trim();\n          if (trimmed.length > 0 || isUpdate) {\n            sanitized[field] = trimmed;\n          }\n        }\n      }\n    }\n\n    // Validar email se fornecido\n    if (sanitized.email && !ValidationHelper.isValidEmail(sanitized.email)) {\n      throw new Error('Email inválido');\n    }\n\n    // Validar telefone se fornecido\n    if (sanitized.phone && !ValidationHelper.isValidPhone(sanitized.phone)) {\n      throw new Error('Telefone inválido');\n    }\n\n    // Campos que não precisam de sanitização especial\n    const directFields = ['status', 'birth_date', 'document_number'];\n    for (const field of directFields) {\n      if (clientData[field] !== undefined) {\n        sanitized[field] = clientData[field];\n      }\n    }\n\n    return sanitized;\n  }\n\n  // Métodos privados de validação de negócio\n  static async _validateClientUniqueness(clientData) {\n    if (clientData.email) {\n      const existingClient = await ClientRepository.findByEmail(clientData.email);\n      if (existingClient) {\n        throw new Error('Cliente com este email já existe');\n      }\n    }\n\n    if (clientData.document_number) {\n      const existingClient = await ClientRepository.findByDocument(clientData.document_number);\n      if (existingClient) {\n        throw new Error('Cliente com este documento já existe');\n      }\n    }\n  }\n\n  static async _validateClientUniquenessForUpdate(clientId, updateData) {\n    if (updateData.email) {\n      const existingClient = await ClientRepository.findByEmail(updateData.email);\n      if (existingClient && existingClient.id !== clientId) {\n        throw new Error('Cliente com este email já existe');\n      }\n    }\n\n    if (updateData.document_number) {\n      const existingClient = await ClientRepository.findByDocument(updateData.document_number);\n      if (existingClient && existingClient.id !== clientId) {\n        throw new Error('Cliente com este documento já existe');\n      }\n    }\n  }\n\n  static async _validateClientCanBeDeleted(clientId) {\n    const hasActiveContracts = await ClientRepository.hasActiveContracts(clientId);\n    if (hasActiveContracts) {\n      throw new Error('Cliente possui contratos ativos e não pode ser removido');\n    }\n  }\n\n  static _hasUniqueFieldsToUpdate(updateData) {\n    return updateData.email || updateData.document_number;\n  }\n}\n\nmodule.exports = { ClientServiceRefactored };"],"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","ignoreList":[]}