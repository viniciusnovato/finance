{"version":3,"names":["cov_ukbhmkqe8","actualCoverage","s","require","config","createClient","fs","csv","path","supabase","process","env","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","CSV_DIR","getExistingData","f","console","log","data","contracts","error","contractsError","from","select","b","clients","companies","branches","clientsError","limit","length","importPayments","companyId","id","newCompany","companyError","insert","name","cnpj","single","branchId","newBranch","branchError","company_id","address","contractMap","Map","forEach","contract","set","contract_number","count","success","errors","contractNotFound","paymentsFile","join","existsSync","Promise","resolve","createReadStream","pipe","on","row","get","contract_id","paymentData","branch_id","client_id","installment_number","parseInt","due_date","Date","toISOString","split","amount","parseFloat","paid_amount","payment_date","payment_method","substring","status","late_fee","discount","notes","receipt_number","message","Math","min","catch"],"sources":["import_payments_mapped.js"],"sourcesContent":["require('dotenv').config();\nconst { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst path = require('path');\n\n// Usar service_role key para ter permiss√µes administrativas\nconst supabase = createClient(\n  process.env.SUPABASE_URL, \n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nconst CSV_DIR = '/Users/insitutoareluna/Documents/finance/importBD';\n\nasync function getExistingData() {\n  console.log('üîç Buscando dados existentes...');\n  \n  // Buscar contratos existentes (sem company_id e branch_id)\n  const { data: contracts, error: contractsError } = await supabase\n    .from('contracts')\n    .select('id, contract_number, client_id');\n  \n  if (contractsError) {\n    console.error('Erro ao buscar contratos:', contractsError);\n    return { contracts: [], clients: [], companies: [], branches: [] };\n  }\n  \n  // Buscar clientes existentes\n  const { data: clients, error: clientsError } = await supabase\n    .from('clients')\n    .select('id, name');\n  \n  if (clientsError) {\n    console.error('Erro ao buscar clientes:', clientsError);\n    return { contracts, clients: [], companies: [], branches: [] };\n  }\n  \n  // Buscar empresas e filiais para usar como padr√£o\n  const { data: companies } = await supabase.from('companies').select('id').limit(1);\n  const { data: branches } = await supabase.from('branches').select('id').limit(1);\n  \n  console.log(`üìã Encontrados: ${contracts.length} contratos, ${clients.length} clientes`);\n  console.log(`üè¢ Empresas: ${companies?.length || 0}, Filiais: ${branches?.length || 0}`);\n  \n  return { contracts, clients, companies: companies || [], branches: branches || [] };\n}\n\nasync function importPayments() {\n  console.log('üí∞ IMPORTA√á√ÉO DE PAGAMENTOS CORRIGIDA');\n  console.log('=========================================');\n  \n  // Obter dados existentes\n  const { contracts, clients, companies, branches } = await getExistingData();\n  \n  if (contracts.length === 0) {\n    console.error('‚ùå Nenhum contrato encontrado para vincular pagamentos');\n    return;\n  }\n  \n  if (companies.length === 0 || branches.length === 0) {\n    console.error('‚ùå Empresa ou filial n√£o encontrada. Criando dados padr√£o...');\n    \n    // Criar empresa padr√£o se n√£o existir\n    let companyId = companies[0]?.id;\n    if (!companyId) {\n      const { data: newCompany, error: companyError } = await supabase\n        .from('companies')\n        .insert([{ name: 'Empresa Padr√£o', cnpj: '00000000000100' }])\n        .select()\n        .single();\n      \n      if (companyError) {\n        console.error('Erro ao criar empresa:', companyError);\n        return;\n      }\n      companyId = newCompany.id;\n      console.log('‚úÖ Empresa padr√£o criada');\n    }\n    \n    // Criar filial padr√£o se n√£o existir\n    let branchId = branches[0]?.id;\n    if (!branchId) {\n      const { data: newBranch, error: branchError } = await supabase\n        .from('branches')\n        .insert([{ \n          company_id: companyId,\n          name: 'Filial Principal', \n          address: 'Endere√ßo Padr√£o'\n        }])\n        .select()\n        .single();\n      \n      if (branchError) {\n        console.error('Erro ao criar filial:', branchError);\n        return;\n      }\n      branchId = newBranch.id;\n      console.log('‚úÖ Filial padr√£o criada');\n    }\n    \n    companies[0] = { id: companyId };\n    branches[0] = { id: branchId };\n  }\n  \n  // Criar mapeamento de contratos por n√∫mero\n  const contractMap = new Map();\n  contracts.forEach(contract => {\n    contractMap.set(contract.contract_number, contract);\n  });\n  \n  let count = 0;\n  let success = 0;\n  let errors = 0;\n  let contractNotFound = 0;\n  \n  const paymentsFile = path.join(CSV_DIR, 'payments.csv');\n  \n  if (!fs.existsSync(paymentsFile)) {\n    console.error('‚ùå Arquivo payments.csv n√£o encontrado em:', paymentsFile);\n    return;\n  }\n  \n  return new Promise((resolve) => {\n    fs.createReadStream(paymentsFile)\n      .pipe(csv())\n      .on('data', async (row) => {\n        count++;\n        \n        // Processar apenas os primeiros 10 para teste\n        if (count > 10) return;\n        \n        try {\n          // Tentar encontrar contrato correspondente\n          let contract = null;\n          \n          // Primeiro, tentar por contract_number\n          if (row.contract_number) {\n            contract = contractMap.get(row.contract_number);\n          }\n          \n          // Se n√£o encontrou, tentar por contract_id (assumindo que √© o n√∫mero)\n          if (!contract && row.contract_id) {\n            contract = contractMap.get(row.contract_id);\n          }\n          \n          // Se ainda n√£o encontrou, usar o primeiro contrato dispon√≠vel para teste\n          if (!contract && count <= 3) {\n            contract = contracts[0]; // Usar primeiro contrato para teste\n            console.log(`‚ö†Ô∏è  Usando contrato padr√£o para pagamento ${count}`);\n          }\n          \n          if (!contract) {\n            console.log(`‚ö†Ô∏è  Contrato n√£o encontrado para pagamento ${count}: ${row.contract_number || row.contract_id}`);\n            contractNotFound++;\n            return;\n          }\n          \n          const paymentData = {\n            company_id: companies[0].id,\n            branch_id: branches[0].id,\n            contract_id: contract.id,\n            client_id: contract.client_id,\n            installment_number: parseInt(row.installment_number) || count,\n            due_date: row.due_date || new Date().toISOString().split('T')[0],\n            amount: parseFloat(row.amount) || 100.00,\n            paid_amount: parseFloat(row.paid_amount) || 0,\n            payment_date: row.payment_date || null,\n            payment_method: (row.payment_method || 'boleto').substring(0, 20),\n            status: row.status || 'pending',\n            late_fee: parseFloat(row.late_fee) || 0,\n            discount: parseFloat(row.discount) || 0,\n            notes: row.notes?.substring(0, 1000) || null,\n            receipt_number: row.receipt_number?.substring(0, 100) || null\n          };\n          \n          const { data, error } = await supabase\n            .from('payments')\n            .insert([paymentData])\n            .select();\n          \n          if (error) {\n            console.error(`‚ùå Erro ao inserir pagamento ${count}:`, error.message);\n            errors++;\n          } else {\n            console.log(`‚úÖ Pagamento ${count} inserido: R$ ${paymentData.amount} - Contrato: ${contract.contract_number}`);\n            success++;\n          }\n        } catch (error) {\n          console.error(`‚ùå Erro ao processar pagamento ${count}:`, error.message);\n          errors++;\n        }\n      })\n      .on('end', () => {\n        console.log('\\nüìä RESUMO DA IMPORTA√á√ÉO DE PAGAMENTOS:');\n        console.log(`Total processados: ${Math.min(count, 10)}`);\n        console.log(`Sucessos: ${success}`);\n        console.log(`Erros: ${errors}`);\n        console.log(`Contratos n√£o encontrados: ${contractNotFound}`);\n        resolve({ count: Math.min(count, 10), success, errors, contractNotFound });\n      })\n      .on('error', (error) => {\n        console.error('‚ùå Erro ao ler CSV de pagamentos:', error);\n        resolve({ count, success, errors, contractNotFound });\n      });\n  });\n}\n\nimportPayments().catch(console.error);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAeY;I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","ignoreList":[]}