{"version":3,"names":["cov_1saka0f8qi","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","undefined","s","f","b","_coverageSchema","coverage","actualCoverage","createClient","require","config","supabaseUrl","process","env","SUPABASE_URL","supabaseKey","SUPABASE_ANON_KEY","console","log","error","exit","supabase","testConnection","data","from","select","count","head","message","includes","tables","table","tableData","tableError","err","main","success","module","catch","exports"],"sources":["test_supabase_connection.js"],"sourcesContent":["#!/usr/bin/env node\n\n/**\n * Script para testar a conex√£o com o Supabase e verificar as tabelas\n */\n\nconst { createClient } = require('@supabase/supabase-js');\nrequire('dotenv').config();\n\n// Configura√ß√£o do Supabase\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_ANON_KEY;\n\nconsole.log('üîç === Teste de Conex√£o com Supabase ===');\nconsole.log(`URL: ${supabaseUrl ? 'Configurada' : 'N√ÉO CONFIGURADA'}`);\nconsole.log(`Key: ${supabaseKey ? 'Configurada' : 'N√ÉO CONFIGURADA'}`);\n\nif (!supabaseUrl || !supabaseKey) {\n    console.error('‚ùå Erro: Vari√°veis de ambiente SUPABASE_URL e SUPABASE_ANON_KEY s√£o obrigat√≥rias');\n    console.log('\\nüìù Configure o arquivo .env com:');\n    console.log('SUPABASE_URL=sua_url_do_supabase');\n    console.log('SUPABASE_ANON_KEY=sua_chave_anonima_do_supabase');\n    process.exit(1);\n}\n\n// Inicializar cliente Supabase\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nasync function testConnection() {\n    try {\n        console.log('\\nüîó Testando conex√£o com Supabase...');\n        \n        // Testar conex√£o b√°sica\n        const { data, error } = await supabase.from('clients').select('count', { count: 'exact', head: true });\n        \n        if (error) {\n            console.error('‚ùå Erro ao conectar com Supabase:', error.message);\n            \n            if (error.message.includes('relation \"public.clients\" does not exist')) {\n                console.log('\\nüìã A tabela \"clients\" n√£o existe. Voc√™ precisa criar as tabelas primeiro.');\n                console.log('Execute as migra√ß√µes do banco de dados ou crie as tabelas manualmente.');\n            } else if (error.message.includes('Invalid API key')) {\n                console.log('\\nüîë Chave da API inv√°lida. Verifique suas credenciais do Supabase.');\n            } else {\n                console.log('\\nüîç Detalhes do erro:', error);\n            }\n            return false;\n        }\n        \n        console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!');\n        console.log(`üìä Tabela \"clients\" existe e cont√©m ${data?.[0]?.count || 0} registros`);\n        \n        // Testar outras tabelas\n        const tables = ['contracts', 'payments'];\n        \n        for (const table of tables) {\n            try {\n                const { data: tableData, error: tableError } = await supabase\n                    .from(table)\n                    .select('count', { count: 'exact', head: true });\n                \n                if (tableError) {\n                    console.log(`‚ùå Tabela \"${table}\" n√£o existe ou n√£o √© acess√≠vel:`, tableError.message);\n                } else {\n                    console.log(`‚úÖ Tabela \"${table}\" existe e cont√©m ${tableData?.[0]?.count || 0} registros`);\n                }\n            } catch (err) {\n                console.log(`‚ùå Erro ao verificar tabela \"${table}\":`, err.message);\n            }\n        }\n        \n        return true;\n        \n    } catch (error) {\n        console.error('‚ùå Erro cr√≠tico:', error.message);\n        return false;\n    }\n}\n\nasync function main() {\n    const success = await testConnection();\n    \n    if (success) {\n        console.log('\\nüéâ Teste de conex√£o conclu√≠do com sucesso!');\n        console.log('Voc√™ pode prosseguir com a importa√ß√£o dos dados.');\n    } else {\n        console.log('\\n‚ö†Ô∏è  Teste de conex√£o falhou.');\n        console.log('Resolva os problemas acima antes de tentar importar os dados.');\n    }\n}\n\n// Executar se chamado diretamente\nif (require.main === module) {\n    main().catch(console.error);\n}\n\nmodule.exports = { main };"],"mappings":"AAAA;;AAEA;AACA;AACA;AAFA;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,IAAA;EAAA,IAAAC,MAAA,OAAAC,QAAA;EAAA,IAAAC,GAAA;EAAA,IAAAC,YAAA;IAAAL,IAAA;IAAAM,YAAA;MAAA;QAAAC,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;QAAAF,KAAA;UAAAC,IAAA;UAAAC,MAAA;QAAA;QAAAC,GAAA;UAAAF,IAAA;UAAAC,MAAA;QAAA;MAAA;MAAA;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","ignoreList":[]}