b84a6cc760f64707eaf6ca445ae29048
/* istanbul ignore next */
function cov_1rpdeg4xvu() {
  var path = "/Users/insitutoareluna/Documents/repFinance/finance/backend/src/scripts/run_migration.js";
  var hash = "d5bb2237384e44087e12893c75ecf1e59bc6b456";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/insitutoareluna/Documents/repFinance/finance/backend/src/scripts/run_migration.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 25
        },
        end: {
          line: 1,
          column: 57
        }
      },
      "1": {
        start: {
          line: 2,
          column: 11
        },
        end: {
          line: 2,
          column: 24
        }
      },
      "2": {
        start: {
          line: 3,
          column: 13
        },
        end: {
          line: 3,
          column: 28
        }
      },
      "3": {
        start: {
          line: 4,
          column: 0
        },
        end: {
          line: 4,
          column: 27
        }
      },
      "4": {
        start: {
          line: 6,
          column: 17
        },
        end: {
          line: 9,
          column: 1
        }
      },
      "5": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 43,
          column: 3
        }
      },
      "6": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 63
        }
      },
      "7": {
        start: {
          line: 16,
          column: 26
        },
        end: {
          line: 16,
          column: 72
        }
      },
      "8": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 63
        }
      },
      "9": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 54
        }
      },
      "10": {
        start: {
          line: 22,
          column: 28
        },
        end: {
          line: 24,
          column: 6
        }
      },
      "11": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "12": {
        start: {
          line: 27,
          column: 6
        },
        end: {
          line: 27,
          column: 66
        }
      },
      "13": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 66
        }
      },
      "14": {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 31,
          column: 32
        }
      },
      "15": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 55
        }
      },
      "16": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 23
        }
      },
      "17": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 56
        }
      },
      "18": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 56
        }
      },
      "19": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 30
        }
      },
      "20": {
        start: {
          line: 47,
          column: 17
        },
        end: {
          line: 102,
          column: 3
        }
      },
      "21": {
        start: {
          line: 104,
          column: 2
        },
        end: {
          line: 116,
          column: 3
        }
      },
      "22": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "23": {
        start: {
          line: 106,
          column: 6
        },
        end: {
          line: 106,
          column: 56
        }
      },
      "24": {
        start: {
          line: 107,
          column: 24
        },
        end: {
          line: 107,
          column: 76
        }
      },
      "25": {
        start: {
          line: 108,
          column: 6
        },
        end: {
          line: 112,
          column: 7
        }
      },
      "26": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 71
        }
      },
      "27": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 54
        }
      },
      "28": {
        start: {
          line: 114,
          column: 6
        },
        end: {
          line: 114,
          column: 67
        }
      },
      "29": {
        start: {
          line: 120,
          column: 2
        },
        end: {
          line: 120,
          column: 50
        }
      },
      "30": {
        start: {
          line: 122,
          column: 17
        },
        end: {
          line: 122,
          column: 51
        }
      },
      "31": {
        start: {
          line: 124,
          column: 2
        },
        end: {
          line: 139,
          column: 3
        }
      },
      "32": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "33": {
        start: {
          line: 126,
          column: 30
        },
        end: {
          line: 129,
          column: 17
        }
      },
      "34": {
        start: {
          line: 131,
          column: 6
        },
        end: {
          line: 135,
          column: 7
        }
      },
      "35": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 63
        }
      },
      "36": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 49
        }
      },
      "37": {
        start: {
          line: 137,
          column: 6
        },
        end: {
          line: 137,
          column: 59
        }
      },
      "38": {
        start: {
          line: 142,
          column: 0
        },
        end: {
          line: 142,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "runMigration",
        decl: {
          start: {
            line: 11,
            column: 15
          },
          end: {
            line: 11,
            column: 27
          }
        },
        loc: {
          start: {
            line: 11,
            column: 30
          },
          end: {
            line: 44,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "createBasicTables",
        decl: {
          start: {
            line: 46,
            column: 15
          },
          end: {
            line: 46,
            column: 32
          }
        },
        loc: {
          start: {
            line: 46,
            column: 35
          },
          end: {
            line: 117,
            column: 1
          }
        },
        line: 46
      },
      "2": {
        name: "testTables",
        decl: {
          start: {
            line: 119,
            column: 15
          },
          end: {
            line: 119,
            column: 25
          }
        },
        loc: {
          start: {
            line: 119,
            column: 28
          },
          end: {
            line: 140,
            column: 1
          }
        },
        line: 119
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: 32,
            column: 11
          },
          end: {
            line: 34,
            column: 5
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 108,
            column: 6
          },
          end: {
            line: 112,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 6
          },
          end: {
            line: 112,
            column: 7
          }
        }, {
          start: {
            line: 110,
            column: 13
          },
          end: {
            line: 112,
            column: 7
          }
        }],
        line: 108
      },
      "2": {
        loc: {
          start: {
            line: 131,
            column: 6
          },
          end: {
            line: 135,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 6
          },
          end: {
            line: 135,
            column: 7
          }
        }, {
          start: {
            line: 133,
            column: 13
          },
          end: {
            line: 135,
            column: 7
          }
        }],
        line: 131
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d5bb2237384e44087e12893c75ecf1e59bc6b456"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1rpdeg4xvu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1rpdeg4xvu();
const {
  createClient
} =
/* istanbul ignore next */
(cov_1rpdeg4xvu().s[0]++, require('@supabase/supabase-js'));
const fs =
/* istanbul ignore next */
(cov_1rpdeg4xvu().s[1]++, require('fs'));
const path =
/* istanbul ignore next */
(cov_1rpdeg4xvu().s[2]++, require('path'));
/* istanbul ignore next */
cov_1rpdeg4xvu().s[3]++;
require('dotenv').config();
const supabase =
/* istanbul ignore next */
(cov_1rpdeg4xvu().s[4]++, createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY));
async function runMigration() {
  /* istanbul ignore next */
  cov_1rpdeg4xvu().f[0]++;
  cov_1rpdeg4xvu().s[5]++;
  try {
    /* istanbul ignore next */
    cov_1rpdeg4xvu().s[6]++;
    console.log('🚀 Executando migração do banco de dados...');

    // Ler o arquivo de migração
    const migrationPath =
    /* istanbul ignore next */
    (cov_1rpdeg4xvu().s[7]++, path.join(__dirname, '../migrations/init.sql'));
    const migrationSQL =
    /* istanbul ignore next */
    (cov_1rpdeg4xvu().s[8]++, fs.readFileSync(migrationPath, 'utf8'));
    /* istanbul ignore next */
    cov_1rpdeg4xvu().s[9]++;
    console.log('📝 Executando migração completa...');

    // Tentar executar a migração completa
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_1rpdeg4xvu().s[10]++, await supabase.rpc('exec_sql', {
      query: migrationSQL
    }));
    /* istanbul ignore next */
    cov_1rpdeg4xvu().s[11]++;
    if (error) {
      /* istanbul ignore next */
      cov_1rpdeg4xvu().b[0][0]++;
      cov_1rpdeg4xvu().s[12]++;
      console.log('⚠️  Erro na migração via RPC:', error.message);
      /* istanbul ignore next */
      cov_1rpdeg4xvu().s[13]++;
      console.log('💡 Tentando criar tabelas individualmente...');

      // Criar tabelas básicas manualmente
      /* istanbul ignore next */
      cov_1rpdeg4xvu().s[14]++;
      await createBasicTables();
    } else {
      /* istanbul ignore next */
      cov_1rpdeg4xvu().b[0][1]++;
      cov_1rpdeg4xvu().s[15]++;
      console.log('✅ Migração executada com sucesso!');
    }

    // Testar se conseguimos acessar as tabelas
    /* istanbul ignore next */
    cov_1rpdeg4xvu().s[16]++;
    await testTables();
  } catch (error) {
    /* istanbul ignore next */
    cov_1rpdeg4xvu().s[17]++;
    console.error('❌ Erro na migração:', error.message);
    /* istanbul ignore next */
    cov_1rpdeg4xvu().s[18]++;
    console.log('💡 Tentando criar tabelas básicas...');
    /* istanbul ignore next */
    cov_1rpdeg4xvu().s[19]++;
    await createBasicTables();
  }
}
async function createBasicTables() {
  /* istanbul ignore next */
  cov_1rpdeg4xvu().f[1]++;
  const tables =
  /* istanbul ignore next */
  (cov_1rpdeg4xvu().s[20]++, [{
    name: 'companies',
    sql: `CREATE TABLE IF NOT EXISTS companies (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        document VARCHAR(20) UNIQUE NOT NULL,
        email VARCHAR(255),
        phone VARCHAR(20),
        address TEXT,
        city VARCHAR(100),
        state VARCHAR(2),
        zip_code VARCHAR(10),
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );`
  }, {
    name: 'branches',
    sql: `CREATE TABLE IF NOT EXISTS branches (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
        name VARCHAR(255) NOT NULL,
        code VARCHAR(10) UNIQUE NOT NULL,
        address TEXT,
        city VARCHAR(100),
        state VARCHAR(2),
        zip_code VARCHAR(10),
        phone VARCHAR(20),
        email VARCHAR(255),
        manager_name VARCHAR(255),
        is_active BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );`
  }, {
    name: 'users',
    sql: `CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        auth_user_id UUID UNIQUE,
        company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE,
        branch_id UUID REFERENCES branches(id) ON DELETE SET NULL,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        phone VARCHAR(20),
        role VARCHAR(50) NOT NULL DEFAULT 'user',
        permissions JSONB DEFAULT '{}',
        is_active BOOLEAN DEFAULT true,
        last_login TIMESTAMP WITH TIME ZONE,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
      );`
  }]);
  /* istanbul ignore next */
  cov_1rpdeg4xvu().s[21]++;
  for (const table of tables) {
    /* istanbul ignore next */
    cov_1rpdeg4xvu().s[22]++;
    try {
      /* istanbul ignore next */
      cov_1rpdeg4xvu().s[23]++;
      console.log(`📊 Criando tabela ${table.name}...`);
      const {
        error
      } =
      /* istanbul ignore next */
      (cov_1rpdeg4xvu().s[24]++, await supabase.rpc('exec_sql', {
        query: table.sql
      }));
      /* istanbul ignore next */
      cov_1rpdeg4xvu().s[25]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rpdeg4xvu().b[1][0]++;
        cov_1rpdeg4xvu().s[26]++;
        console.log(`⚠️  Erro ao criar ${table.name}:`, error.message);
      } else {
        /* istanbul ignore next */
        cov_1rpdeg4xvu().b[1][1]++;
        cov_1rpdeg4xvu().s[27]++;
        console.log(`✅ Tabela ${table.name} criada!`);
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_1rpdeg4xvu().s[28]++;
      console.log(`⚠️  Erro ao criar ${table.name}:`, err.message);
    }
  }
}
async function testTables() {
  /* istanbul ignore next */
  cov_1rpdeg4xvu().f[2]++;
  cov_1rpdeg4xvu().s[29]++;
  console.log('🔍 Testando acesso às tabelas...');
  const tables =
  /* istanbul ignore next */
  (cov_1rpdeg4xvu().s[30]++, ['companies', 'branches', 'users']);
  /* istanbul ignore next */
  cov_1rpdeg4xvu().s[31]++;
  for (const tableName of tables) {
    /* istanbul ignore next */
    cov_1rpdeg4xvu().s[32]++;
    try {
      const {
        data,
        error
      } =
      /* istanbul ignore next */
      (cov_1rpdeg4xvu().s[33]++, await supabase.from(tableName).select('*').limit(1));
      /* istanbul ignore next */
      cov_1rpdeg4xvu().s[34]++;
      if (error) {
        /* istanbul ignore next */
        cov_1rpdeg4xvu().b[2][0]++;
        cov_1rpdeg4xvu().s[35]++;
        console.log(`❌ Tabela ${tableName}: ${error.message}`);
      } else {
        /* istanbul ignore next */
        cov_1rpdeg4xvu().b[2][1]++;
        cov_1rpdeg4xvu().s[36]++;
        console.log(`✅ Tabela ${tableName}: OK`);
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_1rpdeg4xvu().s[37]++;
      console.log(`❌ Tabela ${tableName}: ${err.message}`);
    }
  }
}
/* istanbul ignore next */
cov_1rpdeg4xvu().s[38]++;
runMigration();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,