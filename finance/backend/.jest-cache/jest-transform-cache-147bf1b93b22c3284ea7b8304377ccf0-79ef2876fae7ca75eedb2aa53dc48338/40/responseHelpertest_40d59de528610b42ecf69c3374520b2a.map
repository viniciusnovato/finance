{"version":3,"names":["ResponseHelper","require","HttpStatusCodes","createMockResponse","res","status","jest","fn","mockReturnThis","json","statusCode","jsonData","mockImplementation","code","data","describe","mockRes","beforeEach","test","id","name","sendSuccess","expect","toHaveBeenCalledWith","OK","success","timestamp","any","String","CREATED","toBe","toBeDefined","BAD_REQUEST","message","sendError","details","field","issue","toEqual","validationErrors","sendValidationError","UNPROCESSABLE_ENTITY","pagination","page","totalPages","totalItems","limit","sendPaginatedResponse","currentPage","itemsPerPage","hasNextPage","hasPreviousPage","sendNotFound","NOT_FOUND","sendConflict","CONFLICT","sendUnauthorized","UNAUTHORIZED","sendForbidden","FORBIDDEN","sendInternalError","INTERNAL_SERVER_ERROR","sendNoContent","NO_CONTENT","result","formatPagination"],"sources":["responseHelper.test.js"],"sourcesContent":["/**\n * Testes unitários para ResponseHelper\n * Testa todas as respostas HTTP padronizadas\n */\n\nconst { ResponseHelper } = require('../../utils/responseHelper');\nconst { HttpStatusCodes } = require('../../utils/constants');\n\n// Mock do objeto response do Express\nconst createMockResponse = () => {\n  const res = {\n    status: jest.fn().mockReturnThis(),\n    json: jest.fn().mockReturnThis(),\n    statusCode: null,\n    jsonData: null\n  };\n  \n  // Capturar os dados enviados\n  res.status.mockImplementation((code) => {\n    res.statusCode = code;\n    return res;\n  });\n  \n  res.json.mockImplementation((data) => {\n    res.jsonData = data;\n    return res;\n  });\n  \n  return res;\n};\n\ndescribe('ResponseHelper', () => {\n  let mockRes;\n\n  beforeEach(() => {\n    mockRes = createMockResponse();\n  });\n\n  describe('sendSuccess', () => {\n    test('should send success response with data', () => {\n      const data = { id: 1, name: 'Test' };\n      \n      ResponseHelper.sendSuccess(mockRes, data);\n      \n      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.OK);\n      expect(mockRes.json).toHaveBeenCalledWith({\n        success: true,\n        timestamp: expect.any(String),\n        id: 1,\n        name: 'Test'\n      });\n    });\n\n    test('should use custom status code when provided', () => {\n      const data = { id: 1 };\n      \n      ResponseHelper.sendSuccess(mockRes, data, HttpStatusCodes.CREATED);\n      \n      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.CREATED);\n    });\n\n    test('should handle empty data', () => {\n      ResponseHelper.sendSuccess(mockRes);\n      \n      expect(mockRes.jsonData.success).toBe(true);\n      expect(mockRes.jsonData.timestamp).toBeDefined();\n    });\n  });\n\n  describe('sendError', () => {\n    test('should send error response', () => {\n      const statusCode = HttpStatusCodes.BAD_REQUEST;\n      const message = 'Erro de validação';\n      const code = 'VALIDATION_ERROR';\n      \n      ResponseHelper.sendError(mockRes, statusCode, message, code);\n      \n      expect(mockRes.status).toHaveBeenCalledWith(statusCode);\n      expect(mockRes.json).toHaveBeenCalledWith({\n        success: false,\n        message,\n        code,\n        timestamp: expect.any(String)\n      });\n    });\n\n    test('should include details when provided', () => {\n      const details = { field: 'email', issue: 'invalid format' };\n      \n      ResponseHelper.sendError(mockRes, HttpStatusCodes.BAD_REQUEST, 'Error', 'CODE', details);\n      \n      expect(mockRes.jsonData.details).toEqual(details);\n    });\n  });\n\n  describe('sendValidationError', () => {\n    test('should send validation error response', () => {\n      const validationErrors = [\n        { field: 'email', message: 'Email inválido' },\n        { field: 'name', message: 'Nome obrigatório' }\n      ];\n      \n      ResponseHelper.sendValidationError(mockRes, validationErrors);\n      \n      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.UNPROCESSABLE_ENTITY);\n      expect(mockRes.jsonData.code).toBe('VALIDATION_ERROR');\n      expect(mockRes.jsonData.details.validationErrors).toEqual(validationErrors);\n    });\n  });\n\n  describe('sendPaginatedResponse', () => {\n    test('should send paginated response', () => {\n      const data = [{ id: 1 }, { id: 2 }];\n      const pagination = {\n        page: 1,\n        totalPages: 5,\n        totalItems: 50,\n        limit: 10\n      };\n      \n      ResponseHelper.sendPaginatedResponse(mockRes, data, pagination);\n      \n      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.OK);\n      expect(mockRes.jsonData.data).toEqual(data);\n      expect(mockRes.jsonData.pagination).toEqual({\n        currentPage: 1,\n        totalPages: 5,\n        totalItems: 50,\n        itemsPerPage: 10,\n        hasNextPage: true,\n        hasPreviousPage: false\n      });\n    });\n  });\n\n  describe('sendNotFound', () => {\n    test('should send not found response', () => {\n      ResponseHelper.sendNotFound(mockRes, 'Cliente');\n      \n      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.NOT_FOUND);\n      expect(mockRes.jsonData.message).toBe('Cliente não encontrado');\n    });\n  });\n\n  describe('sendConflict', () => {\n    test('should send conflict response', () => {\n      ResponseHelper.sendConflict(mockRes, 'Email');\n      \n      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.CONFLICT);\n      expect(mockRes.jsonData.message).toBe('Email já existe');\n    });\n  });\n\n  describe('sendUnauthorized', () => {\n    test('should send unauthorized response', () => {\n      ResponseHelper.sendUnauthorized(mockRes);\n      \n      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.UNAUTHORIZED);\n      expect(mockRes.jsonData.message).toBe('Acesso não autorizado');\n    });\n  });\n\n  describe('sendForbidden', () => {\n    test('should send forbidden response', () => {\n      ResponseHelper.sendForbidden(mockRes);\n      \n      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.FORBIDDEN);\n      expect(mockRes.jsonData.message).toBe('Acesso proibido');\n    });\n  });\n\n  describe('sendInternalError', () => {\n    test('should send internal error response', () => {\n      ResponseHelper.sendInternalError(mockRes);\n      \n      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n      expect(mockRes.jsonData.message).toBe('Erro interno do servidor');\n    });\n  });\n\n  describe('sendNoContent', () => {\n    test('should send no content response', () => {\n      ResponseHelper.sendNoContent(mockRes);\n      \n      expect(mockRes.status).toHaveBeenCalledWith(HttpStatusCodes.NO_CONTENT);\n    });\n  });\n\n  describe('formatPagination', () => {\n    test('should format pagination correctly', () => {\n      const result = ResponseHelper.formatPagination(2, 10, 25);\n      \n      expect(result).toEqual({\n        currentPage: 2,\n        totalPages: 3,\n        totalItems: 25,\n        itemsPerPage: 10,\n        hasNextPage: true,\n        hasPreviousPage: true\n      });\n    });\n\n    test('should handle first page correctly', () => {\n      const result = ResponseHelper.formatPagination(1, 10, 25);\n      \n      expect(result.hasPreviousPage).toBe(false);\n      expect(result.hasNextPage).toBe(true);\n    });\n\n    test('should handle last page correctly', () => {\n      const result = ResponseHelper.formatPagination(3, 10, 25);\n      \n      expect(result.hasPreviousPage).toBe(true);\n      expect(result.hasNextPage).toBe(false);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}