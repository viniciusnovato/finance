{"version":3,"names":["cov_1rpdeg4xvu","actualCoverage","createClient","s","require","fs","path","config","supabase","process","env","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","runMigration","f","console","log","migrationPath","join","__dirname","migrationSQL","readFileSync","data","error","rpc","query","b","message","createBasicTables","testTables","tables","name","sql","table","err","tableName","from","select","limit"],"sources":["run_migration.js"],"sourcesContent":["const { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst path = require('path');\nrequire('dotenv').config();\n\nconst supabase = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_ROLE_KEY\n);\n\nasync function runMigration() {\n  try {\n    console.log('üöÄ Executando migra√ß√£o do banco de dados...');\n    \n    // Ler o arquivo de migra√ß√£o\n    const migrationPath = path.join(__dirname, '../migrations/init.sql');\n    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');\n    \n    console.log('üìù Executando migra√ß√£o completa...');\n    \n    // Tentar executar a migra√ß√£o completa\n    const { data, error } = await supabase.rpc('exec_sql', {\n      query: migrationSQL\n    });\n    \n    if (error) {\n      console.log('‚ö†Ô∏è  Erro na migra√ß√£o via RPC:', error.message);\n      console.log('üí° Tentando criar tabelas individualmente...');\n      \n      // Criar tabelas b√°sicas manualmente\n      await createBasicTables();\n    } else {\n      console.log('‚úÖ Migra√ß√£o executada com sucesso!');\n    }\n    \n    // Testar se conseguimos acessar as tabelas\n    await testTables();\n    \n  } catch (error) {\n    console.error('‚ùå Erro na migra√ß√£o:', error.message);\n    console.log('üí° Tentando criar tabelas b√°sicas...');\n    await createBasicTables();\n  }\n}\n\nasync function createBasicTables() {\n  const tables = [\n    {\n      name: 'companies',\n      sql: `CREATE TABLE IF NOT EXISTS companies (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        name VARCHAR(255) NOT NULL,\n        document VARCHAR(20) UNIQUE NOT NULL,\n        email VARCHAR(255),\n        phone VARCHAR(20),\n        address TEXT,\n        city VARCHAR(100),\n        state VARCHAR(2),\n        zip_code VARCHAR(10),\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );`\n    },\n    {\n      name: 'branches',\n      sql: `CREATE TABLE IF NOT EXISTS branches (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE,\n        name VARCHAR(255) NOT NULL,\n        code VARCHAR(10) UNIQUE NOT NULL,\n        address TEXT,\n        city VARCHAR(100),\n        state VARCHAR(2),\n        zip_code VARCHAR(10),\n        phone VARCHAR(20),\n        email VARCHAR(255),\n        manager_name VARCHAR(255),\n        is_active BOOLEAN DEFAULT true,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );`\n    },\n    {\n      name: 'users',\n      sql: `CREATE TABLE IF NOT EXISTS users (\n        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n        auth_user_id UUID UNIQUE,\n        company_id UUID NOT NULL REFERENCES companies(id) ON DELETE CASCADE,\n        branch_id UUID REFERENCES branches(id) ON DELETE SET NULL,\n        name VARCHAR(255) NOT NULL,\n        email VARCHAR(255) UNIQUE NOT NULL,\n        phone VARCHAR(20),\n        role VARCHAR(50) NOT NULL DEFAULT 'user',\n        permissions JSONB DEFAULT '{}',\n        is_active BOOLEAN DEFAULT true,\n        last_login TIMESTAMP WITH TIME ZONE,\n        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n      );`\n    }\n  ];\n  \n  for (const table of tables) {\n    try {\n      console.log(`üìä Criando tabela ${table.name}...`);\n      const { error } = await supabase.rpc('exec_sql', { query: table.sql });\n      if (error) {\n        console.log(`‚ö†Ô∏è  Erro ao criar ${table.name}:`, error.message);\n      } else {\n        console.log(`‚úÖ Tabela ${table.name} criada!`);\n      }\n    } catch (err) {\n      console.log(`‚ö†Ô∏è  Erro ao criar ${table.name}:`, err.message);\n    }\n  }\n}\n\nasync function testTables() {\n  console.log('üîç Testando acesso √†s tabelas...');\n  \n  const tables = ['companies', 'branches', 'users'];\n  \n  for (const tableName of tables) {\n    try {\n      const { data, error } = await supabase\n        .from(tableName)\n        .select('*')\n        .limit(1);\n      \n      if (error) {\n        console.log(`‚ùå Tabela ${tableName}: ${error.message}`);\n      } else {\n        console.log(`‚úÖ Tabela ${tableName}: OK`);\n      }\n    } catch (err) {\n      console.log(`‚ùå Tabela ${tableName}: ${err.message}`);\n    }\n  }\n}\n\nrunMigration();"],"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","ignoreList":[]}