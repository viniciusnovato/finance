{"version":3,"names":["cov_1s0xmmex7q","actualCoverage","ContractRepository","s","require","ClientRepository","calculatePaymentPercentage","ContractService","getContracts","options","f","page","limit","search","status","clientId","sortBy","sortOrder","b","Error","validSortFields","includes","validSortOrders","error","console","getContractById","id","contract","stats","calculateContractStats","createContract","contractData","requiredFields","field","client","getClientById","client_id","parseFloat","value","parseInt","installments","firstDueDate","Date","first_due_date","isNaN","getTime","contract_number","existingContract","getContractByNumber","newContractData","down_payment","created_at","toISOString","updated_at","generateContractNumber","updateContract","updateData","duplicateContract","undefined","contractUpdate","deleteContract","hasPayments","contractHasPayments","getContractPayments","contractId","generateInstallments","existingPayments","payments","length","getContractStats","searchContracts","query","trim","updateContractStatus","validStatuses","year","getFullYear","lastContract","getLastContractByYear","sequence","lastSequence","split","toString","padStart","paymentsResult","calculations","total_value","installment_value","total_payments","paid_payments","paid_installments","pending_payments","remaining_installments","total_paid","paid_amount","total_pending","remaining_amount","payment_percentage","percentage_paid","is_completed","overdue_payments","filter","p","due_date","module","exports"],"sources":["ContractService.js"],"sourcesContent":["const { ContractRepository } = require('../repositories/ContractRepository');\nconst { ClientRepository } = require('../repositories/ClientRepository');\nconst { calculatePaymentPercentage } = require('../utils/contractCalculations');\n\nclass ContractService {\n  /**\n   * Obter lista de contratos com paginação e filtros\n   * @param {Object} options - Opções de busca\n   * @returns {Object} Lista paginada de contratos\n   */\n  static async getContracts(options) {\n    try {\n      // Validar parâmetros\n      const { page, limit, search, status, clientId, sortBy, sortOrder } = options;\n      \n      if (page < 1 || limit < 1 || limit > 100) {\n        throw new Error('Parâmetros de paginação inválidos');\n      }\n\n      const validSortFields = ['created_at', 'updated_at', 'contract_number', 'value', 'status'];\n      if (!validSortFields.includes(sortBy)) {\n        throw new Error('Campo de ordenação inválido');\n      }\n\n      const validSortOrders = ['asc', 'desc'];\n      if (!validSortOrders.includes(sortOrder)) {\n        throw new Error('Ordem de classificação inválida');\n      }\n\n      return await ContractRepository.getContracts(options);\n    } catch (error) {\n      console.error('Erro no ContractService.getContracts:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter contrato por ID\n   * @param {string} id - ID do contrato\n   * @returns {Object|null} Dados do contrato\n   */\n  static async getContractById(id) {\n    try {\n      if (!id) {\n        throw new Error('ID do contrato é obrigatório');\n      }\n\n      const contract = await ContractRepository.getContractById(id);\n      \n      if (contract) {\n        // Calcular estatísticas do contrato\n        const stats = await this.calculateContractStats(contract);\n        contract.stats = stats;\n      }\n\n      return contract;\n    } catch (error) {\n      console.error('Erro no ContractService.getContractById:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Criar novo contrato\n   * @param {Object} contractData - Dados do contrato\n   * @returns {Object} Contrato criado\n   */\n  static async createContract(contractData) {\n    try {\n      // Validar dados obrigatórios\n      const requiredFields = ['client_id', 'value', 'installments', 'first_due_date'];\n      for (const field of requiredFields) {\n        if (!contractData[field]) {\n          throw new Error(`Campo ${field} é obrigatório`);\n        }\n      }\n\n      // Validar se o cliente existe\n      const client = await ClientRepository.getClientById(contractData.client_id);\n      if (!client) {\n        throw new Error('Cliente não encontrado');\n      }\n\n      // Validar valores numéricos\n      if (parseFloat(contractData.value) <= 0) {\n        throw new Error('Valor do contrato deve ser maior que zero');\n      }\n\n      if (parseInt(contractData.installments) <= 0) {\n        throw new Error('Número de parcelas deve ser maior que zero');\n      }\n\n      // Validar data de vencimento\n      const firstDueDate = new Date(contractData.first_due_date);\n      if (isNaN(firstDueDate.getTime())) {\n        throw new Error('Data de primeiro vencimento inválida');\n      }\n\n      // Verificar se já existe contrato com mesmo número\n      if (contractData.contract_number) {\n        const existingContract = await ContractRepository.getContractByNumber(contractData.contract_number);\n        if (existingContract) {\n          throw new Error('Já existe um contrato com este número');\n        }\n      }\n\n      // Preparar dados para criação\n      const newContractData = {\n        ...contractData,\n        value: parseFloat(contractData.value),\n        installments: parseInt(contractData.installments),\n        down_payment: parseFloat(contractData.down_payment || 0),\n        status: contractData.status || 'active',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n\n      // Gerar número do contrato se não fornecido\n      if (!newContractData.contract_number) {\n        newContractData.contract_number = await this.generateContractNumber();\n      }\n\n      return await ContractRepository.createContract(newContractData);\n    } catch (error) {\n      console.error('Erro no ContractService.createContract:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Atualizar contrato\n   * @param {string} id - ID do contrato\n   * @param {Object} updateData - Dados para atualização\n   * @returns {Object|null} Contrato atualizado\n   */\n  static async updateContract(id, updateData) {\n    try {\n      if (!id) {\n        throw new Error('ID do contrato é obrigatório');\n      }\n\n      // Verificar se o contrato existe\n      const existingContract = await ContractRepository.getContractById(id);\n      if (!existingContract) {\n        return null;\n      }\n\n      // Validar cliente se estiver sendo alterado\n      if (updateData.client_id && updateData.client_id !== existingContract.client_id) {\n        const client = await ClientRepository.getClientById(updateData.client_id);\n        if (!client) {\n          throw new Error('Cliente não encontrado');\n        }\n      }\n\n      // Validar número do contrato se estiver sendo alterado\n      if (updateData.contract_number && updateData.contract_number !== existingContract.contract_number) {\n        const duplicateContract = await ContractRepository.getContractByNumber(updateData.contract_number);\n        if (duplicateContract && duplicateContract.id !== id) {\n          throw new Error('Já existe um contrato com este número');\n        }\n      }\n\n      // Validar valores numéricos\n      if (updateData.value !== undefined && parseFloat(updateData.value) <= 0) {\n        throw new Error('Valor do contrato deve ser maior que zero');\n      }\n\n      if (updateData.installments !== undefined && parseInt(updateData.installments) <= 0) {\n        throw new Error('Número de parcelas deve ser maior que zero');\n      }\n\n      // Preparar dados para atualização\n      const contractUpdate = {\n        ...updateData,\n        updated_at: new Date().toISOString()\n      };\n\n      if (contractUpdate.value !== undefined) {\n        contractUpdate.value = parseFloat(contractUpdate.value);\n      }\n\n      if (contractUpdate.installments !== undefined) {\n        contractUpdate.installments = parseInt(contractUpdate.installments);\n      }\n\n      if (contractUpdate.down_payment !== undefined) {\n        contractUpdate.down_payment = parseFloat(contractUpdate.down_payment);\n      }\n\n      return await ContractRepository.updateContract(id, contractUpdate);\n    } catch (error) {\n      console.error('Erro no ContractService.updateContract:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Deletar contrato\n   * @param {string} id - ID do contrato\n   * @returns {boolean} Sucesso da operação\n   */\n  static async deleteContract(id) {\n    try {\n      if (!id) {\n        throw new Error('ID do contrato é obrigatório');\n      }\n\n      // Verificar se o contrato existe\n      const existingContract = await ContractRepository.getContractById(id);\n      if (!existingContract) {\n        return false;\n      }\n\n      // Verificar se o contrato possui pagamentos\n      const hasPayments = await ContractRepository.contractHasPayments(id);\n      if (hasPayments) {\n        throw new Error('Não é possível deletar contrato que possui pagamentos');\n      }\n\n      return await ContractRepository.deleteContract(id);\n    } catch (error) {\n      console.error('Erro no ContractService.deleteContract:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter pagamentos do contrato\n   * @param {string} contractId - ID do contrato\n   * @param {Object} options - Opções de busca\n   * @returns {Object} Lista paginada de pagamentos\n   */\n  static async getContractPayments(contractId, options) {\n    try {\n      if (!contractId) {\n        throw new Error('ID do contrato é obrigatório');\n      }\n\n      // Verificar se o contrato existe\n      const contract = await ContractRepository.getContractById(contractId);\n      if (!contract) {\n        throw new Error('Contrato não encontrado');\n      }\n\n      return await ContractRepository.getContractPayments(contractId, options);\n    } catch (error) {\n      console.error('Erro no ContractService.getContractPayments:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Gerar parcelas do contrato\n   * @param {string} contractId - ID do contrato\n   * @returns {Array} Lista de parcelas geradas\n   */\n  static async generateInstallments(contractId) {\n    try {\n      if (!contractId) {\n        throw new Error('ID do contrato é obrigatório');\n      }\n\n      const contract = await ContractRepository.getContractById(contractId);\n      if (!contract) {\n        throw new Error('Contrato não encontrado');\n      }\n\n      // Verificar se já existem pagamentos para este contrato\n      const existingPayments = await ContractRepository.getContractPayments(contractId, { page: 1, limit: 1 });\n      if (existingPayments.payments.length > 0) {\n        throw new Error('Contrato já possui parcelas geradas');\n      }\n\n      return await ContractRepository.generateInstallments(contractId);\n    } catch (error) {\n      console.error('Erro no ContractService.generateInstallments:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obter estatísticas do contrato\n   * @param {string} contractId - ID do contrato\n   * @returns {Object} Estatísticas do contrato\n   */\n  static async getContractStats(contractId) {\n    try {\n      if (!contractId) {\n        throw new Error('ID do contrato é obrigatório');\n      }\n\n      const contract = await ContractRepository.getContractById(contractId);\n      if (!contract) {\n        throw new Error('Contrato não encontrado');\n      }\n\n      return await this.calculateContractStats(contract);\n    } catch (error) {\n      console.error('Erro no ContractService.getContractStats:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Buscar contratos por termo\n   * @param {string} query - Termo de busca\n   * @param {number} limit - Limite de resultados\n   * @returns {Array} Lista de contratos\n   */\n  static async searchContracts(query, limit) {\n    try {\n      if (!query || query.trim().length < 2) {\n        throw new Error('Termo de busca deve ter pelo menos 2 caracteres');\n      }\n\n      if (limit < 1 || limit > 50) {\n        throw new Error('Limite deve estar entre 1 e 50');\n      }\n\n      return await ContractRepository.searchContracts(query.trim(), limit);\n    } catch (error) {\n      console.error('Erro no ContractService.searchContracts:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Atualizar status do contrato\n   * @param {string} id - ID do contrato\n   * @param {string} status - Novo status\n   * @returns {Object|null} Contrato atualizado\n   */\n  static async updateContractStatus(id, status) {\n    try {\n      if (!id) {\n        throw new Error('ID do contrato é obrigatório');\n      }\n\n      const validStatuses = ['active', 'completed', 'cancelled', 'suspended'];\n      if (!validStatuses.includes(status)) {\n        throw new Error('Status inválido');\n      }\n\n      return await this.updateContract(id, { status });\n    } catch (error) {\n      console.error('Erro no ContractService.updateContractStatus:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Gerar número do contrato\n   * @returns {string} Número do contrato\n   */\n  static async generateContractNumber() {\n    try {\n      const year = new Date().getFullYear();\n      const lastContract = await ContractRepository.getLastContractByYear(year);\n      \n      let sequence = 1;\n      if (lastContract && lastContract.contract_number) {\n        const lastSequence = parseInt(lastContract.contract_number.split('/')[0]);\n        sequence = lastSequence + 1;\n      }\n\n      return `${sequence.toString().padStart(6, '0')}/${year}`;\n    } catch (error) {\n      console.error('Erro no ContractService.generateContractNumber:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Calcular estatísticas do contrato\n   * @param {Object} contract - Dados do contrato\n   * @returns {Object} Estatísticas calculadas\n   */\n  static async calculateContractStats(contract) {\n    try {\n      // Buscar pagamentos do contrato\n      const paymentsResult = await ContractRepository.getContractPayments(contract.id, { page: 1, limit: 1000 });\n      const payments = paymentsResult.payments || [];\n\n      // Usar função de cálculo existente\n      const calculations = calculatePaymentPercentage(contract, payments);\n\n      return {\n        total_value: contract.value,\n        down_payment: contract.down_payment || 0,\n        installment_value: calculations.installment_value,\n        total_payments: payments.length,\n        paid_payments: calculations.paid_installments,\n        pending_payments: calculations.remaining_installments,\n        total_paid: calculations.paid_amount,\n        total_pending: calculations.remaining_amount,\n        payment_percentage: calculations.percentage_paid,\n        is_completed: calculations.is_completed,\n        overdue_payments: payments.filter(p => {\n          return p.status === 'pending' && p.due_date < new Date().toISOString().split('T')[0];\n        }).length\n      };\n    } catch (error) {\n      console.error('Erro no ContractService.calculateContractStats:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = { ContractService };"],"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","ignoreList":[]}