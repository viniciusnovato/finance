45c6b621e705894eecae6051e740002a
"use strict";

// Mock do ResponseHelper
_getJestObj().mock('../../utils/responseHelper');

// Mock do objeto response do Express
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * Testes unitários para ErrorHandler
 * Testa o tratamento centralizado de erros
 */

const {
  ErrorHandler
} = require('../../utils/errorHandler');
const {
  ResponseHelper
} = require('../../utils/responseHelper');
const createMockResponse = () => ({
  status: jest.fn().mockReturnThis(),
  json: jest.fn().mockReturnThis(),
  headersSent: false
});

// Mock do objeto request do Express
const createMockRequest = () => ({
  method: 'GET',
  url: '/api/test',
  ip: '127.0.0.1',
  headers: {
    'user-agent': 'test-agent'
  }
});
describe('ErrorHandler', () => {
  let mockRes;
  let mockReq;
  let mockNext;
  let consoleErrorSpy;
  beforeEach(() => {
    mockRes = createMockResponse();
    mockReq = createMockRequest();
    mockNext = jest.fn();

    // Mock console.error para evitar logs durante os testes
    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});

    // Limpar mocks
    jest.clearAllMocks();
  });
  afterEach(() => {
    consoleErrorSpy.mockRestore();
  });
  describe('handleValidationError', () => {
    test('should handle validation error with details', () => {
      const error = {
        name: 'ValidationError',
        message: 'Dados inválidos',
        details: [{
          field: 'email',
          message: 'Email inválido'
        }, {
          field: 'phone',
          message: 'Telefone obrigatório'
        }]
      };
      ErrorHandler.handleValidationError(mockRes, error.details, error.message);
      expect(ResponseHelper.sendValidationError).toHaveBeenCalledWith(mockRes, error.details);
    });
    test('should handle validation error without details', () => {
      const error = {
        name: 'ValidationError',
        message: 'Erro de validação'
      };
      ErrorHandler.handleValidationError(mockRes, [], error.message);
      expect(ResponseHelper.sendValidationError).toHaveBeenCalledWith(mockRes, []);
    });
  });
  describe('handleDatabaseError', () => {
    test('should handle unique constraint violation', () => {
      const error = {
        code: '23505',
        // PostgreSQL unique violation
        message: 'duplicate key value violates unique constraint',
        constraint: 'clients_email_unique'
      };
      ErrorHandler.handleDatabaseError(mockRes, error);
      expect(ResponseHelper.sendConflict).toHaveBeenCalledWith(mockRes, 'Registro já existe');
    });
    test('should handle foreign key constraint violation', () => {
      const error = {
        code: '23503',
        // PostgreSQL foreign key violation
        message: 'violates foreign key constraint'
      };
      ErrorHandler.handleDatabaseError(mockRes, error);
      expect(ResponseHelper.sendValidationError).toHaveBeenCalledWith(mockRes, ['Referência inválida']);
    });
    test('should handle not null constraint violation', () => {
      const error = {
        code: '23502',
        // PostgreSQL not null violation
        message: 'null value in column violates not-null constraint'
      };
      ErrorHandler.handleDatabaseError(mockRes, error);
      expect(ResponseHelper.sendInternalError).toHaveBeenCalledWith(mockRes, 'Erro interno do servidor');
    });
    test('should handle connection timeout', () => {
      const error = {
        code: 'ETIMEDOUT',
        message: 'Connection timeout'
      };
      ErrorHandler.handleDatabaseError(mockRes, error);
      expect(ResponseHelper.sendInternalError).toHaveBeenCalledWith(mockRes, 'Erro interno do servidor');
    });
    test('should handle generic database error', () => {
      const error = {
        message: 'Generic database error'
      };
      ErrorHandler.handleDatabaseError(mockRes, error);
      expect(ResponseHelper.sendInternalError).toHaveBeenCalledWith(mockRes, 'Erro interno do servidor');
    });
  });
  describe('handleAuthenticationError', () => {
    test('should handle authentication error', () => {
      const error = {
        name: 'AuthenticationError',
        message: 'Token inválido'
      };
      ErrorHandler.handleAuthenticationError(error, mockRes);
      expect(ResponseHelper.sendUnauthorized).toHaveBeenCalledWith(mockRes, 'Token inválido');
    });
    test('should use default message for authentication error', () => {
      const error = {
        name: 'AuthenticationError'
      };
      ErrorHandler.handleAuthenticationError(error, mockRes);
      expect(ResponseHelper.sendUnauthorized).toHaveBeenCalledWith(mockRes, 'Falha na autenticação');
    });
  });
  describe('handleAuthorizationError', () => {
    test('should handle authorization error', () => {
      const error = {
        name: 'AuthorizationError',
        message: 'Acesso negado'
      };
      ErrorHandler.handleAuthorizationError(error, mockRes);
      expect(ResponseHelper.sendForbidden).toHaveBeenCalledWith(mockRes, 'Acesso negado');
    });
    test('should use default message for authorization error', () => {
      const error = {
        name: 'AuthorizationError'
      };
      ErrorHandler.handleAuthorizationError(error, mockRes);
      expect(ResponseHelper.sendForbidden).toHaveBeenCalledWith(mockRes, 'Acesso não autorizado');
    });
  });
  describe('handleNotFoundError', () => {
    test('should handle not found error', () => {
      const error = {
        name: 'NotFoundError',
        message: 'Cliente não encontrado'
      };
      ErrorHandler.handleNotFoundError(error, mockRes);
      expect(ResponseHelper.sendNotFound).toHaveBeenCalledWith(mockRes, 'Cliente não encontrado');
    });
    test('should use default message for not found error', () => {
      const error = {
        name: 'NotFoundError'
      };
      ErrorHandler.handleNotFoundError(error, mockRes);
      expect(ResponseHelper.sendNotFound).toHaveBeenCalledWith(mockRes, 'Recurso não encontrado');
    });
  });
  describe('handleNetworkError', () => {
    test('should handle connection refused error', () => {
      const error = {
        code: 'ECONNREFUSED',
        message: 'Connection refused'
      };
      ErrorHandler.handleNetworkError(error, mockRes);
      expect(ResponseHelper.serviceUnavailable).toHaveBeenCalledWith(mockRes, 'Serviço indisponível');
    });
    test('should handle DNS lookup error', () => {
      const error = {
        code: 'ENOTFOUND',
        message: 'DNS lookup failed'
      };
      ErrorHandler.handleNetworkError(error, mockRes);
      expect(ResponseHelper.badGateway).toHaveBeenCalledWith(mockRes, 'Erro de conectividade');
    });
    test('should handle generic network error', () => {
      const error = {
        message: 'Network error'
      };
      ErrorHandler.handleNetworkError(error, mockRes);
      expect(ResponseHelper.sendError).toHaveBeenCalledWith(mockRes, 'Erro de rede');
    });
  });
  describe('handleControllerError', () => {
    test('should handle validation error in controller', () => {
      const error = {
        name: 'ValidationError',
        message: 'Dados inválidos'
      };
      ErrorHandler.handleControllerError(error, mockRes);
      expect(ResponseHelper.sendValidationError).toHaveBeenCalled();
    });
    test('should handle database error in controller', () => {
      const error = {
        code: '23505',
        message: 'duplicate key'
      };
      ErrorHandler.handleGenericError(mockRes, error);
      expect(ResponseHelper.sendConflict).toHaveBeenCalled();
    });
    test('should handle generic error in controller', () => {
      const error = {
        message: 'Generic error'
      };
      ErrorHandler.handleGenericError(mockRes, error);
      expect(ResponseHelper.sendInternalError).toHaveBeenCalledWith(mockRes, 'Erro interno do servidor');
    });
    test('should log error details', () => {
      const error = new Error('Test error');
      error.stack = 'Error stack trace';
      ErrorHandler.handleGenericError(mockRes, error);
      expect(consoleErrorSpy).toHaveBeenCalledWith('Generic Error during operação:', error);
    });
  });
  describe('expressErrorHandler', () => {
    test('should skip if headers already sent', () => {
      mockRes.headersSent = true;
      const error = new Error('Test error');
      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);
      expect(mockNext).toHaveBeenCalledWith(error);
      expect(ResponseHelper.sendInternalError).not.toHaveBeenCalled();
    });
    test('should handle validation error in Express middleware', () => {
      const error = {
        name: 'ValidationError',
        message: 'Validation failed'
      };
      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);
      expect(ResponseHelper.sendValidationError).toHaveBeenCalled();
      expect(mockNext).not.toHaveBeenCalled();
    });
    test('should handle authentication error in Express middleware', () => {
      const error = {
        name: 'AuthenticationError',
        message: 'Auth failed'
      };
      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);
      expect(ResponseHelper.sendUnauthorized).toHaveBeenCalled();
      expect(mockNext).not.toHaveBeenCalled();
    });
    test('should handle generic error in Express middleware', () => {
      const error = new Error('Generic error');
      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);
      expect(ResponseHelper.sendInternalError).toHaveBeenCalledWith(mockRes, 'Erro interno do servidor');
      expect(mockNext).not.toHaveBeenCalled();
    });
    test('should log request details with error', () => {
      const error = new Error('Test error');
      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);
      expect(consoleErrorSpy).toHaveBeenCalledWith('Express Error Handler:', expect.objectContaining({
        error: 'Test error',
        url: '/api/test',
        method: 'GET'
      }));
    });
  });
  describe('createCustomError', () => {
    test('should create custom error with name and message', () => {
      const error = ErrorHandler.createCustomError('CustomError', 'Custom message');
      expect(error.name).toBe('CustomError');
      expect(error.message).toBe('Custom message');
      expect(error).toBeInstanceOf(Error);
    });
    test('should create custom error with additional properties', () => {
      const details = {
        field: 'email',
        code: 'INVALID'
      };
      const error = ErrorHandler.createCustomError('ValidationError', 'Invalid data', details);
      expect(error.name).toBe('ValidationError');
      expect(error.message).toBe('Invalid data');
      expect(error.details).toEqual(details);
    });
  });
  describe('isOperationalError', () => {
    test('should identify operational errors', () => {
      const operationalErrors = [{
        name: 'ValidationError'
      }, {
        name: 'NotFoundError'
      }, {
        name: 'AuthenticationError'
      }, {
        name: 'AuthorizationError'
      }, {
        code: '23505'
      },
      // Database constraint
      {
        code: 'ECONNREFUSED'
      } // Network error
      ];
      operationalErrors.forEach(error => {
        expect(ErrorHandler.isOperationalError(error)).toBe(true);
      });
    });
    test('should identify non-operational errors', () => {
      const nonOperationalErrors = [new Error('Generic error'), {
        name: 'SyntaxError'
      }, {
        name: 'ReferenceError'
      }, {
        message: 'Unknown error'
      }];
      nonOperationalErrors.forEach(error => {
        expect(ErrorHandler.isOperationalError(error)).toBe(false);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJqZXN0IiwicmVxdWlyZSIsIkVycm9ySGFuZGxlciIsIlJlc3BvbnNlSGVscGVyIiwiY3JlYXRlTW9ja1Jlc3BvbnNlIiwic3RhdHVzIiwiZm4iLCJtb2NrUmV0dXJuVGhpcyIsImpzb24iLCJoZWFkZXJzU2VudCIsImNyZWF0ZU1vY2tSZXF1ZXN0IiwibWV0aG9kIiwidXJsIiwiaXAiLCJoZWFkZXJzIiwiZGVzY3JpYmUiLCJtb2NrUmVzIiwibW9ja1JlcSIsIm1vY2tOZXh0IiwiY29uc29sZUVycm9yU3B5IiwiYmVmb3JlRWFjaCIsInNweU9uIiwiY29uc29sZSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsImNsZWFyQWxsTW9ja3MiLCJhZnRlckVhY2giLCJtb2NrUmVzdG9yZSIsInRlc3QiLCJlcnJvciIsIm5hbWUiLCJtZXNzYWdlIiwiZGV0YWlscyIsImZpZWxkIiwiaGFuZGxlVmFsaWRhdGlvbkVycm9yIiwiZXhwZWN0Iiwic2VuZFZhbGlkYXRpb25FcnJvciIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwiY29kZSIsImNvbnN0cmFpbnQiLCJoYW5kbGVEYXRhYmFzZUVycm9yIiwic2VuZENvbmZsaWN0Iiwic2VuZEludGVybmFsRXJyb3IiLCJoYW5kbGVBdXRoZW50aWNhdGlvbkVycm9yIiwic2VuZFVuYXV0aG9yaXplZCIsImhhbmRsZUF1dGhvcml6YXRpb25FcnJvciIsInNlbmRGb3JiaWRkZW4iLCJoYW5kbGVOb3RGb3VuZEVycm9yIiwic2VuZE5vdEZvdW5kIiwiaGFuZGxlTmV0d29ya0Vycm9yIiwic2VydmljZVVuYXZhaWxhYmxlIiwiYmFkR2F0ZXdheSIsInNlbmRFcnJvciIsImhhbmRsZUNvbnRyb2xsZXJFcnJvciIsInRvSGF2ZUJlZW5DYWxsZWQiLCJoYW5kbGVHZW5lcmljRXJyb3IiLCJFcnJvciIsInN0YWNrIiwiZXhwcmVzc0Vycm9ySGFuZGxlciIsIm5vdCIsIm9iamVjdENvbnRhaW5pbmciLCJjcmVhdGVDdXN0b21FcnJvciIsInRvQmUiLCJ0b0JlSW5zdGFuY2VPZiIsInRvRXF1YWwiLCJvcGVyYXRpb25hbEVycm9ycyIsImZvckVhY2giLCJpc09wZXJhdGlvbmFsRXJyb3IiLCJub25PcGVyYXRpb25hbEVycm9ycyJdLCJzb3VyY2VzIjpbImVycm9ySGFuZGxlci50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGVzdGVzIHVuaXTDoXJpb3MgcGFyYSBFcnJvckhhbmRsZXJcbiAqIFRlc3RhIG8gdHJhdGFtZW50byBjZW50cmFsaXphZG8gZGUgZXJyb3NcbiAqL1xuXG5jb25zdCB7IEVycm9ySGFuZGxlciB9ID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZXJyb3JIYW5kbGVyJyk7XG5jb25zdCB7IFJlc3BvbnNlSGVscGVyIH0gPSByZXF1aXJlKCcuLi8uLi91dGlscy9yZXNwb25zZUhlbHBlcicpO1xuXG4vLyBNb2NrIGRvIFJlc3BvbnNlSGVscGVyXG5qZXN0Lm1vY2soJy4uLy4uL3V0aWxzL3Jlc3BvbnNlSGVscGVyJyk7XG5cbi8vIE1vY2sgZG8gb2JqZXRvIHJlc3BvbnNlIGRvIEV4cHJlc3NcbmNvbnN0IGNyZWF0ZU1vY2tSZXNwb25zZSA9ICgpID0+ICh7XG4gIHN0YXR1czogamVzdC5mbigpLm1vY2tSZXR1cm5UaGlzKCksXG4gIGpzb246IGplc3QuZm4oKS5tb2NrUmV0dXJuVGhpcygpLFxuICBoZWFkZXJzU2VudDogZmFsc2Vcbn0pO1xuXG4vLyBNb2NrIGRvIG9iamV0byByZXF1ZXN0IGRvIEV4cHJlc3NcbmNvbnN0IGNyZWF0ZU1vY2tSZXF1ZXN0ID0gKCkgPT4gKHtcbiAgbWV0aG9kOiAnR0VUJyxcbiAgdXJsOiAnL2FwaS90ZXN0JyxcbiAgaXA6ICcxMjcuMC4wLjEnLFxuICBoZWFkZXJzOiB7ICd1c2VyLWFnZW50JzogJ3Rlc3QtYWdlbnQnIH1cbn0pO1xuXG5kZXNjcmliZSgnRXJyb3JIYW5kbGVyJywgKCkgPT4ge1xuICBsZXQgbW9ja1JlcztcbiAgbGV0IG1vY2tSZXE7XG4gIGxldCBtb2NrTmV4dDtcbiAgbGV0IGNvbnNvbGVFcnJvclNweTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrUmVzID0gY3JlYXRlTW9ja1Jlc3BvbnNlKCk7XG4gICAgbW9ja1JlcSA9IGNyZWF0ZU1vY2tSZXF1ZXN0KCk7XG4gICAgbW9ja05leHQgPSBqZXN0LmZuKCk7XG4gICAgXG4gICAgLy8gTW9jayBjb25zb2xlLmVycm9yIHBhcmEgZXZpdGFyIGxvZ3MgZHVyYW50ZSBvcyB0ZXN0ZXNcbiAgICBjb25zb2xlRXJyb3JTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XG4gICAgXG4gICAgLy8gTGltcGFyIG1vY2tzXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgY29uc29sZUVycm9yU3B5Lm1vY2tSZXN0b3JlKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdoYW5kbGVWYWxpZGF0aW9uRXJyb3InLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSB2YWxpZGF0aW9uIGVycm9yIHdpdGggZGV0YWlscycsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0ge1xuICAgICAgICBuYW1lOiAnVmFsaWRhdGlvbkVycm9yJyxcbiAgICAgICAgbWVzc2FnZTogJ0RhZG9zIGludsOhbGlkb3MnLFxuICAgICAgICBkZXRhaWxzOiBbXG4gICAgICAgICAgeyBmaWVsZDogJ2VtYWlsJywgbWVzc2FnZTogJ0VtYWlsIGludsOhbGlkbycgfSxcbiAgICAgICAgICB7IGZpZWxkOiAncGhvbmUnLCBtZXNzYWdlOiAnVGVsZWZvbmUgb2JyaWdhdMOzcmlvJyB9XG4gICAgICAgIF1cbiAgICAgIH07XG5cbiAgICAgIEVycm9ySGFuZGxlci5oYW5kbGVWYWxpZGF0aW9uRXJyb3IobW9ja1JlcywgZXJyb3IuZGV0YWlscywgZXJyb3IubWVzc2FnZSk7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kVmFsaWRhdGlvbkVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja1JlcyxcbiAgICAgICAgZXJyb3IuZGV0YWlsc1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgdmFsaWRhdGlvbiBlcnJvciB3aXRob3V0IGRldGFpbHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgbmFtZTogJ1ZhbGlkYXRpb25FcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdFcnJvIGRlIHZhbGlkYcOnw6NvJ1xuICAgICAgfTtcblxuICAgICAgRXJyb3JIYW5kbGVyLmhhbmRsZVZhbGlkYXRpb25FcnJvcihtb2NrUmVzLCBbXSwgZXJyb3IubWVzc2FnZSk7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kVmFsaWRhdGlvbkVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja1JlcyxcbiAgICAgICAgW11cbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdoYW5kbGVEYXRhYmFzZUVycm9yJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgdW5pcXVlIGNvbnN0cmFpbnQgdmlvbGF0aW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSB7XG4gICAgICAgIGNvZGU6ICcyMzUwNScsIC8vIFBvc3RncmVTUUwgdW5pcXVlIHZpb2xhdGlvblxuICAgICAgICBtZXNzYWdlOiAnZHVwbGljYXRlIGtleSB2YWx1ZSB2aW9sYXRlcyB1bmlxdWUgY29uc3RyYWludCcsXG4gICAgICAgIGNvbnN0cmFpbnQ6ICdjbGllbnRzX2VtYWlsX3VuaXF1ZSdcbiAgICAgIH07XG5cbiAgICAgIEVycm9ySGFuZGxlci5oYW5kbGVEYXRhYmFzZUVycm9yKG1vY2tSZXMsIGVycm9yKTtcblxuICAgICAgZXhwZWN0KFJlc3BvbnNlSGVscGVyLnNlbmRDb25mbGljdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIG1vY2tSZXMsXG4gICAgICAgICdSZWdpc3RybyBqw6EgZXhpc3RlJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgZm9yZWlnbiBrZXkgY29uc3RyYWludCB2aW9sYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgY29kZTogJzIzNTAzJywgLy8gUG9zdGdyZVNRTCBmb3JlaWduIGtleSB2aW9sYXRpb25cbiAgICAgICAgbWVzc2FnZTogJ3Zpb2xhdGVzIGZvcmVpZ24ga2V5IGNvbnN0cmFpbnQnXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuaGFuZGxlRGF0YWJhc2VFcnJvcihtb2NrUmVzLCBlcnJvcik7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kVmFsaWRhdGlvbkVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja1JlcyxcbiAgICAgICAgWydSZWZlcsOqbmNpYSBpbnbDoWxpZGEnXVxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgbm90IG51bGwgY29uc3RyYWludCB2aW9sYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgY29kZTogJzIzNTAyJywgLy8gUG9zdGdyZVNRTCBub3QgbnVsbCB2aW9sYXRpb25cbiAgICAgICAgbWVzc2FnZTogJ251bGwgdmFsdWUgaW4gY29sdW1uIHZpb2xhdGVzIG5vdC1udWxsIGNvbnN0cmFpbnQnXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuaGFuZGxlRGF0YWJhc2VFcnJvcihtb2NrUmVzLCBlcnJvcik7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kSW50ZXJuYWxFcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIG1vY2tSZXMsXG4gICAgICAgICdFcnJvIGludGVybm8gZG8gc2Vydmlkb3InXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjb25uZWN0aW9uIHRpbWVvdXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgY29kZTogJ0VUSU1FRE9VVCcsXG4gICAgICAgIG1lc3NhZ2U6ICdDb25uZWN0aW9uIHRpbWVvdXQnXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuaGFuZGxlRGF0YWJhc2VFcnJvcihtb2NrUmVzLCBlcnJvcik7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kSW50ZXJuYWxFcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIG1vY2tSZXMsXG4gICAgICAgICdFcnJvIGludGVybm8gZG8gc2Vydmlkb3InXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBnZW5lcmljIGRhdGFiYXNlIGVycm9yJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSB7XG4gICAgICAgIG1lc3NhZ2U6ICdHZW5lcmljIGRhdGFiYXNlIGVycm9yJ1xuICAgICAgfTtcblxuICAgICAgRXJyb3JIYW5kbGVyLmhhbmRsZURhdGFiYXNlRXJyb3IobW9ja1JlcywgZXJyb3IpO1xuXG4gICAgICBleHBlY3QoUmVzcG9uc2VIZWxwZXIuc2VuZEludGVybmFsRXJyb3IpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBtb2NrUmVzLFxuICAgICAgICAnRXJybyBpbnRlcm5vIGRvIHNlcnZpZG9yJ1xuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2hhbmRsZUF1dGhlbnRpY2F0aW9uRXJyb3InLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBhdXRoZW50aWNhdGlvbiBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0ge1xuICAgICAgICBuYW1lOiAnQXV0aGVudGljYXRpb25FcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdUb2tlbiBpbnbDoWxpZG8nXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuaGFuZGxlQXV0aGVudGljYXRpb25FcnJvcihlcnJvciwgbW9ja1Jlcyk7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kVW5hdXRob3JpemVkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja1JlcyxcbiAgICAgICAgJ1Rva2VuIGludsOhbGlkbydcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgdXNlIGRlZmF1bHQgbWVzc2FnZSBmb3IgYXV0aGVudGljYXRpb24gZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgbmFtZTogJ0F1dGhlbnRpY2F0aW9uRXJyb3InXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuaGFuZGxlQXV0aGVudGljYXRpb25FcnJvcihlcnJvciwgbW9ja1Jlcyk7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kVW5hdXRob3JpemVkKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja1JlcyxcbiAgICAgICAgJ0ZhbGhhIG5hIGF1dGVudGljYcOnw6NvJ1xuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2hhbmRsZUF1dGhvcml6YXRpb25FcnJvcicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGF1dGhvcml6YXRpb24gZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgbmFtZTogJ0F1dGhvcml6YXRpb25FcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdBY2Vzc28gbmVnYWRvJ1xuICAgICAgfTtcblxuICAgICAgRXJyb3JIYW5kbGVyLmhhbmRsZUF1dGhvcml6YXRpb25FcnJvcihlcnJvciwgbW9ja1Jlcyk7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kRm9yYmlkZGVuKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja1JlcyxcbiAgICAgICAgJ0FjZXNzbyBuZWdhZG8nXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHVzZSBkZWZhdWx0IG1lc3NhZ2UgZm9yIGF1dGhvcml6YXRpb24gZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgbmFtZTogJ0F1dGhvcml6YXRpb25FcnJvcidcbiAgICAgIH07XG5cbiAgICAgIEVycm9ySGFuZGxlci5oYW5kbGVBdXRob3JpemF0aW9uRXJyb3IoZXJyb3IsIG1vY2tSZXMpO1xuXG4gICAgICBleHBlY3QoUmVzcG9uc2VIZWxwZXIuc2VuZEZvcmJpZGRlbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIG1vY2tSZXMsXG4gICAgICAgICdBY2Vzc28gbsOjbyBhdXRvcml6YWRvJ1xuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2hhbmRsZU5vdEZvdW5kRXJyb3InLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBub3QgZm91bmQgZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgbmFtZTogJ05vdEZvdW5kRXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnQ2xpZW50ZSBuw6NvIGVuY29udHJhZG8nXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuaGFuZGxlTm90Rm91bmRFcnJvcihlcnJvciwgbW9ja1Jlcyk7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kTm90Rm91bmQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBtb2NrUmVzLFxuICAgICAgICAnQ2xpZW50ZSBuw6NvIGVuY29udHJhZG8nXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIHVzZSBkZWZhdWx0IG1lc3NhZ2UgZm9yIG5vdCBmb3VuZCBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0ge1xuICAgICAgICBuYW1lOiAnTm90Rm91bmRFcnJvcidcbiAgICAgIH07XG5cbiAgICAgIEVycm9ySGFuZGxlci5oYW5kbGVOb3RGb3VuZEVycm9yKGVycm9yLCBtb2NrUmVzKTtcblxuICAgICAgZXhwZWN0KFJlc3BvbnNlSGVscGVyLnNlbmROb3RGb3VuZCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIG1vY2tSZXMsXG4gICAgICAgICdSZWN1cnNvIG7Do28gZW5jb250cmFkbydcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdoYW5kbGVOZXR3b3JrRXJyb3InLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBjb25uZWN0aW9uIHJlZnVzZWQgZXJyb3InLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgY29kZTogJ0VDT05OUkVGVVNFRCcsXG4gICAgICAgIG1lc3NhZ2U6ICdDb25uZWN0aW9uIHJlZnVzZWQnXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuaGFuZGxlTmV0d29ya0Vycm9yKGVycm9yLCBtb2NrUmVzKTtcblxuICAgICAgZXhwZWN0KFJlc3BvbnNlSGVscGVyLnNlcnZpY2VVbmF2YWlsYWJsZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIG1vY2tSZXMsXG4gICAgICAgICdTZXJ2acOnbyBpbmRpc3BvbsOtdmVsJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHRlc3QoJ3Nob3VsZCBoYW5kbGUgRE5TIGxvb2t1cCBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0ge1xuICAgICAgICBjb2RlOiAnRU5PVEZPVU5EJyxcbiAgICAgICAgbWVzc2FnZTogJ0ROUyBsb29rdXAgZmFpbGVkJ1xuICAgICAgfTtcblxuICAgICAgRXJyb3JIYW5kbGVyLmhhbmRsZU5ldHdvcmtFcnJvcihlcnJvciwgbW9ja1Jlcyk7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5iYWRHYXRld2F5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja1JlcyxcbiAgICAgICAgJ0Vycm8gZGUgY29uZWN0aXZpZGFkZSdcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGdlbmVyaWMgbmV0d29yayBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0ge1xuICAgICAgICBtZXNzYWdlOiAnTmV0d29yayBlcnJvcidcbiAgICAgIH07XG5cbiAgICAgIEVycm9ySGFuZGxlci5oYW5kbGVOZXR3b3JrRXJyb3IoZXJyb3IsIG1vY2tSZXMpO1xuXG4gICAgICBleHBlY3QoUmVzcG9uc2VIZWxwZXIuc2VuZEVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja1JlcyxcbiAgICAgICAgJ0Vycm8gZGUgcmVkZSdcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdoYW5kbGVDb250cm9sbGVyRXJyb3InLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSB2YWxpZGF0aW9uIGVycm9yIGluIGNvbnRyb2xsZXInLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgbmFtZTogJ1ZhbGlkYXRpb25FcnJvcicsXG4gICAgICAgIG1lc3NhZ2U6ICdEYWRvcyBpbnbDoWxpZG9zJ1xuICAgICAgfTtcblxuICAgICAgRXJyb3JIYW5kbGVyLmhhbmRsZUNvbnRyb2xsZXJFcnJvcihlcnJvciwgbW9ja1Jlcyk7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kVmFsaWRhdGlvbkVycm9yKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGRhdGFiYXNlIGVycm9yIGluIGNvbnRyb2xsZXInLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgY29kZTogJzIzNTA1JyxcbiAgICAgICAgbWVzc2FnZTogJ2R1cGxpY2F0ZSBrZXknXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuaGFuZGxlR2VuZXJpY0Vycm9yKG1vY2tSZXMsIGVycm9yKTtcblxuICAgICAgZXhwZWN0KFJlc3BvbnNlSGVscGVyLnNlbmRDb25mbGljdCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBnZW5lcmljIGVycm9yIGluIGNvbnRyb2xsZXInLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgbWVzc2FnZTogJ0dlbmVyaWMgZXJyb3InXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuaGFuZGxlR2VuZXJpY0Vycm9yKG1vY2tSZXMsIGVycm9yKTtcblxuICAgICAgZXhwZWN0KFJlc3BvbnNlSGVscGVyLnNlbmRJbnRlcm5hbEVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgbW9ja1JlcyxcbiAgICAgICAgJ0Vycm8gaW50ZXJubyBkbyBzZXJ2aWRvcidcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgbG9nIGVycm9yIGRldGFpbHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcignVGVzdCBlcnJvcicpO1xuICAgICAgZXJyb3Iuc3RhY2sgPSAnRXJyb3Igc3RhY2sgdHJhY2UnO1xuXG4gICAgICBFcnJvckhhbmRsZXIuaGFuZGxlR2VuZXJpY0Vycm9yKG1vY2tSZXMsIGVycm9yKTtcblxuICAgICAgZXhwZWN0KGNvbnNvbGVFcnJvclNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdHZW5lcmljIEVycm9yIGR1cmluZyBvcGVyYcOnw6NvOicsXG4gICAgICAgIGVycm9yXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZXhwcmVzc0Vycm9ySGFuZGxlcicsICgpID0+IHtcbiAgICB0ZXN0KCdzaG91bGQgc2tpcCBpZiBoZWFkZXJzIGFscmVhZHkgc2VudCcsICgpID0+IHtcbiAgICAgIG1vY2tSZXMuaGVhZGVyc1NlbnQgPSB0cnVlO1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ1Rlc3QgZXJyb3InKTtcblxuICAgICAgRXJyb3JIYW5kbGVyLmV4cHJlc3NFcnJvckhhbmRsZXIoZXJyb3IsIG1vY2tSZXEsIG1vY2tSZXMsIG1vY2tOZXh0KTtcblxuICAgICAgZXhwZWN0KG1vY2tOZXh0KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChlcnJvcik7XG4gICAgICBleHBlY3QoUmVzcG9uc2VIZWxwZXIuc2VuZEludGVybmFsRXJyb3IpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIHZhbGlkYXRpb24gZXJyb3IgaW4gRXhwcmVzcyBtaWRkbGV3YXJlJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSB7XG4gICAgICAgIG5hbWU6ICdWYWxpZGF0aW9uRXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnVmFsaWRhdGlvbiBmYWlsZWQnXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuZXhwcmVzc0Vycm9ySGFuZGxlcihlcnJvciwgbW9ja1JlcSwgbW9ja1JlcywgbW9ja05leHQpO1xuXG4gICAgICBleHBlY3QoUmVzcG9uc2VIZWxwZXIuc2VuZFZhbGlkYXRpb25FcnJvcikudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tOZXh0KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBhdXRoZW50aWNhdGlvbiBlcnJvciBpbiBFeHByZXNzIG1pZGRsZXdhcmUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlcnJvciA9IHtcbiAgICAgICAgbmFtZTogJ0F1dGhlbnRpY2F0aW9uRXJyb3InLFxuICAgICAgICBtZXNzYWdlOiAnQXV0aCBmYWlsZWQnXG4gICAgICB9O1xuXG4gICAgICBFcnJvckhhbmRsZXIuZXhwcmVzc0Vycm9ySGFuZGxlcihlcnJvciwgbW9ja1JlcSwgbW9ja1JlcywgbW9ja05leHQpO1xuXG4gICAgICBleHBlY3QoUmVzcG9uc2VIZWxwZXIuc2VuZFVuYXV0aG9yaXplZCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tOZXh0KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBnZW5lcmljIGVycm9yIGluIEV4cHJlc3MgbWlkZGxld2FyZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdHZW5lcmljIGVycm9yJyk7XG5cbiAgICAgIEVycm9ySGFuZGxlci5leHByZXNzRXJyb3JIYW5kbGVyKGVycm9yLCBtb2NrUmVxLCBtb2NrUmVzLCBtb2NrTmV4dCk7XG5cbiAgICAgIGV4cGVjdChSZXNwb25zZUhlbHBlci5zZW5kSW50ZXJuYWxFcnJvcikudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIG1vY2tSZXMsXG4gICAgICAgICdFcnJvIGludGVybm8gZG8gc2Vydmlkb3InXG4gICAgICApO1xuICAgICAgZXhwZWN0KG1vY2tOZXh0KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgdGVzdCgnc2hvdWxkIGxvZyByZXF1ZXN0IGRldGFpbHMgd2l0aCBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdUZXN0IGVycm9yJyk7XG5cbiAgICAgIEVycm9ySGFuZGxlci5leHByZXNzRXJyb3JIYW5kbGVyKGVycm9yLCBtb2NrUmVxLCBtb2NrUmVzLCBtb2NrTmV4dCk7XG5cbiAgICAgIGV4cGVjdChjb25zb2xlRXJyb3JTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnRXhwcmVzcyBFcnJvciBIYW5kbGVyOicsXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICBlcnJvcjogJ1Rlc3QgZXJyb3InLFxuICAgICAgICAgIHVybDogJy9hcGkvdGVzdCcsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJ1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NyZWF0ZUN1c3RvbUVycm9yJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBjcmVhdGUgY3VzdG9tIGVycm9yIHdpdGggbmFtZSBhbmQgbWVzc2FnZScsICgpID0+IHtcbiAgICAgIGNvbnN0IGVycm9yID0gRXJyb3JIYW5kbGVyLmNyZWF0ZUN1c3RvbUVycm9yKCdDdXN0b21FcnJvcicsICdDdXN0b20gbWVzc2FnZScpO1xuXG4gICAgICBleHBlY3QoZXJyb3IubmFtZSkudG9CZSgnQ3VzdG9tRXJyb3InKTtcbiAgICAgIGV4cGVjdChlcnJvci5tZXNzYWdlKS50b0JlKCdDdXN0b20gbWVzc2FnZScpO1xuICAgICAgZXhwZWN0KGVycm9yKS50b0JlSW5zdGFuY2VPZihFcnJvcik7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgY3JlYXRlIGN1c3RvbSBlcnJvciB3aXRoIGFkZGl0aW9uYWwgcHJvcGVydGllcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGRldGFpbHMgPSB7IGZpZWxkOiAnZW1haWwnLCBjb2RlOiAnSU5WQUxJRCcgfTtcbiAgICAgIGNvbnN0IGVycm9yID0gRXJyb3JIYW5kbGVyLmNyZWF0ZUN1c3RvbUVycm9yKCdWYWxpZGF0aW9uRXJyb3InLCAnSW52YWxpZCBkYXRhJywgZGV0YWlscyk7XG5cbiAgICAgIGV4cGVjdChlcnJvci5uYW1lKS50b0JlKCdWYWxpZGF0aW9uRXJyb3InKTtcbiAgICAgIGV4cGVjdChlcnJvci5tZXNzYWdlKS50b0JlKCdJbnZhbGlkIGRhdGEnKTtcbiAgICAgIGV4cGVjdChlcnJvci5kZXRhaWxzKS50b0VxdWFsKGRldGFpbHMpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnaXNPcGVyYXRpb25hbEVycm9yJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBpZGVudGlmeSBvcGVyYXRpb25hbCBlcnJvcnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBvcGVyYXRpb25hbEVycm9ycyA9IFtcbiAgICAgICAgeyBuYW1lOiAnVmFsaWRhdGlvbkVycm9yJyB9LFxuICAgICAgICB7IG5hbWU6ICdOb3RGb3VuZEVycm9yJyB9LFxuICAgICAgICB7IG5hbWU6ICdBdXRoZW50aWNhdGlvbkVycm9yJyB9LFxuICAgICAgICB7IG5hbWU6ICdBdXRob3JpemF0aW9uRXJyb3InIH0sXG4gICAgICAgIHsgY29kZTogJzIzNTA1JyB9LCAvLyBEYXRhYmFzZSBjb25zdHJhaW50XG4gICAgICAgIHsgY29kZTogJ0VDT05OUkVGVVNFRCcgfSAvLyBOZXR3b3JrIGVycm9yXG4gICAgICBdO1xuXG4gICAgICBvcGVyYXRpb25hbEVycm9ycy5mb3JFYWNoKGVycm9yID0+IHtcbiAgICAgICAgZXhwZWN0KEVycm9ySGFuZGxlci5pc09wZXJhdGlvbmFsRXJyb3IoZXJyb3IpKS50b0JlKHRydWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdzaG91bGQgaWRlbnRpZnkgbm9uLW9wZXJhdGlvbmFsIGVycm9ycycsICgpID0+IHtcbiAgICAgIGNvbnN0IG5vbk9wZXJhdGlvbmFsRXJyb3JzID0gW1xuICAgICAgICBuZXcgRXJyb3IoJ0dlbmVyaWMgZXJyb3InKSxcbiAgICAgICAgeyBuYW1lOiAnU3ludGF4RXJyb3InIH0sXG4gICAgICAgIHsgbmFtZTogJ1JlZmVyZW5jZUVycm9yJyB9LFxuICAgICAgICB7IG1lc3NhZ2U6ICdVbmtub3duIGVycm9yJyB9XG4gICAgICBdO1xuXG4gICAgICBub25PcGVyYXRpb25hbEVycm9ycy5mb3JFYWNoKGVycm9yID0+IHtcbiAgICAgICAgZXhwZWN0KEVycm9ySGFuZGxlci5pc09wZXJhdGlvbmFsRXJyb3IoZXJyb3IpKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pOyJdLCJtYXBwaW5ncyI6Ijs7QUFRQTtBQUNBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQzs7QUFFdkM7QUFBQSxTQUFBRCxZQUFBO0VBQUE7SUFBQUU7RUFBQSxJQUFBQyxPQUFBO0VBQUFILFdBQUEsR0FBQUEsQ0FBQSxLQUFBRSxJQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBO0FBWEE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTTtFQUFFRTtBQUFhLENBQUMsR0FBR0QsT0FBTyxDQUFDLDBCQUEwQixDQUFDO0FBQzVELE1BQU07RUFBRUU7QUFBZSxDQUFDLEdBQUdGLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQztBQU1oRSxNQUFNRyxrQkFBa0IsR0FBR0EsQ0FBQSxNQUFPO0VBQ2hDQyxNQUFNLEVBQUVMLElBQUksQ0FBQ00sRUFBRSxDQUFDLENBQUMsQ0FBQ0MsY0FBYyxDQUFDLENBQUM7RUFDbENDLElBQUksRUFBRVIsSUFBSSxDQUFDTSxFQUFFLENBQUMsQ0FBQyxDQUFDQyxjQUFjLENBQUMsQ0FBQztFQUNoQ0UsV0FBVyxFQUFFO0FBQ2YsQ0FBQyxDQUFDOztBQUVGO0FBQ0EsTUFBTUMsaUJBQWlCLEdBQUdBLENBQUEsTUFBTztFQUMvQkMsTUFBTSxFQUFFLEtBQUs7RUFDYkMsR0FBRyxFQUFFLFdBQVc7RUFDaEJDLEVBQUUsRUFBRSxXQUFXO0VBQ2ZDLE9BQU8sRUFBRTtJQUFFLFlBQVksRUFBRTtFQUFhO0FBQ3hDLENBQUMsQ0FBQztBQUVGQyxRQUFRLENBQUMsY0FBYyxFQUFFLE1BQU07RUFDN0IsSUFBSUMsT0FBTztFQUNYLElBQUlDLE9BQU87RUFDWCxJQUFJQyxRQUFRO0VBQ1osSUFBSUMsZUFBZTtFQUVuQkMsVUFBVSxDQUFDLE1B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