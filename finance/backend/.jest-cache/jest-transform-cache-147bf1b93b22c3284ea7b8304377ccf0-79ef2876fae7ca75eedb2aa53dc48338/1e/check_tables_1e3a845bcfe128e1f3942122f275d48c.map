{"version":3,"names":["cov_1af9suvssi","actualCoverage","s","require","config","createClient","supabase","process","env","SUPABASE_URL","SUPABASE_ANON_KEY","checkTables","f","console","log","tables","existingTables","table","count","error","from","select","head","b","push","name","err","length","catch"],"sources":["check_tables.js"],"sourcesContent":["require('dotenv').config();\nconst { createClient } = require('@supabase/supabase-js');\n\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);\n\nasync function checkTables() {\n  console.log('üîç VERIFICANDO TABELAS EXISTENTES');\n  console.log('==================================================');\n  \n  const tables = ['clients', 'contracts', 'payments', 'companies', 'branches', 'users'];\n  const existingTables = [];\n  \n  for (const table of tables) {\n    try {\n      const { count, error } = await supabase\n        .from(table)\n        .select('*', { count: 'exact', head: true });\n      \n      if (!error) {\n        console.log(`‚úÖ Tabela '${table}': ${count} registros`);\n        existingTables.push({ name: table, count });\n      }\n    } catch (err) {\n      console.log(`‚ùå Tabela '${table}': n√£o existe ou inacess√≠vel`);\n    }\n  }\n  \n  console.log('\\nüìä RESUMO:');\n  console.log(`Total de tabelas encontradas: ${existingTables.length}`);\n  \n  return existingTables;\n}\n\ncheckTables().catch(console.error);"],"mappings":"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","ignoreList":[]}