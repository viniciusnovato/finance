{"version":3,"names":["cov_1szv0jp9fb","actualCoverage","supabaseAdmin","s","require","formatDateForDB","ContractRepository","constructor","f","tableName","paymentsTable","clientsTable","findAll","offset","b","limit","filters","query","from","select","range","order","ascending","status","eq","client_id","start_date","gte","end_date","lte","data","error","Error","message","findById","id","single","code","findByNumber","contractNumber","create","contractData","insert","update","delete","count","head","checkClientExists","clientId","hasPayments","contractId","length","getPayments","countPayments","createInstallments","installments","paymentsData","map","installment","contract_id","amount","due_date","installment_number","number","getStats","payments","paidPayments","filter","p","pendingPayments","paid_value","reduce","sum","payment_count","pending_payments","total_payments","search","searchTerm","or","countSearch","updateStatus","updated_at","Date","toISOString","getContractsByPeriod","startDate","endDate","getRevenueByPeriod","module","exports"],"sources":["ContractRepository.js"],"sourcesContent":["const { supabaseAdmin } = require('../config/supabase');\nconst { formatDateForDB } = require('../utils/formatters');\n\nclass ContractRepository {\n  constructor() {\n    this.tableName = 'contracts';\n    this.paymentsTable = 'payments';\n    this.clientsTable = 'clients';\n  }\n\n  async findAll(offset = 0, limit = 10, filters = {}) {\n    try {\n      let query = supabaseAdmin\n        .from(this.tableName)\n        .select(`\n          *,\n          client:clients(id, name, email, cpf_cnpj)\n        `)\n        .range(offset, offset + limit - 1)\n        .order('created_at', { ascending: false });\n\n      // Aplicar filtros\n      if (filters.status) {\n        query = query.eq('status', filters.status);\n      }\n      if (filters.client_id) {\n        query = query.eq('client_id', filters.client_id);\n      }\n      if (filters.start_date) {\n        query = query.gte('start_date', filters.start_date);\n      }\n      if (filters.end_date) {\n        query = query.lte('end_date', filters.end_date);\n      }\n\n      const { data, error } = await query;\n      if (error) throw error;\n\n      return data || [];\n    } catch (error) {\n      throw new Error(`Erro ao buscar contratos: ${error.message}`);\n    }\n  }\n\n  async findById(id) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.tableName)\n        .select(`\n          *,\n          client:clients(id, name, email, cpf_cnpj, phone)\n        `)\n        .eq('id', id)\n        .single();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      return data;\n    } catch (error) {\n      throw new Error(`Erro ao buscar contrato por ID: ${error.message}`);\n    }\n  }\n\n  async findByNumber(contractNumber) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.tableName)\n        .select('*')\n        .eq('contract_number', contractNumber)\n        .single();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      return data;\n    } catch (error) {\n      throw new Error(`Erro ao buscar contrato por número: ${error.message}`);\n    }\n  }\n\n  async create(contractData) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.tableName)\n        .insert([contractData])\n        .select(`\n          *,\n          client:clients(id, name, email, cpf_cnpj)\n        `)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      throw new Error(`Erro ao criar contrato: ${error.message}`);\n    }\n  }\n\n  async update(id, contractData) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.tableName)\n        .update(contractData)\n        .eq('id', id)\n        .select(`\n          *,\n          client:clients(id, name, email, cpf_cnpj)\n        `)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      throw new Error(`Erro ao atualizar contrato: ${error.message}`);\n    }\n  }\n\n  async delete(id) {\n    try {\n      const { error } = await supabaseAdmin\n        .from(this.tableName)\n        .delete()\n        .eq('id', id);\n\n      if (error) throw error;\n      return true;\n    } catch (error) {\n      throw new Error(`Erro ao excluir contrato: ${error.message}`);\n    }\n  }\n\n  async count(filters = {}) {\n    try {\n      let query = supabaseAdmin\n        .from(this.tableName)\n        .select('id', { count: 'exact', head: true });\n\n      // Aplicar filtros\n      if (filters.status) {\n        query = query.eq('status', filters.status);\n      }\n      if (filters.client_id) {\n        query = query.eq('client_id', filters.client_id);\n      }\n      if (filters.start_date) {\n        query = query.gte('start_date', filters.start_date);\n      }\n      if (filters.end_date) {\n        query = query.lte('end_date', filters.end_date);\n      }\n\n      const { count, error } = await query;\n      if (error) throw error;\n\n      return count || 0;\n    } catch (error) {\n      throw new Error(`Erro ao contar contratos: ${error.message}`);\n    }\n  }\n\n  async checkClientExists(clientId) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.clientsTable)\n        .select('id')\n        .eq('id', clientId)\n        .single();\n\n      if (error && error.code !== 'PGRST116') throw error;\n      return !!data;\n    } catch (error) {\n      throw new Error(`Erro ao verificar cliente: ${error.message}`);\n    }\n  }\n\n  async hasPayments(contractId) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.paymentsTable)\n        .select('id')\n        .eq('contract_id', contractId)\n        .limit(1);\n\n      if (error) throw error;\n      return data && data.length > 0;\n    } catch (error) {\n      throw new Error(`Erro ao verificar pagamentos: ${error.message}`);\n    }\n  }\n\n  async getPayments(contractId, offset = 0, limit = 10) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.paymentsTable)\n        .select('*')\n        .eq('contract_id', contractId)\n        .range(offset, offset + limit - 1)\n        .order('due_date', { ascending: true });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      throw new Error(`Erro ao buscar pagamentos do contrato: ${error.message}`);\n    }\n  }\n\n  async countPayments(contractId) {\n    try {\n      const { count, error } = await supabaseAdmin\n        .from(this.paymentsTable)\n        .select('id', { count: 'exact', head: true })\n        .eq('contract_id', contractId);\n\n      if (error) throw error;\n      return count || 0;\n    } catch (error) {\n      throw new Error(`Erro ao contar pagamentos do contrato: ${error.message}`);\n    }\n  }\n\n  async createInstallments(contractId, installments) {\n    try {\n      const paymentsData = installments.map(installment => ({\n        contract_id: contractId,\n        amount: installment.amount,\n        due_date: formatDateForDB(installment.due_date),\n        status: 'pendente',\n        installment_number: installment.number\n      }));\n\n      const { data, error } = await supabaseAdmin\n        .from(this.paymentsTable)\n        .insert(paymentsData)\n        .select('*');\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      throw new Error(`Erro ao criar parcelas: ${error.message}`);\n    }\n  }\n\n  async getStats(contractId) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.paymentsTable)\n        .select('amount, status')\n        .eq('contract_id', contractId);\n\n      if (error) throw error;\n\n      const payments = data || [];\n      const paidPayments = payments.filter(p => p.status === 'pago');\n      const pendingPayments = payments.filter(p => p.status === 'pendente');\n\n      return {\n        paid_value: paidPayments.reduce((sum, p) => sum + (p.amount || 0), 0),\n        payment_count: paidPayments.length,\n        pending_payments: pendingPayments.length,\n        total_payments: payments.length\n      };\n    } catch (error) {\n      throw new Error(`Erro ao calcular estatísticas do contrato: ${error.message}`);\n    }\n  }\n\n  async search(searchTerm, offset = 0, limit = 10) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.tableName)\n        .select(`\n          *,\n          client:clients(id, name, email, cpf_cnpj)\n        `)\n        .or(`contract_number.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,clients.name.ilike.%${searchTerm}%`)\n        .range(offset, offset + limit - 1)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      throw new Error(`Erro ao buscar contratos: ${error.message}`);\n    }\n  }\n\n  async countSearch(searchTerm) {\n    try {\n      const { count, error } = await supabaseAdmin\n        .from(this.tableName)\n        .select('id', { count: 'exact', head: true })\n        .or(`contract_number.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,clients.name.ilike.%${searchTerm}%`);\n\n      if (error) throw error;\n      return count || 0;\n    } catch (error) {\n      throw new Error(`Erro ao contar busca de contratos: ${error.message}`);\n    }\n  }\n\n  async updateStatus(id, status) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.tableName)\n        .update({ status, updated_at: new Date().toISOString() })\n        .eq('id', id)\n        .select(`\n          *,\n          client:clients(id, name, email, cpf_cnpj)\n        `)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      throw new Error(`Erro ao atualizar status do contrato: ${error.message}`);\n    }\n  }\n\n  // Métodos para estatísticas e relatórios\n  async getContractsByPeriod(startDate, endDate) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.tableName)\n        .select('id, total_value, status, created_at')\n        .gte('created_at', startDate)\n        .lte('created_at', endDate)\n        .order('created_at', { ascending: true });\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      throw new Error(`Erro ao buscar contratos por período: ${error.message}`);\n    }\n  }\n\n  async getRevenueByPeriod(startDate, endDate) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from(this.tableName)\n        .select('total_value, created_at')\n        .gte('created_at', startDate)\n        .lte('created_at', endDate)\n        .eq('status', 'ativo');\n\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      throw new Error(`Erro ao buscar receita por período: ${error.message}`);\n    }\n  }\n}\n\nmodule.exports = ContractRepository;"],"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","ignoreList":[]}