{"version":3,"names":["cov_2h9ouvvuka","actualCoverage","s","require","config","createClient","fs","csv","path","supabase","process","env","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","CSV_DIR","getExistingData","f","console","log","data","contracts","error","contractsError","from","select","b","clients","clientsError","length","generateUUID","replace","c","r","Math","random","v","toString","importPayments","defaultCompanyId","defaultBranchId","substring","contractMap","Map","forEach","contract","set","contract_number","count","success","errors","contractNotFound","paymentsFile","join","existsSync","Promise","resolve","createReadStream","pipe","on","row","get","contract_id","paymentData","company_id","branch_id","id","client_id","installment_number","parseInt","due_date","Date","toISOString","split","amount","parseFloat","paid_amount","payment_date","payment_method","status","late_fee","discount","notes","receipt_number","insert","message","min","catch"],"sources":["import_payments_final.js"],"sourcesContent":["require('dotenv').config();\nconst { createClient } = require('@supabase/supabase-js');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst path = require('path');\n\n// Usar service_role key para ter permiss√µes administrativas\nconst supabase = createClient(\n  process.env.SUPABASE_URL, \n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nconst CSV_DIR = '/Users/insitutoareluna/Documents/finance/importBD';\n\nasync function getExistingData() {\n  console.log('üîç Verificando dados existentes...');\n  \n  // Buscar contratos existentes\n  const { data: contracts, error: contractsError } = await supabase\n    .from('contracts')\n    .select('id, contract_number, client_id');\n  \n  if (contractsError) {\n    console.error('Erro ao buscar contratos:', contractsError);\n    return { contracts: [], clients: [] };\n  }\n  \n  // Buscar clientes existentes\n  const { data: clients, error: clientsError } = await supabase\n    .from('clients')\n    .select('id');\n  \n  if (clientsError) {\n    console.error('Erro ao buscar clientes:', clientsError);\n    return { contracts, clients: [] };\n  }\n  \n  console.log(`üìã Encontrados: ${contracts.length} contratos, ${clients.length} clientes`);\n  \n  return { contracts, clients };\n}\n\n// Fun√ß√£o para criar IDs UUID simples (para company_id e branch_id)\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0;\n    const v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nasync function importPayments() {\n  console.log('üí∞ IMPORTA√á√ÉO DE PAGAMENTOS FINAL');\n  console.log('==================================');\n  \n  // Obter dados existentes\n  const { contracts, clients } = await getExistingData();\n  \n  if (contracts.length === 0) {\n    console.error('‚ùå Nenhum contrato encontrado para vincular pagamentos');\n    return;\n  }\n  \n  // Criar IDs fixos para company_id e branch_id (j√° que essas tabelas n√£o existem)\n  const defaultCompanyId = generateUUID();\n  const defaultBranchId = generateUUID();\n  \n  console.log(`üè¢ Usando IDs padr√£o - Company: ${defaultCompanyId.substring(0, 8)}..., Branch: ${defaultBranchId.substring(0, 8)}...`);\n  \n  // Criar mapeamento de contratos por n√∫mero\n  const contractMap = new Map();\n  contracts.forEach(contract => {\n    contractMap.set(contract.contract_number, contract);\n  });\n  \n  let count = 0;\n  let success = 0;\n  let errors = 0;\n  let contractNotFound = 0;\n  \n  const paymentsFile = path.join(CSV_DIR, 'payments.csv');\n  \n  if (!fs.existsSync(paymentsFile)) {\n    console.error('‚ùå Arquivo payments.csv n√£o encontrado em:', paymentsFile);\n    return;\n  }\n  \n  return new Promise((resolve) => {\n    fs.createReadStream(paymentsFile)\n      .pipe(csv())\n      .on('data', async (row) => {\n        count++;\n        \n        // Processar apenas os primeiros 5 para teste\n        if (count > 5) return;\n        \n        try {\n          // Tentar encontrar contrato correspondente\n          let contract = null;\n          \n          // Primeiro, tentar por contract_number\n          if (row.contract_number) {\n            contract = contractMap.get(row.contract_number);\n          }\n          \n          // Se n√£o encontrou, tentar por contract_id (assumindo que √© o n√∫mero)\n          if (!contract && row.contract_id) {\n            contract = contractMap.get(row.contract_id);\n          }\n          \n          // Se ainda n√£o encontrou, usar o primeiro contrato dispon√≠vel para teste\n          if (!contract) {\n            contract = contracts[0]; // Usar primeiro contrato para teste\n            console.log(`‚ö†Ô∏è  Usando contrato padr√£o (${contract.contract_number}) para pagamento ${count}`);\n          }\n          \n          const paymentData = {\n            company_id: defaultCompanyId,\n            branch_id: defaultBranchId,\n            contract_id: contract.id,\n            client_id: contract.client_id,\n            installment_number: parseInt(row.installment_number) || count,\n            due_date: row.due_date || new Date().toISOString().split('T')[0],\n            amount: parseFloat(row.amount) || (100.00 + count * 10), // Valor vari√°vel para teste\n            paid_amount: parseFloat(row.paid_amount) || 0,\n            payment_date: row.payment_date || null,\n            payment_method: (row.payment_method || 'boleto').substring(0, 20),\n            status: row.status || 'pending',\n            late_fee: parseFloat(row.late_fee) || 0,\n            discount: parseFloat(row.discount) || 0,\n            notes: row.notes?.substring(0, 1000) || `Pagamento importado ${count}`,\n            receipt_number: row.receipt_number?.substring(0, 100) || null\n          };\n          \n          console.log(`üìù Inserindo pagamento ${count}:`, {\n            contract: contract.contract_number,\n            amount: paymentData.amount,\n            due_date: paymentData.due_date\n          });\n          \n          const { data, error } = await supabase\n            .from('payments')\n            .insert([paymentData])\n            .select();\n          \n          if (error) {\n            console.error(`‚ùå Erro ao inserir pagamento ${count}:`, error.message);\n            console.error('Dados enviados:', paymentData);\n            errors++;\n          } else {\n            console.log(`‚úÖ Pagamento ${count} inserido com sucesso! ID: ${data[0].id}`);\n            success++;\n          }\n        } catch (error) {\n          console.error(`‚ùå Erro ao processar pagamento ${count}:`, error.message);\n          errors++;\n        }\n      })\n      .on('end', () => {\n        console.log('\\nüìä RESUMO DA IMPORTA√á√ÉO DE PAGAMENTOS:');\n        console.log(`Total processados: ${Math.min(count, 5)}`);\n        console.log(`Sucessos: ${success}`);\n        console.log(`Erros: ${errors}`);\n        console.log(`Contratos n√£o encontrados: ${contractNotFound}`);\n        \n        if (success > 0) {\n          console.log('\\nüéâ Importa√ß√£o conclu√≠da com sucesso!');\n          console.log('Pr√≥ximos passos sugeridos:');\n          console.log('1. Verificar os pagamentos inseridos no banco');\n          console.log('2. Ajustar os valores e datas conforme necess√°rio');\n          console.log('3. Executar importa√ß√£o completa se os testes estiverem OK');\n        }\n        \n        resolve({ count: Math.min(count, 5), success, errors, contractNotFound });\n      })\n      .on('error', (error) => {\n        console.error('‚ùå Erro ao ler CSV de pagamentos:', error);\n        resolve({ count, success, errors, contractNotFound });\n      });\n  });\n}\n\nimportPayments().catch(console.error);"],"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","ignoreList":[]}