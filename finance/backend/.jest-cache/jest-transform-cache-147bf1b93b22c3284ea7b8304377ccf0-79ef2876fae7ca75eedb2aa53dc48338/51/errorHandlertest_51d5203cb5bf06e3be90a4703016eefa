e9ce5697010c2a4b6799f3c575506d69
"use strict";

// Mock do ResponseHelper
_getJestObj().mock('../../utils/responseHelper');

// Mock do objeto response do Express
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
/**
 * Testes unitários para ErrorHandler
 * Testa o tratamento centralizado de erros
 */

const {
  ErrorHandler
} = require('../../utils/errorHandler');
const {
  ResponseHelper
} = require('../../utils/responseHelper');
const createMockResponse = () => ({
  status: jest.fn().mockReturnThis(),
  json: jest.fn().mockReturnThis(),
  headersSent: false
});

// Mock do objeto request do Express
const createMockRequest = () => ({
  method: 'GET',
  url: '/api/test',
  ip: '127.0.0.1',
  headers: {
    'user-agent': 'test-agent'
  }
});
describe('ErrorHandler', () => {
  let mockRes;
  let mockReq;
  let mockNext;
  let consoleErrorSpy;
  beforeEach(() => {
    mockRes = createMockResponse();
    mockReq = createMockRequest();
    mockNext = jest.fn();

    // Mock console.error para evitar logs durante os testes
    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});

    // Limpar mocks
    jest.clearAllMocks();
  });
  afterEach(() => {
    consoleErrorSpy.mockRestore();
  });
  describe('handleValidationError', () => {
    test('should handle validation error with details', () => {
      const error = {
        name: 'ValidationError',
        message: 'Dados inválidos',
        details: [{
          field: 'email',
          message: 'Email inválido'
        }, {
          field: 'phone',
          message: 'Telefone obrigatório'
        }]
      };
      ErrorHandler.handleValidationError(mockRes, error.details, error.message);
      expect(ResponseHelper.validationError).toHaveBeenCalledWith(mockRes, 'Dados inválidos', error.details);
    });
    test('should handle validation error without details', () => {
      const error = {
        name: 'ValidationError',
        message: 'Erro de validação'
      };
      ErrorHandler.handleValidationError(mockRes, [], error.message);
      expect(ResponseHelper.validationError).toHaveBeenCalledWith(mockRes, 'Erro de validação', []);
    });
  });
  describe('handleDatabaseError', () => {
    test('should handle unique constraint violation', () => {
      const error = {
        code: '23505',
        // PostgreSQL unique violation
        message: 'duplicate key value violates unique constraint',
        constraint: 'clients_email_unique'
      };
      ErrorHandler.handleDatabaseError(mockRes, error);
      expect(ResponseHelper.conflict).toHaveBeenCalledWith(mockRes, 'Registro já existe');
    });
    test('should handle foreign key constraint violation', () => {
      const error = {
        code: '23503',
        // PostgreSQL foreign key violation
        message: 'violates foreign key constraint'
      };
      ErrorHandler.handleDatabaseError(mockRes, error);
      expect(ResponseHelper.validationError).toHaveBeenCalledWith(mockRes, 'Referência inválida');
    });
    test('should handle not null constraint violation', () => {
      const error = {
        code: '23502',
        // PostgreSQL not null violation
        message: 'null value in column violates not-null constraint'
      };
      ErrorHandler.handleDatabaseError(mockRes, error);
      expect(ResponseHelper.internalServerError).toHaveBeenCalledWith(mockRes, 'Erro interno do servidor');
    });
    test('should handle connection timeout', () => {
      const error = {
        code: 'ETIMEDOUT',
        message: 'Connection timeout'
      };
      ErrorHandler.handleDatabaseError(mockRes, error);
      expect(ResponseHelper.internalServerError).toHaveBeenCalledWith(mockRes, 'Erro interno do servidor');
    });
    test('should handle generic database error', () => {
      const error = {
        message: 'Generic database error'
      };
      ErrorHandler.handleDatabaseError(mockRes, error);
      expect(ResponseHelper.internalServerError).toHaveBeenCalledWith(mockRes, 'Erro interno do servidor');
    });
  });
  describe('handleAuthenticationError', () => {
    test('should handle authentication error', () => {
      const error = {
        name: 'AuthenticationError',
        message: 'Token inválido'
      };
      ErrorHandler.handleAuthenticationError(error, mockRes);
      expect(ResponseHelper.unauthorized).toHaveBeenCalledWith(mockRes, 'Token inválido');
    });
    test('should use default message for authentication error', () => {
      const error = {
        name: 'AuthenticationError'
      };
      ErrorHandler.handleAuthenticationError(error, mockRes);
      expect(ResponseHelper.unauthorized).toHaveBeenCalledWith(mockRes, 'Falha na autenticação');
    });
  });
  describe('handleAuthorizationError', () => {
    test('should handle authorization error', () => {
      const error = {
        name: 'AuthorizationError',
        message: 'Acesso negado'
      };
      ErrorHandler.handleAuthorizationError(error, mockRes);
      expect(ResponseHelper.forbidden).toHaveBeenCalledWith(mockRes, 'Acesso negado');
    });
    test('should use default message for authorization error', () => {
      const error = {
        name: 'AuthorizationError'
      };
      ErrorHandler.handleAuthorizationError(error, mockRes);
      expect(ResponseHelper.forbidden).toHaveBeenCalledWith(mockRes, 'Acesso não autorizado');
    });
  });
  describe('handleNotFoundError', () => {
    test('should handle not found error', () => {
      const error = {
        name: 'NotFoundError',
        message: 'Cliente não encontrado'
      };
      ErrorHandler.handleNotFoundError(error, mockRes);
      expect(ResponseHelper.notFound).toHaveBeenCalledWith(mockRes, 'Cliente não encontrado');
    });
    test('should use default message for not found error', () => {
      const error = {
        name: 'NotFoundError'
      };
      ErrorHandler.handleNotFoundError(error, mockRes);
      expect(ResponseHelper.notFound).toHaveBeenCalledWith(mockRes, 'Recurso não encontrado');
    });
  });
  describe('handleNetworkError', () => {
    test('should handle connection refused error', () => {
      const error = {
        code: 'ECONNREFUSED',
        message: 'Connection refused'
      };
      ErrorHandler.handleNetworkError(error, mockRes);
      expect(ResponseHelper.serviceUnavailable).toHaveBeenCalledWith(mockRes, 'Serviço indisponível');
    });
    test('should handle DNS lookup error', () => {
      const error = {
        code: 'ENOTFOUND',
        message: 'DNS lookup failed'
      };
      ErrorHandler.handleNetworkError(error, mockRes);
      expect(ResponseHelper.badGateway).toHaveBeenCalledWith(mockRes, 'Erro de conectividade');
    });
    test('should handle generic network error', () => {
      const error = {
        message: 'Network error'
      };
      ErrorHandler.handleNetworkError(error, mockRes);
      expect(ResponseHelper.error).toHaveBeenCalledWith(mockRes, 'Erro de rede');
    });
  });
  describe('handleControllerError', () => {
    test('should handle validation error in controller', () => {
      const error = {
        name: 'ValidationError',
        message: 'Dados inválidos'
      };
      ErrorHandler.handleControllerError(error, mockRes);
      expect(ResponseHelper.validationError).toHaveBeenCalled();
    });
    test('should handle database error in controller', () => {
      const error = {
        code: '23505',
        message: 'duplicate key'
      };
      ErrorHandler.handleGenericError(mockRes, error);
      expect(ResponseHelper.conflict).toHaveBeenCalled();
    });
    test('should handle generic error in controller', () => {
      const error = {
        message: 'Generic error'
      };
      ErrorHandler.handleGenericError(mockRes, error);
      expect(ResponseHelper.internalServerError).toHaveBeenCalledWith(mockRes, 'Erro interno do servidor');
    });
    test('should log error details', () => {
      const error = new Error('Test error');
      error.stack = 'Error stack trace';
      ErrorHandler.handleGenericError(mockRes, error);
      expect(consoleErrorSpy).toHaveBeenCalledWith('Generic Error during operação:', error);
    });
  });
  describe('expressErrorHandler', () => {
    test('should skip if headers already sent', () => {
      mockRes.headersSent = true;
      const error = new Error('Test error');
      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);
      expect(mockNext).toHaveBeenCalledWith(error);
      expect(ResponseHelper.internalServerError).not.toHaveBeenCalled();
    });
    test('should handle validation error in Express middleware', () => {
      const error = {
        name: 'ValidationError',
        message: 'Validation failed'
      };
      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);
      expect(ResponseHelper.validationError).toHaveBeenCalled();
      expect(mockNext).not.toHaveBeenCalled();
    });
    test('should handle authentication error in Express middleware', () => {
      const error = {
        name: 'AuthenticationError',
        message: 'Auth failed'
      };
      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);
      expect(ResponseHelper.unauthorized).toHaveBeenCalled();
      expect(mockNext).not.toHaveBeenCalled();
    });
    test('should handle generic error in Express middleware', () => {
      const error = new Error('Generic error');
      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);
      expect(ResponseHelper.internalServerError).toHaveBeenCalledWith(mockRes, 'Erro interno do servidor');
      expect(mockNext).not.toHaveBeenCalled();
    });
    test('should log request details with error', () => {
      const error = new Error('Test error');
      ErrorHandler.expressErrorHandler(error, mockReq, mockRes, mockNext);
      expect(consoleErrorSpy).toHaveBeenCalledWith('Express Error Handler:', expect.objectContaining({
        error: 'Test error',
        url: '/api/test',
        method: 'GET'
      }));
    });
  });
  describe('createCustomError', () => {
    test('should create custom error with name and message', () => {
      const error = ErrorHandler.createCustomError('CustomError', 'Custom message');
      expect(error.name).toBe('CustomError');
      expect(error.message).toBe('Custom message');
      expect(error).toBeInstanceOf(Error);
    });
    test('should create custom error with additional properties', () => {
      const details = {
        field: 'email',
        code: 'INVALID'
      };
      const error = ErrorHandler.createCustomError('ValidationError', 'Invalid data', details);
      expect(error.name).toBe('ValidationError');
      expect(error.message).toBe('Invalid data');
      expect(error.details).toEqual(details);
    });
  });
  describe('isOperationalError', () => {
    test('should identify operational errors', () => {
      const operationalErrors = [{
        name: 'ValidationError'
      }, {
        name: 'NotFoundError'
      }, {
        name: 'AuthenticationError'
      }, {
        name: 'AuthorizationError'
      }, {
        code: '23505'
      },
      // Database constraint
      {
        code: 'ECONNREFUSED'
      } // Network error
      ];
      operationalErrors.forEach(error => {
        expect(ErrorHandler.isOperationalError(error)).toBe(true);
      });
    });
    test('should identify non-operational errors', () => {
      const nonOperationalErrors = [new Error('Generic error'), {
        name: 'SyntaxError'
      }, {
        name: 'ReferenceError'
      }, {
        message: 'Unknown error'
      }];
      nonOperationalErrors.forEach(error => {
        expect(ErrorHandler.isOperationalError(error)).toBe(false);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,