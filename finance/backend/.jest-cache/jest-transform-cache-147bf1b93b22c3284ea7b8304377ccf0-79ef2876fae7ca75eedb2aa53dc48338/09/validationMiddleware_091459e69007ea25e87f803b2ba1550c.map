{"version":3,"names":["cov_2jlasvax8a","actualCoverage","clientSchema","contractSchema","paymentSchema","userSchema","loginSchema","changePasswordSchema","s","require","validate","schema","f","req","res","next","error","value","body","abortEarly","stripUnknown","b","status","json","code","details","map","detail","field","path","join","message","context","timestamp","Date","toISOString","validateQuery","query","validateParams","params","validateClient","validateContract","validatePayment","validateUser","validateLogin","validateChangePassword","createUpdateSchema","baseSchema","updateSchema","Object","keys","describe","forEach","key","extract","optional","fork","validateClientUpdate","validateContractUpdate","validatePaymentUpdate","validateUserUpdate","module","exports"],"sources":["validationMiddleware.js"],"sourcesContent":["const {\n  clientSchema,\n  contractSchema,\n  paymentSchema,\n  userSchema,\n  loginSchema,\n  changePasswordSchema\n} = require('../validators/schemas');\n\n// Middleware genérico para validação\nconst validate = (schema) => {\n  return (req, res, next) => {\n    const { error, value } = schema.validate(req.body, {\n      abortEarly: false, // Retorna todos os erros, não apenas o primeiro\n      stripUnknown: true // Remove campos não definidos no schema\n    });\n\n    if (error) {\n      return res.status(400).json({\n        error: 'Dados inválidos',\n        code: 'VALIDATION_ERROR',\n        details: error.details.map(detail => ({\n          field: detail.path.join('.'),\n          message: detail.message,\n          value: detail.context?.value\n        })),\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    // Substitui req.body pelos dados validados e limpos\n    req.body = value;\n    next();\n  };\n};\n\n// Middleware para validação de parâmetros de query\nconst validateQuery = (schema) => {\n  return (req, res, next) => {\n    const { error, value } = schema.validate(req.query, {\n      abortEarly: false,\n      stripUnknown: true\n    });\n\n    if (error) {\n      return res.status(400).json({\n        error: 'Parâmetros de consulta inválidos',\n        code: 'QUERY_VALIDATION_ERROR',\n        details: error.details.map(detail => ({\n          field: detail.path.join('.'),\n          message: detail.message,\n          value: detail.context?.value\n        })),\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    req.query = value;\n    next();\n  };\n};\n\n// Middleware para validação de parâmetros de rota\nconst validateParams = (schema) => {\n  return (req, res, next) => {\n    const { error, value } = schema.validate(req.params, {\n      abortEarly: false,\n      stripUnknown: true\n    });\n\n    if (error) {\n      return res.status(400).json({\n        error: 'Parâmetros de rota inválidos',\n        code: 'PARAMS_VALIDATION_ERROR',\n        details: error.details.map(detail => ({\n          field: detail.path.join('.'),\n          message: detail.message,\n          value: detail.context?.value\n        })),\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    req.params = value;\n    next();\n  };\n};\n\n// Middlewares específicos para cada entidade\nconst validateClient = validate(clientSchema);\nconst validateContract = validate(contractSchema);\nconst validatePayment = validate(paymentSchema);\nconst validateUser = validate(userSchema);\nconst validateLogin = validate(loginSchema);\nconst validateChangePassword = validate(changePasswordSchema);\n\n// Schema para validação de atualização (campos opcionais)\nconst createUpdateSchema = (baseSchema) => {\n  const updateSchema = {};\n  \n  Object.keys(baseSchema.describe().keys).forEach(key => {\n    const field = baseSchema.extract(key);\n    updateSchema[key] = field.optional();\n  });\n  \n  return baseSchema.fork(Object.keys(updateSchema), (schema) => schema.optional());\n};\n\n// Middlewares para validação de atualização\nconst validateClientUpdate = validate(createUpdateSchema(clientSchema));\nconst validateContractUpdate = validate(createUpdateSchema(contractSchema));\nconst validatePaymentUpdate = validate(createUpdateSchema(paymentSchema));\nconst validateUserUpdate = validate(createUpdateSchema(userSchema));\n\nmodule.exports = {\n  validate,\n  validateQuery,\n  validateParams,\n  validateClient,\n  validateContract,\n  validatePayment,\n  validateUser,\n  validateLogin,\n  validateChangePassword,\n  validateClientUpdate,\n  validateContractUpdate,\n  validatePaymentUpdate,\n  validateUserUpdate\n};"],"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","ignoreList":[]}