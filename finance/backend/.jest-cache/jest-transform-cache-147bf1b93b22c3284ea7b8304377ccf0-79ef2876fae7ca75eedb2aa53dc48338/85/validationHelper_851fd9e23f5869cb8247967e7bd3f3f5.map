{"version":3,"names":["cov_x89y8vfc4","actualCoverage","ValidationHelper","isValidEmail","email","f","s","b","emailRegex","test","trim","isValidPhone","phone","cleanPhone","replace","length","isValidCPF","cpf","cleanCPF","sum","i","parseInt","charAt","remainder","isValidCNPJ","cnpj","cleanCNPJ","weights1","digit1","weights2","digit2","isValidDocument","document","cleanDocument","isValidDate","date","dateRegex","parsedDate","Date","isNaN","isFutureDate","inputDate","today","setHours","isPastDate","isValidAmount","amount","undefined","numericAmount","parseFloat","isFinite","isNonEmptyString","str","hasMinLength","minLength","hasMaxLength","maxLength","isInRange","value","min","max","isValidUUID","uuid","uuidRegex","sanitizeString","normalizePhone","normalizeDocument","module","exports"],"sources":["validationHelper.js"],"sourcesContent":["/**\n * Helper para validações comuns da aplicação\n * Centraliza lógicas de validação para reutilização e consistência\n */\nclass ValidationHelper {\n  /**\n   * Valida formato de email\n   * @param {string} email - Email a ser validado\n   * @returns {boolean} True se válido\n   */\n  static isValidEmail(email) {\n    if (!email || typeof email !== 'string') {\n      return false;\n    }\n\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email.trim());\n  }\n\n  /**\n   * Valida formato de telefone brasileiro\n   * @param {string} phone - Telefone a ser validado\n   * @returns {boolean} True se válido\n   */\n  static isValidPhone(phone) {\n    if (!phone || typeof phone !== 'string') {\n      return false;\n    }\n\n    // Remove caracteres não numéricos\n    const cleanPhone = phone.replace(/\\D/g, '');\n    \n    // Valida telefone brasileiro (10 ou 11 dígitos)\n    return cleanPhone.length === 10 || cleanPhone.length === 11;\n  }\n\n  /**\n   * Valida CPF brasileiro\n   * @param {string} cpf - CPF a ser validado\n   * @returns {boolean} True se válido\n   */\n  static isValidCPF(cpf) {\n    if (!cpf || typeof cpf !== 'string') {\n      return false;\n    }\n\n    // Remove caracteres não numéricos\n    const cleanCPF = cpf.replace(/\\D/g, '');\n\n    // Verifica se tem 11 dígitos\n    if (cleanCPF.length !== 11) {\n      return false;\n    }\n\n    // Verifica se todos os dígitos são iguais\n    if (/^(\\d)\\1{10}$/.test(cleanCPF)) {\n      return false;\n    }\n\n    // Validação do primeiro dígito verificador\n    let sum = 0;\n    for (let i = 0; i < 9; i++) {\n      sum += parseInt(cleanCPF.charAt(i)) * (10 - i);\n    }\n    let remainder = (sum * 10) % 11;\n    if (remainder === 10 || remainder === 11) remainder = 0;\n    if (remainder !== parseInt(cleanCPF.charAt(9))) return false;\n\n    // Validação do segundo dígito verificador\n    sum = 0;\n    for (let i = 0; i < 10; i++) {\n      sum += parseInt(cleanCPF.charAt(i)) * (11 - i);\n    }\n    remainder = (sum * 10) % 11;\n    if (remainder === 10 || remainder === 11) remainder = 0;\n    if (remainder !== parseInt(cleanCPF.charAt(10))) return false;\n\n    return true;\n  }\n\n  /**\n   * Valida CNPJ brasileiro\n   * @param {string} cnpj - CNPJ a ser validado\n   * @returns {boolean} True se válido\n   */\n  static isValidCNPJ(cnpj) {\n    if (!cnpj || typeof cnpj !== 'string') {\n      return false;\n    }\n\n    // Remove caracteres não numéricos\n    const cleanCNPJ = cnpj.replace(/\\D/g, '');\n\n    // Verifica se tem 14 dígitos\n    if (cleanCNPJ.length !== 14) {\n      return false;\n    }\n\n    // Verifica se todos os dígitos são iguais\n    if (/^(\\d)\\1{13}$/.test(cleanCNPJ)) {\n      return false;\n    }\n\n    // Validação do primeiro dígito verificador\n    const weights1 = [5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n    let sum = 0;\n    for (let i = 0; i < 12; i++) {\n      sum += parseInt(cleanCNPJ.charAt(i)) * weights1[i];\n    }\n    let remainder = sum % 11;\n    const digit1 = remainder < 2 ? 0 : 11 - remainder;\n    if (digit1 !== parseInt(cleanCNPJ.charAt(12))) return false;\n\n    // Validação do segundo dígito verificador\n    const weights2 = [6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2];\n    sum = 0;\n    for (let i = 0; i < 13; i++) {\n      sum += parseInt(cleanCNPJ.charAt(i)) * weights2[i];\n    }\n    remainder = sum % 11;\n    const digit2 = remainder < 2 ? 0 : 11 - remainder;\n    if (digit2 !== parseInt(cleanCNPJ.charAt(13))) return false;\n\n    return true;\n  }\n\n  /**\n   * Valida documento (CPF ou CNPJ)\n   * @param {string} document - Documento a ser validado\n   * @returns {boolean} True se válido\n   */\n  static isValidDocument(document) {\n    if (!document || typeof document !== 'string') {\n      return false;\n    }\n\n    const cleanDocument = document.replace(/\\D/g, '');\n    \n    if (cleanDocument.length === 11) {\n      return ValidationHelper.isValidCPF(document);\n    } else if (cleanDocument.length === 14) {\n      return ValidationHelper.isValidCNPJ(document);\n    }\n\n    return false;\n  }\n\n  /**\n   * Valida formato de data (YYYY-MM-DD)\n   * @param {string} date - Data a ser validada\n   * @returns {boolean} True se válido\n   */\n  static isValidDate(date) {\n    if (!date || typeof date !== 'string') {\n      return false;\n    }\n\n    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n    if (!dateRegex.test(date)) {\n      return false;\n    }\n\n    const parsedDate = new Date(date);\n    return parsedDate instanceof Date && !isNaN(parsedDate);\n  }\n\n  /**\n   * Valida se uma data está no futuro\n   * @param {string} date - Data a ser validada\n   * @returns {boolean} True se for data futura\n   */\n  static isFutureDate(date) {\n    if (!ValidationHelper.isValidDate(date)) {\n      return false;\n    }\n\n    const inputDate = new Date(date);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    return inputDate > today;\n  }\n\n  /**\n   * Valida se uma data está no passado\n   * @param {string} date - Data a ser validada\n   * @returns {boolean} True se for data passada\n   */\n  static isPastDate(date) {\n    if (!ValidationHelper.isValidDate(date)) {\n      return false;\n    }\n\n    const inputDate = new Date(date);\n    const today = new Date();\n    today.setHours(23, 59, 59, 999);\n\n    return inputDate < today;\n  }\n\n  /**\n   * Valida valor monetário\n   * @param {number|string} amount - Valor a ser validado\n   * @returns {boolean} True se válido\n   */\n  static isValidAmount(amount) {\n    if (amount === null || amount === undefined) {\n      return false;\n    }\n\n    const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    return !isNaN(numericAmount) && isFinite(numericAmount) && numericAmount >= 0;\n  }\n\n  /**\n   * Valida se string não está vazia após trim\n   * @param {string} str - String a ser validada\n   * @returns {boolean} True se não vazia\n   */\n  static isNonEmptyString(str) {\n    return typeof str === 'string' && str.trim().length > 0;\n  }\n\n  /**\n   * Valida comprimento mínimo de string\n   * @param {string} str - String a ser validada\n   * @param {number} minLength - Comprimento mínimo\n   * @returns {boolean} True se atende ao comprimento mínimo\n   */\n  static hasMinLength(str, minLength) {\n    return typeof str === 'string' && str.trim().length >= minLength;\n  }\n\n  /**\n   * Valida comprimento máximo de string\n   * @param {string} str - String a ser validada\n   * @param {number} maxLength - Comprimento máximo\n   * @returns {boolean} True se não excede o comprimento máximo\n   */\n  static hasMaxLength(str, maxLength) {\n    return typeof str === 'string' && str.trim().length <= maxLength;\n  }\n\n  /**\n   * Valida se valor está dentro de um range\n   * @param {number} value - Valor a ser validado\n   * @param {number} min - Valor mínimo\n   * @param {number} max - Valor máximo\n   * @returns {boolean} True se está no range\n   */\n  static isInRange(value, min, max) {\n    return typeof value === 'number' && value >= min && value <= max;\n  }\n\n  /**\n   * Valida UUID v4\n   * @param {string} uuid - UUID a ser validado\n   * @returns {boolean} True se válido\n   */\n  static isValidUUID(uuid) {\n    if (!uuid || typeof uuid !== 'string') {\n      return false;\n    }\n\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return uuidRegex.test(uuid);\n  }\n\n  /**\n   * Sanitiza string removendo caracteres especiais\n   * @param {string} str - String a ser sanitizada\n   * @returns {string} String sanitizada\n   */\n  static sanitizeString(str) {\n    if (typeof str !== 'string') {\n      return '';\n    }\n\n    return str.trim().replace(/[<>\"'&]/g, '');\n  }\n\n  /**\n   * Normaliza telefone removendo caracteres especiais\n   * @param {string} phone - Telefone a ser normalizado\n   * @returns {string} Telefone normalizado\n   */\n  static normalizePhone(phone) {\n    if (typeof phone !== 'string') {\n      return '';\n    }\n\n    return phone.replace(/\\D/g, '');\n  }\n\n  /**\n   * Normaliza documento removendo caracteres especiais\n   * @param {string} document - Documento a ser normalizado\n   * @returns {string} Documento normalizado\n   */\n  static normalizeDocument(document) {\n    if (typeof document !== 'string') {\n      return '';\n    }\n\n    return document.replace(/\\D/g, '');\n  }\n}\n\nmodule.exports = { ValidationHelper };"],"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","ignoreList":[]}