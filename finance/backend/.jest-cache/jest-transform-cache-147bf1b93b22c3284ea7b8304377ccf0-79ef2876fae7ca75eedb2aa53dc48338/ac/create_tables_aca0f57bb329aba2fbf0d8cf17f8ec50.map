{"version":3,"names":["cov_q4vr4yk8g","actualCoverage","createClient","s","require","config","supabase","process","env","SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","createTables","f","console","log","data","testData","error","testError","from","select","limit","b","message","includes","tables","tableName","err"],"sources":["create_tables.js"],"sourcesContent":["const { createClient } = require('@supabase/supabase-js');\nrequire('dotenv').config();\n\nconst supabase = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_SERVICE_ROLE_KEY\n);\n\nasync function createTables() {\n  console.log('üöÄ Criando tabelas b√°sicas...');\n  \n  try {\n    // Primeiro, vamos tentar criar uma tabela simples para testar\n    console.log('üìä Testando conex√£o...');\n    \n    // Tentar acessar uma tabela existente ou criar uma de teste\n    const { data: testData, error: testError } = await supabase\n      .from('test_table')\n      .select('*')\n      .limit(1);\n    \n    if (testError && testError.message.includes('does not exist')) {\n      console.log('‚úÖ Conex√£o OK - tabelas n√£o existem ainda');\n    } else if (testError) {\n      console.log('‚ö†Ô∏è  Erro de conex√£o:', testError.message);\n      return;\n    }\n    \n    // Vamos usar uma abordagem diferente - criar dados diretamente\n    console.log('üí° Tentando abordagem alternativa...');\n    \n    // Verificar se j√° existem dados nas tabelas\n    const tables = ['companies', 'branches', 'users', 'clients', 'contracts', 'payments'];\n    \n    for (const tableName of tables) {\n      try {\n        const { data, error } = await supabase\n          .from(tableName)\n          .select('id')\n          .limit(1);\n        \n        if (error) {\n          console.log(`‚ùå Tabela ${tableName} n√£o existe: ${error.message}`);\n        } else {\n          console.log(`‚úÖ Tabela ${tableName} j√° existe`);\n        }\n      } catch (err) {\n        console.log(`‚ùå Erro ao verificar ${tableName}: ${err.message}`);\n      }\n    }\n    \n    console.log('\\nüìã INSTRU√á√ïES MANUAIS:');\n    console.log('Como as tabelas n√£o foram criadas automaticamente, voc√™ precisa:');\n    console.log('1. Abrir o Supabase Dashboard');\n    console.log('2. Ir para SQL Editor');\n    console.log('3. Executar o conte√∫do do arquivo: src/migrations/init.sql');\n    console.log('4. Depois executar novamente este script para testar');\n    \n  } catch (error) {\n    console.error('‚ùå Erro geral:', error.message);\n  }\n}\n\ncreateTables();"],"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","ignoreList":[]}