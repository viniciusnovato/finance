{"version":3,"names":["cov_bz1wxuyh4","actualCoverage","asyncHandler","s","require","ContractService","ContractController","getContracts","req","res","f","page","b","parseInt","query","limit","search","status","clientId","client_id","sortBy","sortOrder","result","json","getContract","id","params","contract","getContractById","error","createContract","contractData","body","updateContract","updateData","deleteContract","success","message","getContractPayments","generateInstallments","installments","getContractStats","stats","searchContracts","contracts","updateContractStatus","module","exports"],"sources":["ContractController.js"],"sourcesContent":["const asyncHandler = require('express-async-handler');\nconst { ContractService } = require('../services/ContractService');\n\nclass ContractController {\n  /**\n   * Listar contratos com paginação e filtros\n   */\n  static getContracts = asyncHandler(async (req, res) => {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 10;\n    const search = req.query.search || '';\n    const status = req.query.status || '';\n    const clientId = req.query.client_id || '';\n    const sortBy = req.query.sortBy || 'created_at';\n    const sortOrder = req.query.sortOrder || 'desc';\n\n    const result = await ContractService.getContracts({\n      page,\n      limit,\n      search,\n      status,\n      clientId,\n      sortBy,\n      sortOrder\n    });\n\n    res.json(result);\n  });\n\n  /**\n   * Obter contrato por ID\n   */\n  static getContract = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    \n    const contract = await ContractService.getContractById(id);\n    \n    if (!contract) {\n      return res.status(404).json({ error: 'Contrato não encontrado' });\n    }\n\n    res.json(contract);\n  });\n\n  /**\n   * Criar novo contrato\n   */\n  static createContract = asyncHandler(async (req, res) => {\n    const contractData = req.body;\n    \n    const contract = await ContractService.createContract(contractData);\n    \n    res.status(201).json(contract);\n  });\n\n  /**\n   * Atualizar contrato\n   */\n  static updateContract = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    const updateData = req.body;\n    \n    const contract = await ContractService.updateContract(id, updateData);\n    \n    if (!contract) {\n      return res.status(404).json({ error: 'Contrato não encontrado' });\n    }\n\n    res.json(contract);\n  });\n\n  /**\n   * Deletar contrato\n   */\n  static deleteContract = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    \n    const success = await ContractService.deleteContract(id);\n    \n    if (!success) {\n      return res.status(404).json({ error: 'Contrato não encontrado' });\n    }\n\n    res.json({ message: 'Contrato deletado com sucesso' });\n  });\n\n  /**\n   * Obter pagamentos do contrato\n   */\n  static getContractPayments = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 10;\n    const status = req.query.status || '';\n    \n    const result = await ContractService.getContractPayments(id, {\n      page,\n      limit,\n      status\n    });\n\n    res.json(result);\n  });\n\n  /**\n   * Gerar parcelas do contrato\n   */\n  static generateInstallments = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    \n    const installments = await ContractService.generateInstallments(id);\n    \n    res.json(installments);\n  });\n\n  /**\n   * Calcular estatísticas do contrato\n   */\n  static getContractStats = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    \n    const stats = await ContractService.getContractStats(id);\n    \n    res.json(stats);\n  });\n\n  /**\n   * Buscar contratos por termo\n   */\n  static searchContracts = asyncHandler(async (req, res) => {\n    const { query } = req.params;\n    const limit = parseInt(req.query.limit) || 10;\n    \n    const contracts = await ContractService.searchContracts(query, limit);\n    \n    res.json(contracts);\n  });\n\n  /**\n   * Atualizar status do contrato\n   */\n  static updateContractStatus = asyncHandler(async (req, res) => {\n    const { id } = req.params;\n    const { status } = req.body;\n    \n    const contract = await ContractService.updateContractStatus(id, status);\n    \n    if (!contract) {\n      return res.status(404).json({ error: 'Contrato não encontrado' });\n    }\n\n    res.json(contract);\n  });\n}\n\nmodule.exports = { ContractController };"],"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","ignoreList":[]}