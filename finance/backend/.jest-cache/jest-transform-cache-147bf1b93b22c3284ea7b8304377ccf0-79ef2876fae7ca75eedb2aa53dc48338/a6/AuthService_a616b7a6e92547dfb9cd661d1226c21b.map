{"version":3,"names":["cov_jugbqb2km","actualCoverage","bcrypt","s","require","jwt","supabase","supabaseAdmin","validateEmail","validatePassword","AuthService","login","email","password","f","b","Error","data","authData","error","authError","auth","signInWithPassword","userData","userError","from","select","eq","single","is_active","userPayload","id","name","role","branch_id","user","token","session","access_token","expires_in","message","logout","signOut","register","adminUser","existingUser","admin","createUser","email_confirm","profileData","profileError","insert","created_at","Date","toISOString","deleteUser","getProfile","userId","updateProfile","updateData","updates","neq","Object","keys","length","updated_at","update","changePassword","currentPassword","newPassword","loginError","updateError","updateUserById","forgotPassword","resetPasswordForEmail","redirectTo","process","env","FRONTEND_URL","resetPassword","updateUser","getUsers","filters","page","limit","search","offset","query","count","or","undefined","range","order","ascending","users","pagination","total","pages","Math","ceil","getUserById","emailExists","updateUserStatus","delete","refreshToken","refresh_token","refreshSession","module","exports"],"sources":["AuthService.js"],"sourcesContent":["const bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst { supabase, supabaseAdmin } = require('../config/supabase');\nconst { validateEmail, validatePassword } = require('../utils/validators');\n\nclass AuthService {\n  async login(email, password) {\n    try {\n      // Validar entrada\n      if (!email || !password) {\n        throw new Error('Email e senha são obrigatórios');\n      }\n\n      if (!validateEmail(email)) {\n        throw new Error('Email inválido');\n      }\n\n      // Autenticar com Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (authError) {\n        throw new Error('Credenciais inválidas');\n      }\n\n      // Buscar dados completos do usuário\n      const { data: userData, error: userError } = await supabaseAdmin\n        .from('user_profiles')\n        .select('*')\n        .eq('email', email)\n        .single();\n\n      if (userError || !userData) {\n        throw new Error('Usuário não encontrado no sistema');\n      }\n\n      // Verificar se o usuário está ativo\n      if (userData.is_active === false) {\n        throw new Error('Usuário inativo');\n      }\n\n      // Preparar dados do usuário para o token\n      const userPayload = {\n        id: userData.id,\n        email: userData.email,\n        name: userData.name,\n        role: userData.role,\n        branch_id: userData.branch_id\n      };\n\n      return {\n        user: userPayload,\n        token: authData.session.access_token,\n        expires_in: authData.session.expires_in\n      };\n    } catch (error) {\n      throw new Error(`Erro no login: ${error.message}`);\n    }\n  }\n\n  async logout(token) {\n    try {\n      if (token) {\n        await supabase.auth.signOut();\n      }\n      return true;\n    } catch (error) {\n      throw new Error(`Erro no logout: ${error.message}`);\n    }\n  }\n\n  async register(userData, adminUser) {\n    try {\n      const { email, password, name, role = 'user', branch_id } = userData;\n\n      // Validações\n      if (!email || !password || !name) {\n        throw new Error('Email, senha e nome são obrigatórios');\n      }\n\n      if (!validateEmail(email)) {\n        throw new Error('Email inválido');\n      }\n\n      if (!validatePassword(password)) {\n        throw new Error('Senha deve ter pelo menos 6 caracteres');\n      }\n\n      // Verificar se admin pode criar usuário nesta filial\n      if (adminUser.role !== 'admin' && branch_id !== adminUser.branch_id) {\n        throw new Error('Você só pode criar usuários para sua filial');\n      }\n\n      // Verificar se email já existe\n      const { data: existingUser } = await supabaseAdmin\n        .from('user_profiles')\n        .select('id')\n        .eq('email', email)\n        .single();\n\n      if (existingUser) {\n        throw new Error('Email já está em uso');\n      }\n\n      // Criar usuário no Supabase Auth\n      const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({\n        email,\n        password,\n        email_confirm: true\n      });\n\n      if (authError) {\n        throw new Error(`Erro ao criar usuário: ${authError.message}`);\n      }\n\n      // Criar perfil do usuário\n      const { data: profileData, error: profileError } = await supabaseAdmin\n        .from('user_profiles')\n        .insert({\n          id: authData.user.id,\n          email,\n          name,\n          role,\n          branch_id,\n          is_active: true,\n          created_at: new Date().toISOString()\n        })\n        .select('*')\n        .single();\n\n      if (profileError) {\n        // Se falhar ao criar perfil, deletar usuário do auth\n        await supabaseAdmin.auth.admin.deleteUser(authData.user.id);\n        throw new Error(`Erro ao criar perfil: ${profileError.message}`);\n      }\n\n      return {\n        user: {\n          id: profileData.id,\n          email: profileData.email,\n          name: profileData.name,\n          role: profileData.role,\n          branch_id: profileData.branch_id,\n          is_active: profileData.is_active\n        }\n      };\n    } catch (error) {\n      throw new Error(`Erro no registro: ${error.message}`);\n    }\n  }\n\n  async getProfile(userId) {\n    try {\n      const { data, error } = await supabaseAdmin\n        .from('user_profiles')\n        .select('id, email, name, role, branch_id, is_active, created_at, updated_at')\n        .eq('id', userId)\n        .single();\n\n      if (error || !data) {\n        throw new Error('Perfil não encontrado');\n      }\n\n      return data;\n    } catch (error) {\n      throw new Error(`Erro ao obter perfil: ${error.message}`);\n    }\n  }\n\n  async updateProfile(userId, updateData) {\n    try {\n      const { name, email } = updateData;\n      const updates = {};\n\n      if (name) updates.name = name;\n      if (email && validateEmail(email)) {\n        // Verificar se email já existe\n        const { data: existingUser } = await supabaseAdmin\n          .from('user_profiles')\n          .select('id')\n          .eq('email', email)\n          .neq('id', userId)\n          .single();\n\n        if (existingUser) {\n          throw new Error('Email já está em uso');\n        }\n\n        updates.email = email;\n      }\n\n      if (Object.keys(updates).length === 0) {\n        throw new Error('Nenhum dado válido para atualizar');\n      }\n\n      updates.updated_at = new Date().toISOString();\n\n      const { data, error } = await supabaseAdmin\n        .from('user_profiles')\n        .update(updates)\n        .eq('id', userId)\n        .select('*')\n        .single();\n\n      if (error) {\n        throw new Error(`Erro ao atualizar perfil: ${error.message}`);\n      }\n\n      return data;\n    } catch (error) {\n      throw new Error(`Erro ao atualizar perfil: ${error.message}`);\n    }\n  }\n\n  async changePassword(userId, currentPassword, newPassword) {\n    try {\n      if (!currentPassword || !newPassword) {\n        throw new Error('Senha atual e nova senha são obrigatórias');\n      }\n\n      if (!validatePassword(newPassword)) {\n        throw new Error('Nova senha deve ter pelo menos 6 caracteres');\n      }\n\n      // Verificar senha atual\n      const { data: user } = await supabaseAdmin\n        .from('user_profiles')\n        .select('email')\n        .eq('id', userId)\n        .single();\n\n      if (!user) {\n        throw new Error('Usuário não encontrado');\n      }\n\n      // Tentar fazer login com senha atual para validar\n      const { error: loginError } = await supabase.auth.signInWithPassword({\n        email: user.email,\n        password: currentPassword\n      });\n\n      if (loginError) {\n        throw new Error('Senha atual incorreta');\n      }\n\n      // Atualizar senha\n      const { error: updateError } = await supabaseAdmin.auth.admin.updateUserById(\n        userId,\n        { password: newPassword }\n      );\n\n      if (updateError) {\n        throw new Error(`Erro ao alterar senha: ${updateError.message}`);\n      }\n\n      return true;\n    } catch (error) {\n      throw new Error(`Erro ao alterar senha: ${error.message}`);\n    }\n  }\n\n  async forgotPassword(email) {\n    try {\n      if (!email || !validateEmail(email)) {\n        throw new Error('Email válido é obrigatório');\n      }\n\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\n        redirectTo: `${process.env.FRONTEND_URL}/reset-password`\n      });\n\n      if (error) {\n        throw new Error(`Erro ao enviar email de reset: ${error.message}`);\n      }\n\n      return true;\n    } catch (error) {\n      throw new Error(`Erro ao solicitar reset de senha: ${error.message}`);\n    }\n  }\n\n  async resetPassword(token, newPassword) {\n    try {\n      if (!token || !newPassword) {\n        throw new Error('Token e nova senha são obrigatórios');\n      }\n\n      if (!validatePassword(newPassword)) {\n        throw new Error('Nova senha deve ter pelo menos 6 caracteres');\n      }\n\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n\n      if (error) {\n        throw new Error(`Erro ao redefinir senha: ${error.message}`);\n      }\n\n      return true;\n    } catch (error) {\n      throw new Error(`Erro ao redefinir senha: ${error.message}`);\n    }\n  }\n\n  async getUsers(filters, adminUser) {\n    try {\n      const { page, limit, search, role, is_active } = filters;\n      const offset = (page - 1) * limit;\n\n      let query = supabaseAdmin\n        .from('user_profiles')\n        .select('id, email, name, role, branch_id, is_active, created_at, updated_at', { count: 'exact' });\n\n      // Filtrar por filial se não for admin\n      if (adminUser.role !== 'admin' && adminUser.branch_id) {\n        query = query.eq('branch_id', adminUser.branch_id);\n      }\n\n      // Aplicar filtros\n      if (search) {\n        query = query.or(`name.ilike.%${search}%,email.ilike.%${search}%`);\n      }\n\n      if (role) {\n        query = query.eq('role', role);\n      }\n\n      if (is_active !== undefined) {\n        query = query.eq('is_active', is_active);\n      }\n\n      // Paginação\n      query = query.range(offset, offset + limit - 1).order('created_at', { ascending: false });\n\n      const { data, error, count } = await query;\n\n      if (error) {\n        throw new Error(`Erro ao buscar usuários: ${error.message}`);\n      }\n\n      return {\n        users: data || [],\n        pagination: {\n          page,\n          limit,\n          total: count || 0,\n          pages: Math.ceil((count || 0) / limit)\n        }\n      };\n    } catch (error) {\n      throw new Error(`Erro ao listar usuários: ${error.message}`);\n    }\n  }\n\n  async getUserById(id, adminUser) {\n    try {\n      let query = supabaseAdmin\n        .from('user_profiles')\n        .select('*')\n        .eq('id', id);\n\n      // Filtrar por filial se não for admin\n      if (adminUser.role !== 'admin' && adminUser.branch_id) {\n        query = query.eq('branch_id', adminUser.branch_id);\n      }\n\n      const { data, error } = await query.single();\n\n      if (error || !data) {\n        throw new Error('Usuário não encontrado');\n      }\n\n      return data;\n    } catch (error) {\n      throw new Error(`Erro ao obter usuário: ${error.message}`);\n    }\n  }\n\n  async updateUser(id, updateData, adminUser) {\n    try {\n      // Verificar se usuário existe e se admin tem acesso\n      const existingUser = await this.getUserById(id, adminUser);\n\n      const { name, email, role, branch_id, is_active } = updateData;\n      const updates = {};\n\n      if (name) updates.name = name;\n      if (email && validateEmail(email)) {\n        // Verificar se email já existe\n        const { data: emailExists } = await supabaseAdmin\n          .from('user_profiles')\n          .select('id')\n          .eq('email', email)\n          .neq('id', id)\n          .single();\n\n        if (emailExists) {\n          throw new Error('Email já está em uso');\n        }\n\n        updates.email = email;\n      }\n\n      if (role && adminUser.role === 'admin') {\n        updates.role = role;\n      }\n\n      if (branch_id && adminUser.role === 'admin') {\n        updates.branch_id = branch_id;\n      }\n\n      if (is_active !== undefined && adminUser.role === 'admin') {\n        updates.is_active = is_active;\n      }\n\n      if (Object.keys(updates).length === 0) {\n        throw new Error('Nenhum dado válido para atualizar');\n      }\n\n      updates.updated_at = new Date().toISOString();\n\n      const { data, error } = await supabaseAdmin\n        .from('user_profiles')\n        .update(updates)\n        .eq('id', id)\n        .select('*')\n        .single();\n\n      if (error) {\n        throw new Error(`Erro ao atualizar usuário: ${error.message}`);\n      }\n\n      return data;\n    } catch (error) {\n      throw new Error(`Erro ao atualizar usuário: ${error.message}`);\n    }\n  }\n\n  async updateUserStatus(id, is_active, adminUser) {\n    try {\n      if (adminUser.role !== 'admin') {\n        throw new Error('Apenas administradores podem alterar status de usuários');\n      }\n\n      // Verificar se usuário existe\n      const existingUser = await this.getUserById(id, adminUser);\n\n      // Não permitir desativar o próprio usuário\n      if (id === adminUser.id && !is_active) {\n        throw new Error('Você não pode desativar sua própria conta');\n      }\n\n      const { data, error } = await supabaseAdmin\n        .from('user_profiles')\n        .update({\n          is_active,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', id)\n        .select('*')\n        .single();\n\n      if (error) {\n        throw new Error(`Erro ao atualizar status: ${error.message}`);\n      }\n\n      return data;\n    } catch (error) {\n      throw new Error(`Erro ao atualizar status do usuário: ${error.message}`);\n    }\n  }\n\n  async deleteUser(id, adminUser) {\n    try {\n      if (adminUser.role !== 'admin') {\n        throw new Error('Apenas administradores podem deletar usuários');\n      }\n\n      // Verificar se usuário existe\n      const existingUser = await this.getUserById(id, adminUser);\n\n      // Não permitir deletar o próprio usuário\n      if (id === adminUser.id) {\n        throw new Error('Você não pode deletar sua própria conta');\n      }\n\n      // Deletar perfil\n      const { error: profileError } = await supabaseAdmin\n        .from('user_profiles')\n        .delete()\n        .eq('id', id);\n\n      if (profileError) {\n        throw new Error(`Erro ao deletar perfil: ${profileError.message}`);\n      }\n\n      // Deletar usuário do auth\n      const { error: authError } = await supabaseAdmin.auth.admin.deleteUser(id);\n\n      if (authError) {\n        throw new Error(`Erro ao deletar usuário do auth: ${authError.message}`);\n      }\n\n      return true;\n    } catch (error) {\n      throw new Error(`Erro ao deletar usuário: ${error.message}`);\n    }\n  }\n\n  async refreshToken(refresh_token) {\n    try {\n      if (!refresh_token) {\n        throw new Error('Refresh token é obrigatório');\n      }\n\n      const { data, error } = await supabase.auth.refreshSession({\n        refresh_token\n      });\n\n      if (error) {\n        throw new Error('Token inválido ou expirado');\n      }\n\n      return {\n        token: data.session.access_token,\n        expires_in: data.session.expires_in\n      };\n    } catch (error) {\n      throw new Error(`Erro ao renovar token: ${error.message}`);\n    }\n  }\n}\n\nmodule.exports = new AuthService();"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}