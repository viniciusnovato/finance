{"version":3,"names":["_getJestObj","mock","jest","require","DatabaseHelper","ValidationHelper","createMockQuery","select","fn","mockReturnThis","insert","update","delete","eq","neq","gt","gte","lt","lte","like","ilike","in","or","and","order","range","limit","single","count","describe","mockQuery","beforeEach","clearAllMocks","sanitizeString","mockImplementation","str","trim","isValidString","mockReturnValue","test","filters","name","status","type","result","buildFilterQuery","expect","toHaveBeenCalledWith","toBe","not","toHaveBeenCalled","email","phone","undefined","sorting","field","buildSortingQuery","ascending","pagination","page","buildPaginationQuery","total","calculatePagination","toEqual","totalPages","hasNext","hasPrev","data","age","active","requiredFields","validateRequiredFields","validateAndSanitizeData","message","toThrow","score","mockClient","query","mockResolvedValue","rows","id","release","mockPool","connect","transactionFn","success","executeTransaction","mockResolvedValueOnce","error","Error","mockRejectedValue","rejects","mockRejectedValueOnce","searchTerm","searchFields","buildSearchQuery","code","detail","formatDatabaseError","originalError","column"],"sources":["databaseHelper.test.js"],"sourcesContent":["/**\n * Testes unitários para DatabaseHelper\n * Testa as operações auxiliares de banco de dados\n */\n\nconst DatabaseHelper = require('../../utils/databaseHelper');\nconst ValidationHelper = require('../../utils/validationHelper');\n\n// Mock do ValidationHelper\njest.mock('../../utils/validationHelper');\n\n// Mock de query do Supabase\nconst createMockQuery = () => ({\n  select: jest.fn().mockReturnThis(),\n  insert: jest.fn().mockReturnThis(),\n  update: jest.fn().mockReturnThis(),\n  delete: jest.fn().mockReturnThis(),\n  eq: jest.fn().mockReturnThis(),\n  neq: jest.fn().mockReturnThis(),\n  gt: jest.fn().mockReturnThis(),\n  gte: jest.fn().mockReturnThis(),\n  lt: jest.fn().mockReturnThis(),\n  lte: jest.fn().mockReturnThis(),\n  like: jest.fn().mockReturnThis(),\n  ilike: jest.fn().mockReturnThis(),\n  in: jest.fn().mockReturnThis(),\n  or: jest.fn().mockReturnThis(),\n  and: jest.fn().mockReturnThis(),\n  order: jest.fn().mockReturnThis(),\n  range: jest.fn().mockReturnThis(),\n  limit: jest.fn().mockReturnThis(),\n  single: jest.fn(),\n  count: jest.fn().mockReturnThis()\n});\n\ndescribe('DatabaseHelper', () => {\n  let mockQuery;\n\n  beforeEach(() => {\n    mockQuery = createMockQuery();\n    jest.clearAllMocks();\n    \n    // Setup default mocks\n    ValidationHelper.sanitizeString.mockImplementation(str => str?.trim() || '');\n    ValidationHelper.isValidString.mockReturnValue(true);\n  });\n\n  describe('buildFilterQuery', () => {\n    test('should apply simple equality filters', () => {\n      const filters = {\n        name: 'João Silva',\n        status: 'active',\n        type: 'individual'\n      };\n      \n      const result = DatabaseHelper.buildFilterQuery(mockQuery, filters);\n      \n      expect(mockQuery.eq).toHaveBeenCalledWith('name', 'João Silva');\n      expect(mockQuery.eq).toHaveBeenCalledWith('status', 'active');\n      expect(mockQuery.eq).toHaveBeenCalledWith('type', 'individual');\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle empty filters', () => {\n      const result = DatabaseHelper.buildFilterQuery(mockQuery, {});\n      \n      expect(mockQuery.eq).not.toHaveBeenCalled();\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle null and undefined filters', () => {\n      const filters = {\n        name: 'João',\n        email: null,\n        phone: undefined,\n        status: ''\n      };\n      \n      const result = DatabaseHelper.buildFilterQuery(mockQuery, filters);\n      \n      expect(mockQuery.eq).toHaveBeenCalledWith('name', 'João');\n      expect(mockQuery.eq).not.toHaveBeenCalledWith('email', null);\n      expect(mockQuery.eq).not.toHaveBeenCalledWith('phone', undefined);\n      expect(mockQuery.eq).not.toHaveBeenCalledWith('status', '');\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle range filters', () => {\n      const filters = {\n        'amount_gte': 1000,\n        'amount_lte': 5000,\n        'created_at_gt': '2023-01-01',\n        'updated_at_lt': '2023-12-31'\n      };\n      \n      const result = DatabaseHelper.buildFilterQuery(mockQuery, filters);\n      \n      expect(mockQuery.gte).toHaveBeenCalledWith('amount', 1000);\n      expect(mockQuery.lte).toHaveBeenCalledWith('amount', 5000);\n      expect(mockQuery.gt).toHaveBeenCalledWith('created_at', '2023-01-01');\n      expect(mockQuery.lt).toHaveBeenCalledWith('updated_at', '2023-12-31');\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle like filters', () => {\n      const filters = {\n        'name_like': '%João%',\n        'email_ilike': '%@gmail.com%'\n      };\n      \n      const result = DatabaseHelper.buildFilterQuery(mockQuery, filters);\n      \n      expect(mockQuery.like).toHaveBeenCalledWith('name', '%João%');\n      expect(mockQuery.ilike).toHaveBeenCalledWith('email', '%@gmail.com%');\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle in filters', () => {\n      const filters = {\n        'status_in': ['active', 'pending', 'completed']\n      };\n      \n      const result = DatabaseHelper.buildFilterQuery(mockQuery, filters);\n      \n      expect(mockQuery.in).toHaveBeenCalledWith('status', ['active', 'pending', 'completed']);\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle not equal filters', () => {\n      const filters = {\n        'status_neq': 'deleted'\n      };\n      \n      const result = DatabaseHelper.buildFilterQuery(mockQuery, filters);\n      \n      expect(mockQuery.neq).toHaveBeenCalledWith('status', 'deleted');\n      expect(result).toBe(mockQuery);\n    });\n  });\n\n  describe('buildSortingQuery', () => {\n    test('should apply ascending sort', () => {\n      const sorting = { field: 'name', order: 'asc' };\n      \n      const result = DatabaseHelper.buildSortingQuery(mockQuery, sorting);\n      \n      expect(mockQuery.order).toHaveBeenCalledWith('name', { ascending: true });\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should apply descending sort', () => {\n      const sorting = { field: 'created_at', order: 'desc' };\n      \n      const result = DatabaseHelper.buildSortingQuery(mockQuery, sorting);\n      \n      expect(mockQuery.order).toHaveBeenCalledWith('created_at', { ascending: false });\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should use default sorting when not provided', () => {\n      const result = DatabaseHelper.buildSortingQuery(mockQuery);\n      \n      expect(mockQuery.order).toHaveBeenCalledWith('created_at', { ascending: false });\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle empty sorting object', () => {\n      const result = DatabaseHelper.buildSortingQuery(mockQuery, {});\n      \n      expect(mockQuery.order).toHaveBeenCalledWith('created_at', { ascending: false });\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should normalize sort order case', () => {\n      const sorting = { field: 'name', order: 'ASC' };\n      \n      const result = DatabaseHelper.buildSortingQuery(mockQuery, sorting);\n      \n      expect(mockQuery.order).toHaveBeenCalledWith('name', { ascending: true });\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle multiple sort fields', () => {\n      const sorting = [\n        { field: 'status', order: 'asc' },\n        { field: 'created_at', order: 'desc' }\n      ];\n      \n      const result = DatabaseHelper.buildSortingQuery(mockQuery, sorting);\n      \n      expect(mockQuery.order).toHaveBeenCalledWith('status', { ascending: true });\n      expect(mockQuery.order).toHaveBeenCalledWith('created_at', { ascending: false });\n      expect(result).toBe(mockQuery);\n    });\n  });\n\n  describe('buildPaginationQuery', () => {\n    test('should apply pagination with valid parameters', () => {\n      const pagination = { page: 2, limit: 20 };\n      \n      const result = DatabaseHelper.buildPaginationQuery(mockQuery, pagination);\n      \n      // page 2, limit 20 = range(20, 39)\n      expect(mockQuery.range).toHaveBeenCalledWith(20, 39);\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should use default pagination when not provided', () => {\n      const result = DatabaseHelper.buildPaginationQuery(mockQuery);\n      \n      // page 1, limit 10 = range(0, 9)\n      expect(mockQuery.range).toHaveBeenCalledWith(0, 9);\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle first page correctly', () => {\n      const pagination = { page: 1, limit: 10 };\n      \n      const result = DatabaseHelper.buildPaginationQuery(mockQuery, pagination);\n      \n      expect(mockQuery.range).toHaveBeenCalledWith(0, 9);\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle large page numbers', () => {\n      const pagination = { page: 100, limit: 50 };\n      \n      const result = DatabaseHelper.buildPaginationQuery(mockQuery, pagination);\n      \n      // page 100, limit 50 = range(4950, 4999)\n      expect(mockQuery.range).toHaveBeenCalledWith(4950, 4999);\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle invalid page numbers', () => {\n      const pagination = { page: 0, limit: 10 };\n      \n      const result = DatabaseHelper.buildPaginationQuery(mockQuery, pagination);\n      \n      // Should default to page 1\n      expect(mockQuery.range).toHaveBeenCalledWith(0, 9);\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle invalid limit', () => {\n      const pagination = { page: 1, limit: 0 };\n      \n      const result = DatabaseHelper.buildPaginationQuery(mockQuery, pagination);\n      \n      // Should default to limit 10\n      expect(mockQuery.range).toHaveBeenCalledWith(0, 9);\n      expect(result).toBe(mockQuery);\n    });\n  });\n\n  describe('calculatePagination', () => {\n    test('should calculate pagination correctly', () => {\n      const total = 95;\n      const page = 2;\n      const limit = 10;\n      \n      const result = DatabaseHelper.calculatePagination(total, page, limit);\n      \n      expect(result).toEqual({\n        page: 2,\n        limit: 10,\n        total: 95,\n        totalPages: 10,\n        hasNext: true,\n        hasPrev: true\n      });\n    });\n\n    test('should handle first page', () => {\n      const total = 25;\n      const page = 1;\n      const limit = 10;\n      \n      const result = DatabaseHelper.calculatePagination(total, page, limit);\n      \n      expect(result).toEqual({\n        page: 1,\n        limit: 10,\n        total: 25,\n        totalPages: 3,\n        hasNext: true,\n        hasPrev: false\n      });\n    });\n\n    test('should handle last page', () => {\n      const total = 25;\n      const page = 3;\n      const limit = 10;\n      \n      const result = DatabaseHelper.calculatePagination(total, page, limit);\n      \n      expect(result).toEqual({\n        page: 3,\n        limit: 10,\n        total: 25,\n        totalPages: 3,\n        hasNext: false,\n        hasPrev: true\n      });\n    });\n\n    test('should handle single page', () => {\n      const total = 5;\n      const page = 1;\n      const limit = 10;\n      \n      const result = DatabaseHelper.calculatePagination(total, page, limit);\n      \n      expect(result).toEqual({\n        page: 1,\n        limit: 10,\n        total: 5,\n        totalPages: 1,\n        hasNext: false,\n        hasPrev: false\n      });\n    });\n\n    test('should handle empty results', () => {\n      const total = 0;\n      const page = 1;\n      const limit = 10;\n      \n      const result = DatabaseHelper.calculatePagination(total, page, limit);\n      \n      expect(result).toEqual({\n        page: 1,\n        limit: 10,\n        total: 0,\n        totalPages: 0,\n        hasNext: false,\n        hasPrev: false\n      });\n    });\n\n    test('should handle exact division', () => {\n      const total = 100;\n      const page = 5;\n      const limit = 20;\n      \n      const result = DatabaseHelper.calculatePagination(total, page, limit);\n      \n      expect(result).toEqual({\n        page: 5,\n        limit: 20,\n        total: 100,\n        totalPages: 5,\n        hasNext: false,\n        hasPrev: true\n      });\n    });\n  });\n\n  describe('validateAndSanitizeData', () => {\n    test('should validate and sanitize data successfully', () => {\n      const data = {\n        name: '  João Silva  ',\n        email: '  joao@email.com  ',\n        age: 30,\n        active: true\n      };\n      \n      const requiredFields = ['name', 'email'];\n      \n      ValidationHelper.validateRequiredFields.mockReturnValue([]);\n      ValidationHelper.sanitizeString.mockImplementation(str => str?.trim());\n      \n      const result = DatabaseHelper.validateAndSanitizeData(data, requiredFields);\n      \n      expect(ValidationHelper.validateRequiredFields).toHaveBeenCalledWith(data, requiredFields);\n      expect(ValidationHelper.sanitizeString).toHaveBeenCalledWith('  João Silva  ');\n      expect(ValidationHelper.sanitizeString).toHaveBeenCalledWith('  joao@email.com  ');\n      \n      expect(result).toEqual({\n        name: 'João Silva',\n        email: 'joao@email.com',\n        age: 30,\n        active: true\n      });\n    });\n\n    test('should throw error for missing required fields', () => {\n      const data = { name: 'João' };\n      const requiredFields = ['name', 'email'];\n      \n      ValidationHelper.validateRequiredFields.mockReturnValue([\n        { field: 'email', message: 'Email é obrigatório' }\n      ]);\n      \n      expect(() => {\n        DatabaseHelper.validateAndSanitizeData(data, requiredFields);\n      }).toThrow('Dados obrigatórios não informados: email');\n    });\n\n    test('should handle data without string fields', () => {\n      const data = {\n        age: 30,\n        active: true,\n        score: 95.5\n      };\n      \n      ValidationHelper.validateRequiredFields.mockReturnValue([]);\n      \n      const result = DatabaseHelper.validateAndSanitizeData(data, []);\n      \n      expect(ValidationHelper.sanitizeString).not.toHaveBeenCalled();\n      expect(result).toEqual(data);\n    });\n\n    test('should handle empty data', () => {\n      ValidationHelper.validateRequiredFields.mockReturnValue([]);\n      \n      const result = DatabaseHelper.validateAndSanitizeData({}, []);\n      \n      expect(result).toEqual({});\n    });\n  });\n\n  describe('executeTransaction', () => {\n    test('should execute transaction successfully', async () => {\n      const mockClient = {\n        query: jest.fn().mockResolvedValue({ rows: [{ id: 1 }] }),\n        release: jest.fn()\n      };\n      \n      const mockPool = {\n        connect: jest.fn().mockResolvedValue(mockClient)\n      };\n      \n      const transactionFn = jest.fn().mockResolvedValue({ success: true });\n      \n      const result = await DatabaseHelper.executeTransaction(mockPool, transactionFn);\n      \n      expect(mockPool.connect).toHaveBeenCalled();\n      expect(mockClient.query).toHaveBeenCalledWith('BEGIN');\n      expect(transactionFn).toHaveBeenCalledWith(mockClient);\n      expect(mockClient.query).toHaveBeenCalledWith('COMMIT');\n      expect(mockClient.release).toHaveBeenCalled();\n      expect(result).toEqual({ success: true });\n    });\n\n    test('should rollback transaction on error', async () => {\n      const mockClient = {\n        query: jest.fn()\n          .mockResolvedValueOnce() // BEGIN\n          .mockResolvedValueOnce(), // ROLLBACK\n        release: jest.fn()\n      };\n      \n      const mockPool = {\n        connect: jest.fn().mockResolvedValue(mockClient)\n      };\n      \n      const error = new Error('Transaction failed');\n      const transactionFn = jest.fn().mockRejectedValue(error);\n      \n      await expect(DatabaseHelper.executeTransaction(mockPool, transactionFn))\n        .rejects.toThrow('Transaction failed');\n      \n      expect(mockClient.query).toHaveBeenCalledWith('BEGIN');\n      expect(transactionFn).toHaveBeenCalledWith(mockClient);\n      expect(mockClient.query).toHaveBeenCalledWith('ROLLBACK');\n      expect(mockClient.release).toHaveBeenCalled();\n    });\n\n    test('should release client even if rollback fails', async () => {\n      const mockClient = {\n        query: jest.fn()\n          .mockResolvedValueOnce() // BEGIN\n          .mockRejectedValueOnce(new Error('Rollback failed')), // ROLLBACK\n        release: jest.fn()\n      };\n      \n      const mockPool = {\n        connect: jest.fn().mockResolvedValue(mockClient)\n      };\n      \n      const transactionFn = jest.fn().mockRejectedValue(new Error('Transaction failed'));\n      \n      await expect(DatabaseHelper.executeTransaction(mockPool, transactionFn))\n        .rejects.toThrow('Transaction failed');\n      \n      expect(mockClient.release).toHaveBeenCalled();\n    });\n  });\n\n  describe('buildSearchQuery', () => {\n    test('should build search query for multiple fields', () => {\n      const searchTerm = 'João';\n      const searchFields = ['name', 'email', 'tax_id'];\n      \n      ValidationHelper.sanitizeString.mockReturnValue('João');\n      \n      const result = DatabaseHelper.buildSearchQuery(mockQuery, searchTerm, searchFields);\n      \n      expect(ValidationHelper.sanitizeString).toHaveBeenCalledWith(searchTerm);\n      expect(mockQuery.or).toHaveBeenCalledWith(\n        'name.ilike.%João%,email.ilike.%João%,tax_id.ilike.%João%'\n      );\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle single search field', () => {\n      const searchTerm = 'Silva';\n      const searchFields = ['name'];\n      \n      ValidationHelper.sanitizeString.mockReturnValue('Silva');\n      \n      const result = DatabaseHelper.buildSearchQuery(mockQuery, searchTerm, searchFields);\n      \n      expect(mockQuery.or).toHaveBeenCalledWith('name.ilike.%Silva%');\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle empty search term', () => {\n      ValidationHelper.sanitizeString.mockReturnValue('');\n      \n      const result = DatabaseHelper.buildSearchQuery(mockQuery, '', ['name']);\n      \n      expect(mockQuery.or).not.toHaveBeenCalled();\n      expect(result).toBe(mockQuery);\n    });\n\n    test('should handle empty search fields', () => {\n      ValidationHelper.sanitizeString.mockReturnValue('João');\n      \n      const result = DatabaseHelper.buildSearchQuery(mockQuery, 'João', []);\n      \n      expect(mockQuery.or).not.toHaveBeenCalled();\n      expect(result).toBe(mockQuery);\n    });\n  });\n\n  describe('formatDatabaseError', () => {\n    test('should format unique constraint violation', () => {\n      const error = {\n        code: '23505',\n        message: 'duplicate key value violates unique constraint \"clients_email_key\"',\n        detail: 'Key (email)=(joao@email.com) already exists.'\n      };\n      \n      const result = DatabaseHelper.formatDatabaseError(error);\n      \n      expect(result).toEqual({\n        type: 'UNIQUE_VIOLATION',\n        message: 'Registro duplicado: email já existe',\n        field: 'email',\n        originalError: error\n      });\n    });\n\n    test('should format foreign key violation', () => {\n      const error = {\n        code: '23503',\n        message: 'insert or update on table \"payments\" violates foreign key constraint',\n        detail: 'Key (client_id)=(123) is not present in table \"clients\".'\n      };\n      \n      const result = DatabaseHelper.formatDatabaseError(error);\n      \n      expect(result).toEqual({\n        type: 'FOREIGN_KEY_VIOLATION',\n        message: 'Referência inválida: client_id não existe',\n        field: 'client_id',\n        originalError: error\n      });\n    });\n\n    test('should format not null violation', () => {\n      const error = {\n        code: '23502',\n        message: 'null value in column \"name\" violates not-null constraint',\n        column: 'name'\n      };\n      \n      const result = DatabaseHelper.formatDatabaseError(error);\n      \n      expect(result).toEqual({\n        type: 'NOT_NULL_VIOLATION',\n        message: 'Campo obrigatório: name não pode ser nulo',\n        field: 'name',\n        originalError: error\n      });\n    });\n\n    test('should format generic database error', () => {\n      const error = {\n        code: '42000',\n        message: 'syntax error at or near \"SELCT\"'\n      };\n      \n      const result = DatabaseHelper.formatDatabaseError(error);\n      \n      expect(result).toEqual({\n        type: 'DATABASE_ERROR',\n        message: 'Erro no banco de dados: syntax error at or near \"SELCT\"',\n        originalError: error\n      });\n    });\n\n    test('should handle error without code', () => {\n      const error = {\n        message: 'Connection timeout'\n      };\n      \n      const result = DatabaseHelper.formatDatabaseError(error);\n      \n      expect(result).toEqual({\n        type: 'DATABASE_ERROR',\n        message: 'Erro no banco de dados: Connection timeout',\n        originalError: error\n      });\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}