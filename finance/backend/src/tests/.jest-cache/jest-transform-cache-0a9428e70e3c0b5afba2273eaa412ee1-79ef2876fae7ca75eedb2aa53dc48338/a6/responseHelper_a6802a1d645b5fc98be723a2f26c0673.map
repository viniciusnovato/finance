{"version":3,"names":["cov_2bpxtpwsdt","actualCoverage","HttpStatusCodes","s","require","ResponseHelper","sendSuccess","res","data","b","statusCode","OK","f","response","success","timestamp","Date","toISOString","status","json","sendError","message","code","details","error","sendValidationError","validationErrors","UNPROCESSABLE_ENTITY","sendPaginatedResponse","pagination","meta","currentPage","page","totalPages","totalItems","itemsPerPage","limit","hasNextPage","hasPreviousPage","sendNotFound","resource","NOT_FOUND","sendConflict","CONFLICT","sendUnauthorized","UNAUTHORIZED","sendForbidden","FORBIDDEN","requestTimeout","REQUEST_TIMEOUT","tooManyRequests","TOO_MANY_REQUESTS","badGateway","BAD_GATEWAY","serviceUnavailable","SERVICE_UNAVAILABLE","sendInternalError","INTERNAL_SERVER_ERROR","sendNoContent","NO_CONTENT","send","formatPagination","Math","ceil","module","exports"],"sources":["responseHelper.js"],"sourcesContent":["const { HttpStatusCodes } = require('./constants');\n\n/**\n * Helper para padronizar respostas da API\n * Centraliza a lógica de formatação de respostas de sucesso e erro\n */\nclass ResponseHelper {\n  /**\n   * Envia resposta de sucesso padronizada\n   * @param {Object} res - Objeto de resposta do Express\n   * @param {Object} data - Dados a serem enviados\n   * @param {number} statusCode - Código de status HTTP (padrão: 200)\n   */\n  static sendSuccess(res, data = {}, statusCode = HttpStatusCodes.OK) {\n    const response = {\n      success: true,\n      timestamp: new Date().toISOString(),\n      ...data\n    };\n\n    return res.status(statusCode).json(response);\n  }\n\n  /**\n   * Envia resposta de erro padronizada\n   * @param {Object} res - Objeto de resposta do Express\n   * @param {number} statusCode - Código de status HTTP\n   * @param {string} message - Mensagem de erro\n   * @param {string} code - Código de erro específico\n   * @param {Object} details - Detalhes adicionais do erro (opcional)\n   */\n  static sendError(res, statusCode, message, code, details = null) {\n    const response = {\n      success: false,\n      error: {\n        message,\n        code,\n        timestamp: new Date().toISOString()\n      }\n    };\n\n    if (details) {\n      response.error.details = details;\n    }\n\n    return res.status(statusCode).json(response);\n  }\n\n  /**\n   * Envia resposta de validação com erros específicos\n   * @param {Object} res - Objeto de resposta do Express\n   * @param {Array} validationErrors - Array de erros de validação\n   */\n  static sendValidationError(res, validationErrors) {\n    return ResponseHelper.sendError(\n      res,\n      HttpStatusCodes.UNPROCESSABLE_ENTITY,\n      'Dados de entrada inválidos',\n      'VALIDATION_ERROR',\n      { validationErrors }\n    );\n  }\n\n  /**\n   * Envia resposta de dados paginados\n   * @param {Object} res - Objeto de resposta do Express\n   * @param {Array} data - Array de dados\n   * @param {Object} pagination - Informações de paginação\n   * @param {Object} meta - Metadados adicionais (opcional)\n   */\n  static sendPaginatedResponse(res, data, pagination, meta = {}) {\n    const response = {\n      success: true,\n      timestamp: new Date().toISOString(),\n      data,\n      pagination: {\n        currentPage: pagination.page,\n        totalPages: pagination.totalPages,\n        totalItems: pagination.totalItems,\n        itemsPerPage: pagination.limit,\n        hasNextPage: pagination.page < pagination.totalPages,\n        hasPreviousPage: pagination.page > 1\n      },\n      ...meta\n    };\n\n    return res.status(HttpStatusCodes.OK).json(response);\n  }\n\n  /**\n   * Envia resposta de recurso não encontrado\n   * @param {Object} res - Objeto de resposta do Express\n   * @param {string} resource - Nome do recurso não encontrado\n   * @param {string} code - Código de erro específico\n   */\n  static sendNotFound(res, resource = 'Recurso', code = 'RESOURCE_NOT_FOUND') {\n    return ResponseHelper.sendError(\n      res,\n      HttpStatusCodes.NOT_FOUND,\n      `${resource} não encontrado`,\n      code\n    );\n  }\n\n  /**\n   * Envia resposta de conflito (recurso já existe)\n   * @param {Object} res - Objeto de resposta do Express\n   * @param {string} resource - Nome do recurso em conflito\n   * @param {string} code - Código de erro específico\n   */\n  static sendConflict(res, resource = 'Recurso', code = 'RESOURCE_CONFLICT') {\n    return ResponseHelper.sendError(\n      res,\n      HttpStatusCodes.CONFLICT,\n      `${resource} já existe`,\n      code\n    );\n  }\n\n  /**\n   * Envia resposta de acesso não autorizado\n   * @param {Object} res - Objeto de resposta do Express\n   * @param {string} message - Mensagem personalizada (opcional)\n   */\n  static sendUnauthorized(res, message = 'Acesso não autorizado') {\n    return ResponseHelper.sendError(\n      res,\n      HttpStatusCodes.UNAUTHORIZED,\n      message,\n      'UNAUTHORIZED_ACCESS'\n    );\n  }\n\n  /**\n   * Envia resposta de acesso proibido\n   * @param {Object} res - Objeto de resposta do Express\n   * @param {string} message - Mensagem personalizada (opcional)\n   */\n  static sendForbidden(res, message = 'Acesso proibido') {\n    return ResponseHelper.sendError(\n      res,\n      HttpStatusCodes.FORBIDDEN,\n      message,\n      'FORBIDDEN_ACCESS'\n    );\n  }\n\n  /**\n   * Resposta de timeout de requisição (408)\n   */\n  static requestTimeout(res, message = 'Timeout da requisição') {\n    return res.status(HttpStatusCodes.REQUEST_TIMEOUT).json({\n      success: false,\n      message,\n      code: 'REQUEST_TIMEOUT',\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Resposta de muitas requisições (429)\n   */\n  static tooManyRequests(res, message = 'Muitas requisições') {\n    return res.status(HttpStatusCodes.TOO_MANY_REQUESTS).json({\n      success: false,\n      message,\n      code: 'TOO_MANY_REQUESTS',\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Resposta de bad gateway (502)\n   */\n  static badGateway(res, message = 'Bad Gateway') {\n    return res.status(HttpStatusCodes.BAD_GATEWAY).json({\n      success: false,\n      message,\n      code: 'BAD_GATEWAY',\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Resposta de serviço indisponível (503)\n   */\n  static serviceUnavailable(res, message = 'Serviço indisponível') {\n    return res.status(HttpStatusCodes.SERVICE_UNAVAILABLE).json({\n      success: false,\n      message,\n      code: 'SERVICE_UNAVAILABLE',\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  /**\n   * Envia resposta de erro interno do servidor\n   * @param {Object} res - Objeto de resposta do Express\n   * @param {string} message - Mensagem de erro (opcional)\n   * @param {Object} details - Detalhes do erro (opcional)\n   */\n  static sendInternalError(res, message = 'Erro interno do servidor', details = null) {\n    return ResponseHelper.sendError(\n      res,\n      HttpStatusCodes.INTERNAL_SERVER_ERROR,\n      message,\n      'INTERNAL_SERVER_ERROR',\n      details\n    );\n  }\n\n  /**\n   * Envia resposta de operação bem-sucedida sem conteúdo\n   * @param {Object} res - Objeto de resposta do Express\n   */\n  static sendNoContent(res) {\n    return res.status(HttpStatusCodes.NO_CONTENT).send();\n  }\n\n  /**\n   * Formata dados de paginação para resposta\n   * @param {number} page - Página atual\n   * @param {number} limit - Itens por página\n   * @param {number} totalItems - Total de itens\n   * @returns {Object} Objeto de paginação formatado\n   */\n  static formatPagination(page, limit, totalItems) {\n    const totalPages = Math.ceil(totalItems / limit);\n    \n    return {\n      page,\n      limit,\n      totalItems,\n      totalPages,\n      hasNextPage: page < totalPages,\n      hasPreviousPage: page > 1\n    };\n  }\n}\n\nmodule.exports = { ResponseHelper };"],"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","ignoreList":[]}