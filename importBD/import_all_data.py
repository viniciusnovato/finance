#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script principal para importa√ß√£o completa dos dados para o Supabase
Executa a sequ√™ncia: clients ‚Üí contracts ‚Üí payments
"""

import subprocess
import sys
import time
from datetime import datetime

class DataImporter:
    def __init__(self):
        self.start_time = datetime.now()
        self.steps_completed = 0
        self.total_steps = 3
        
    def run_script(self, script_name, description):
        """Executa um script Python e retorna o resultado"""
        print(f"\n{'='*60}")
        print(f"üöÄ EXECUTANDO: {description}")
        print(f"üìÑ Script: {script_name}")
        print(f"‚è∞ Hor√°rio: {datetime.now().strftime('%H:%M:%S')}")
        print(f"{'='*60}")
        
        try:
            # Executa o script
            result = subprocess.run(
                [sys.executable, script_name],
                capture_output=True,
                text=True,
                timeout=300  # 5 minutos de timeout
            )
            
            # Mostra a sa√≠da
            if result.stdout:
                print(result.stdout)
            
            if result.stderr:
                print(f"‚ö†Ô∏è  Avisos/Erros:\n{result.stderr}")
            
            # Verifica se foi bem-sucedido
            if result.returncode == 0:
                print(f"\n‚úÖ {description} - CONCLU√çDO COM SUCESSO")
                self.steps_completed += 1
                return True
            else:
                print(f"\n‚ùå {description} - FALHOU (c√≥digo: {result.returncode})")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"\n‚è∞ {description} - TIMEOUT (mais de 5 minutos)")
            return False
        except Exception as e:
            print(f"\n‚ùå {description} - ERRO: {e}")
            return False
    
    def print_progress(self):
        """Mostra o progresso atual"""
        progress = (self.steps_completed / self.total_steps) * 100
        elapsed = datetime.now() - self.start_time
        
        print(f"\nüìä PROGRESSO: {self.steps_completed}/{self.total_steps} ({progress:.1f}%)")
        print(f"‚è±Ô∏è  Tempo decorrido: {elapsed}")
    
    def validate_files_exist(self):
        """Valida se todos os arquivos necess√°rios existem"""
        import os
        
        required_files = [
            'clients.csv',
            'contracts.csv', 
            'payments.csv',
            'import_clients_supabase.py',
            'import_contracts_supabase.py',
            'import_payments_supabase.py'
        ]
        
        print("üîç Validando arquivos necess√°rios...")
        
        missing_files = []
        for file in required_files:
            if not os.path.exists(file):
                missing_files.append(file)
        
        if missing_files:
            print(f"‚ùå Arquivos n√£o encontrados: {', '.join(missing_files)}")
            return False
        
        print("‚úÖ Todos os arquivos necess√°rios encontrados")
        return True
    
    def run_full_import(self):
        """Executa a importa√ß√£o completa"""
        print("üéØ INICIANDO IMPORTA√á√ÉO COMPLETA DOS DADOS")
        print(f"üìÖ Data/Hora: {self.start_time.strftime('%d/%m/%Y %H:%M:%S')}")
        print("\nüìã SEQU√äNCIA DE IMPORTA√á√ÉO:")
        print("   1Ô∏è‚É£  Clientes (clients.csv)")
        print("   2Ô∏è‚É£  Contratos (contracts.csv)")
        print("   3Ô∏è‚É£  Pagamentos (payments.csv)")
        
        # Valida arquivos
        if not self.validate_files_exist():
            print("\n‚ùå IMPORTA√á√ÉO CANCELADA - Arquivos em falta")
            return False
        
        # Pausa para o usu√°rio revisar
        print("\n‚è≥ Iniciando em 3 segundos...")
        time.sleep(3)
        
        # 1. Importa clientes
        success = self.run_script(
            'import_clients_supabase.py',
            'IMPORTA√á√ÉO DE CLIENTES'
        )
        
        if not success:
            print("\nüõë IMPORTA√á√ÉO INTERROMPIDA - Falha na importa√ß√£o de clientes")
            return False
        
        self.print_progress()
        time.sleep(2)
        
        # 2. Importa contratos
        success = self.run_script(
            'import_contracts_supabase.py',
            'IMPORTA√á√ÉO DE CONTRATOS'
        )
        
        if not success:
            print("\nüõë IMPORTA√á√ÉO INTERROMPIDA - Falha na importa√ß√£o de contratos")
            return False
        
        self.print_progress()
        time.sleep(2)
        
        # 3. Importa pagamentos
        success = self.run_script(
            'import_payments_supabase.py',
            'IMPORTA√á√ÉO DE PAGAMENTOS'
        )
        
        if not success:
            print("\nüõë IMPORTA√á√ÉO INTERROMPIDA - Falha na importa√ß√£o de pagamentos")
            return False
        
        self.print_progress()
        
        # Sucesso total
        total_time = datetime.now() - self.start_time
        
        print(f"\n{'='*60}")
        print("üéâ IMPORTA√á√ÉO COMPLETA FINALIZADA COM SUCESSO!")
        print(f"‚è±Ô∏è  Tempo total: {total_time}")
        print(f"üìä Etapas conclu√≠das: {self.steps_completed}/{self.total_steps}")
        print(f"{'='*60}")
        
        return True
    
    def run_validation(self):
        """Executa valida√ß√£o final dos dados"""
        print("\nüîç EXECUTANDO VALIDA√á√ÉO FINAL...")
        
        # Aqui voc√™ pode adicionar valida√ß√µes espec√≠ficas
        # Por exemplo, verificar se o n√∫mero de registros est√° correto
        
        print("‚úÖ Valida√ß√£o conclu√≠da")
        return True

def main():
    print("üöÄ SISTEMA DE IMPORTA√á√ÉO DE DADOS - SUPABASE")
    print("=" * 50)
    
    importer = DataImporter()
    
    # Executa importa√ß√£o completa
    success = importer.run_full_import()
    
    if success:
        # Executa valida√ß√£o final
        importer.run_validation()
        
        print("\nüéØ PROCESSO COMPLETO FINALIZADO!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("   ‚Ä¢ Verificar dados no painel do Supabase")
        print("   ‚Ä¢ Testar consultas na aplica√ß√£o")
        print("   ‚Ä¢ Validar integridade referencial")
    else:
        print("\n‚ùå PROCESSO INTERROMPIDO COM FALHAS")
        print("\nüîß A√á√ïES RECOMENDADAS:")
        print("   ‚Ä¢ Verificar logs de erro acima")
        print("   ‚Ä¢ Corrigir problemas identificados")
        print("   ‚Ä¢ Executar novamente o processo")

if __name__ == "__main__":
    main()